// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(77)
            {
                { typeof(global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.IntRangeValue>), 0 },
                { typeof(global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.PercentageValue>), 1 },
                { typeof(global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, int>), 2 },
                { typeof(global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.School, int>), 3 },
                { typeof(global::Nighthollow.Data.School?), 4 },
                { typeof(global::Nighthollow.Data.StatTagType?), 5 },
                { typeof(global::Nighthollow.Data.StatType?), 6 },
                { typeof(global::Nighthollow.Delegates.DelegateId?), 7 },
                { typeof(global::Nighthollow.Stats.DurationValue?), 8 },
                { typeof(global::Nighthollow.Stats.ModifierType?), 9 },
                { typeof(global::Nighthollow.Stats.StatId?), 10 },
                { typeof(global::System.Collections.Immutable.ImmutableDictionary<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.IntRangeValue>), 11 },
                { typeof(global::System.Collections.Immutable.ImmutableDictionary<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.PercentageValue>), 12 },
                { typeof(global::System.Collections.Immutable.ImmutableDictionary<global::Nighthollow.Data.DamageType, int>), 13 },
                { typeof(global::System.Collections.Immutable.ImmutableDictionary<global::Nighthollow.Data.School, int>), 14 },
                { typeof(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.AffixTypeData>), 15 },
                { typeof(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.CreatureItemData>), 16 },
                { typeof(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.CreatureTypeData>), 17 },
                { typeof(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.ModifierData>), 18 },
                { typeof(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.SkillTypeData>), 19 },
                { typeof(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.StatData>), 20 },
                { typeof(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.StaticItemListData>), 21 },
                { typeof(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.StatusEffectTypeData>), 22 },
                { typeof(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.TableMetadata>), 23 },
                { typeof(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.AffixData>), 24 },
                { typeof(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.CreatureItemData>), 25 },
                { typeof(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.CreatureSkillAnimation>), 26 },
                { typeof(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>), 27 },
                { typeof(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ResourceItemData>), 28 },
                { typeof(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.SkillItemData>), 29 },
                { typeof(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.StatusEffectItemData>), 30 },
                { typeof(global::System.Collections.Immutable.ImmutableList<int>), 31 },
                { typeof(global::Nighthollow.Data.DamageType), 32 },
                { typeof(global::Nighthollow.Data.PlayerName), 33 },
                { typeof(global::Nighthollow.Data.School), 34 },
                { typeof(global::Nighthollow.Data.SkillAnimationNumber), 35 },
                { typeof(global::Nighthollow.Data.SkillAnimationType), 36 },
                { typeof(global::Nighthollow.Data.SkillType), 37 },
                { typeof(global::Nighthollow.Data.StatTagType), 38 },
                { typeof(global::Nighthollow.Data.StatType), 39 },
                { typeof(global::Nighthollow.Delegates.DelegateId), 40 },
                { typeof(global::Nighthollow.Stats.ModifierType), 41 },
                { typeof(global::Nighthollow.Stats.StatId), 42 },
                { typeof(global::Nighthollow.Triggers.Conditions.IntegerOperator), 43 },
                { typeof(global::Nighthollow.Triggers.Effects.CharacterName), 44 },
                { typeof(global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect.Direction), 45 },
                { typeof(global::Nighthollow.Data.IItemData), 46 },
                { typeof(global::Nighthollow.Data.IValueData), 47 },
                { typeof(global::Nighthollow.Triggers.ICondition), 48 },
                { typeof(global::Nighthollow.Triggers.IEffect), 49 },
                { typeof(global::Nighthollow.Triggers.ITrigger), 50 },
                { typeof(global::Nighthollow.Components.GameDataHolder), 51 },
                { typeof(global::Nighthollow.Data.AffixData), 52 },
                { typeof(global::Nighthollow.Data.AffixTypeData), 53 },
                { typeof(global::Nighthollow.Data.BattleData), 54 },
                { typeof(global::Nighthollow.Data.BoolValueData), 55 },
                { typeof(global::Nighthollow.Data.CreatureItemData), 56 },
                { typeof(global::Nighthollow.Data.CreatureSkillAnimation), 57 },
                { typeof(global::Nighthollow.Data.CreatureTypeData), 58 },
                { typeof(global::Nighthollow.Data.GlobalData), 59 },
                { typeof(global::Nighthollow.Data.IntValueData), 60 },
                { typeof(global::Nighthollow.Data.ModifierData), 61 },
                { typeof(global::Nighthollow.Data.ResourceItemData), 62 },
                { typeof(global::Nighthollow.Data.SerializationList), 63 },
                { typeof(global::Nighthollow.Data.SkillItemData), 64 },
                { typeof(global::Nighthollow.Data.SkillTypeData), 65 },
                { typeof(global::Nighthollow.Data.StatData), 66 },
                { typeof(global::Nighthollow.Data.StaticItemListData), 67 },
                { typeof(global::Nighthollow.Data.StatusEffectItemData), 68 },
                { typeof(global::Nighthollow.Data.StatusEffectTypeData), 69 },
                { typeof(global::Nighthollow.Data.TableMetadata), 70 },
                { typeof(global::Nighthollow.Stats.DurationValue), 71 },
                { typeof(global::Nighthollow.Stats.IntRangeValue), 72 },
                { typeof(global::Nighthollow.Stats.PercentageValue), 73 },
                { typeof(global::Nighthollow.Triggers.Conditions.UserDeckSizeCondition), 74 },
                { typeof(global::Nighthollow.Triggers.Effects.CharacterDialogueEffect), 75 },
                { typeof(global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect), 76 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new MessagePack.Formatters.Nighthollow.Data.ImmutableDictionaryValueFormatter<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.IntRangeValue>();
                case 1: return new MessagePack.Formatters.Nighthollow.Data.ImmutableDictionaryValueFormatter<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.PercentageValue>();
                case 2: return new MessagePack.Formatters.Nighthollow.Data.ImmutableDictionaryValueFormatter<global::Nighthollow.Data.DamageType, int>();
                case 3: return new MessagePack.Formatters.Nighthollow.Data.ImmutableDictionaryValueFormatter<global::Nighthollow.Data.School, int>();
                case 4: return new global::MessagePack.Formatters.NullableFormatter<global::Nighthollow.Data.School>();
                case 5: return new global::MessagePack.Formatters.NullableFormatter<global::Nighthollow.Data.StatTagType>();
                case 6: return new global::MessagePack.Formatters.NullableFormatter<global::Nighthollow.Data.StatType>();
                case 7: return new global::MessagePack.Formatters.NullableFormatter<global::Nighthollow.Delegates.DelegateId>();
                case 8: return new global::MessagePack.Formatters.NullableFormatter<global::Nighthollow.Stats.DurationValue>();
                case 9: return new global::MessagePack.Formatters.NullableFormatter<global::Nighthollow.Stats.ModifierType>();
                case 10: return new global::MessagePack.Formatters.NullableFormatter<global::Nighthollow.Stats.StatId>();
                case 11: return new global::MessagePack.ImmutableCollection.ImmutableDictionaryFormatter<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.IntRangeValue>();
                case 12: return new global::MessagePack.ImmutableCollection.ImmutableDictionaryFormatter<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.PercentageValue>();
                case 13: return new global::MessagePack.ImmutableCollection.ImmutableDictionaryFormatter<global::Nighthollow.Data.DamageType, int>();
                case 14: return new global::MessagePack.ImmutableCollection.ImmutableDictionaryFormatter<global::Nighthollow.Data.School, int>();
                case 15: return new global::MessagePack.ImmutableCollection.ImmutableDictionaryFormatter<int, global::Nighthollow.Data.AffixTypeData>();
                case 16: return new global::MessagePack.ImmutableCollection.ImmutableDictionaryFormatter<int, global::Nighthollow.Data.CreatureItemData>();
                case 17: return new global::MessagePack.ImmutableCollection.ImmutableDictionaryFormatter<int, global::Nighthollow.Data.CreatureTypeData>();
                case 18: return new global::MessagePack.ImmutableCollection.ImmutableDictionaryFormatter<int, global::Nighthollow.Data.ModifierData>();
                case 19: return new global::MessagePack.ImmutableCollection.ImmutableDictionaryFormatter<int, global::Nighthollow.Data.SkillTypeData>();
                case 20: return new global::MessagePack.ImmutableCollection.ImmutableDictionaryFormatter<int, global::Nighthollow.Data.StatData>();
                case 21: return new global::MessagePack.ImmutableCollection.ImmutableDictionaryFormatter<int, global::Nighthollow.Data.StaticItemListData>();
                case 22: return new global::MessagePack.ImmutableCollection.ImmutableDictionaryFormatter<int, global::Nighthollow.Data.StatusEffectTypeData>();
                case 23: return new global::MessagePack.ImmutableCollection.ImmutableDictionaryFormatter<int, global::Nighthollow.Data.TableMetadata>();
                case 24: return new global::MessagePack.ImmutableCollection.ImmutableListFormatter<global::Nighthollow.Data.AffixData>();
                case 25: return new global::MessagePack.ImmutableCollection.ImmutableListFormatter<global::Nighthollow.Data.CreatureItemData>();
                case 26: return new global::MessagePack.ImmutableCollection.ImmutableListFormatter<global::Nighthollow.Data.CreatureSkillAnimation>();
                case 27: return new global::MessagePack.ImmutableCollection.ImmutableListFormatter<global::Nighthollow.Data.ModifierData>();
                case 28: return new global::MessagePack.ImmutableCollection.ImmutableListFormatter<global::Nighthollow.Data.ResourceItemData>();
                case 29: return new global::MessagePack.ImmutableCollection.ImmutableListFormatter<global::Nighthollow.Data.SkillItemData>();
                case 30: return new global::MessagePack.ImmutableCollection.ImmutableListFormatter<global::Nighthollow.Data.StatusEffectItemData>();
                case 31: return new global::MessagePack.ImmutableCollection.ImmutableListFormatter<int>();
                case 32: return new MessagePack.Formatters.Nighthollow.Data.DamageTypeFormatter();
                case 33: return new MessagePack.Formatters.Nighthollow.Data.PlayerNameFormatter();
                case 34: return new MessagePack.Formatters.Nighthollow.Data.SchoolFormatter();
                case 35: return new MessagePack.Formatters.Nighthollow.Data.SkillAnimationNumberFormatter();
                case 36: return new MessagePack.Formatters.Nighthollow.Data.SkillAnimationTypeFormatter();
                case 37: return new MessagePack.Formatters.Nighthollow.Data.SkillTypeFormatter();
                case 38: return new MessagePack.Formatters.Nighthollow.Data.StatTagTypeFormatter();
                case 39: return new MessagePack.Formatters.Nighthollow.Data.StatTypeFormatter();
                case 40: return new MessagePack.Formatters.Nighthollow.Delegates.DelegateIdFormatter();
                case 41: return new MessagePack.Formatters.Nighthollow.Stats.ModifierTypeFormatter();
                case 42: return new MessagePack.Formatters.Nighthollow.Stats.StatIdFormatter();
                case 43: return new MessagePack.Formatters.Nighthollow.Triggers.Conditions.IntegerOperatorFormatter();
                case 44: return new MessagePack.Formatters.Nighthollow.Triggers.Effects.CharacterNameFormatter();
                case 45: return new MessagePack.Formatters.Nighthollow.Triggers.Effects.DisplayHelpTextEffect_DirectionFormatter();
                case 46: return new MessagePack.Formatters.Nighthollow.Data.IItemDataFormatter();
                case 47: return new MessagePack.Formatters.Nighthollow.Data.IValueDataFormatter();
                case 48: return new MessagePack.Formatters.Nighthollow.Triggers.IConditionFormatter();
                case 49: return new MessagePack.Formatters.Nighthollow.Triggers.IEffectFormatter();
                case 50: return new MessagePack.Formatters.Nighthollow.Triggers.ITriggerFormatter();
                case 51: return new MessagePack.Formatters.Nighthollow.Components.GameDataHolderFormatter();
                case 52: return new MessagePack.Formatters.Nighthollow.Data.AffixDataFormatter();
                case 53: return new MessagePack.Formatters.Nighthollow.Data.AffixTypeDataFormatter();
                case 54: return new MessagePack.Formatters.Nighthollow.Data.BattleDataFormatter();
                case 55: return new MessagePack.Formatters.Nighthollow.Data.BoolValueDataFormatter();
                case 56: return new MessagePack.Formatters.Nighthollow.Data.CreatureItemDataFormatter();
                case 57: return new MessagePack.Formatters.Nighthollow.Data.CreatureSkillAnimationFormatter();
                case 58: return new MessagePack.Formatters.Nighthollow.Data.CreatureTypeDataFormatter();
                case 59: return new MessagePack.Formatters.Nighthollow.Data.GlobalDataFormatter();
                case 60: return new MessagePack.Formatters.Nighthollow.Data.IntValueDataFormatter();
                case 61: return new MessagePack.Formatters.Nighthollow.Data.ModifierDataFormatter();
                case 62: return new MessagePack.Formatters.Nighthollow.Data.ResourceItemDataFormatter();
                case 63: return new MessagePack.Formatters.Nighthollow.Data.SerializationListFormatter();
                case 64: return new MessagePack.Formatters.Nighthollow.Data.SkillItemDataFormatter();
                case 65: return new MessagePack.Formatters.Nighthollow.Data.SkillTypeDataFormatter();
                case 66: return new MessagePack.Formatters.Nighthollow.Data.StatDataFormatter();
                case 67: return new MessagePack.Formatters.Nighthollow.Data.StaticItemListDataFormatter();
                case 68: return new MessagePack.Formatters.Nighthollow.Data.StatusEffectItemDataFormatter();
                case 69: return new MessagePack.Formatters.Nighthollow.Data.StatusEffectTypeDataFormatter();
                case 70: return new MessagePack.Formatters.Nighthollow.Data.TableMetadataFormatter();
                case 71: return new MessagePack.Formatters.Nighthollow.Stats.DurationValueFormatter();
                case 72: return new MessagePack.Formatters.Nighthollow.Stats.IntRangeValueFormatter();
                case 73: return new MessagePack.Formatters.Nighthollow.Stats.PercentageValueFormatter();
                case 74: return new MessagePack.Formatters.Nighthollow.Triggers.Conditions.UserDeckSizeConditionFormatter();
                case 75: return new MessagePack.Formatters.Nighthollow.Triggers.Effects.CharacterDialogueEffectFormatter();
                case 76: return new MessagePack.Formatters.Nighthollow.Triggers.Effects.DisplayHelpTextEffectFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Nighthollow.Data
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class DamageTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.DamageType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.DamageType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Nighthollow.Data.DamageType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nighthollow.Data.DamageType)reader.ReadInt32();
        }
    }

    public sealed class PlayerNameFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.PlayerName>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.PlayerName value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Nighthollow.Data.PlayerName Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nighthollow.Data.PlayerName)reader.ReadInt32();
        }
    }

    public sealed class SchoolFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.School>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.School value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Nighthollow.Data.School Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nighthollow.Data.School)reader.ReadInt32();
        }
    }

    public sealed class SkillAnimationNumberFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.SkillAnimationNumber>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.SkillAnimationNumber value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Nighthollow.Data.SkillAnimationNumber Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nighthollow.Data.SkillAnimationNumber)reader.ReadInt32();
        }
    }

    public sealed class SkillAnimationTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.SkillAnimationType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.SkillAnimationType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Nighthollow.Data.SkillAnimationType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nighthollow.Data.SkillAnimationType)reader.ReadInt32();
        }
    }

    public sealed class SkillTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.SkillType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.SkillType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Nighthollow.Data.SkillType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nighthollow.Data.SkillType)reader.ReadInt32();
        }
    }

    public sealed class StatTagTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.StatTagType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.StatTagType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Nighthollow.Data.StatTagType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nighthollow.Data.StatTagType)reader.ReadInt32();
        }
    }

    public sealed class StatTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.StatType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.StatType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Nighthollow.Data.StatType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nighthollow.Data.StatType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Nighthollow.Delegates
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class DelegateIdFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Delegates.DelegateId>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Delegates.DelegateId value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Nighthollow.Delegates.DelegateId Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nighthollow.Delegates.DelegateId)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Nighthollow.Stats
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class ModifierTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Stats.ModifierType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Stats.ModifierType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Nighthollow.Stats.ModifierType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nighthollow.Stats.ModifierType)reader.ReadInt32();
        }
    }

    public sealed class StatIdFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Stats.StatId>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Stats.StatId value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Nighthollow.Stats.StatId Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nighthollow.Stats.StatId)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Nighthollow.Triggers.Conditions
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class IntegerOperatorFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Triggers.Conditions.IntegerOperator>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Triggers.Conditions.IntegerOperator value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Nighthollow.Triggers.Conditions.IntegerOperator Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nighthollow.Triggers.Conditions.IntegerOperator)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Nighthollow.Triggers.Effects
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class CharacterNameFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Triggers.Effects.CharacterName>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Triggers.Effects.CharacterName value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Nighthollow.Triggers.Effects.CharacterName Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nighthollow.Triggers.Effects.CharacterName)reader.ReadInt32();
        }
    }

    public sealed class DisplayHelpTextEffect_DirectionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect.Direction>
    {
        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect.Direction value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect.Direction Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect.Direction)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Nighthollow.Data
{
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using MessagePack;

    public sealed class IItemDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.IItemData>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public IItemDataFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(2, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Nighthollow.Data.CreatureItemData).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Nighthollow.Data.ResourceItemData).TypeHandle, new KeyValuePair<int, int>(1, 1) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(2)
            {
                { 0, 0 },
                { 1, 1 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.IItemData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.CreatureItemData>().Serialize(ref writer, (global::Nighthollow.Data.CreatureItemData)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.ResourceItemData>().Serialize(ref writer, (global::Nighthollow.Data.ResourceItemData)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Nighthollow.Data.IItemData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Nighthollow.Data.IItemData");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Nighthollow.Data.IItemData result = null;
            switch (key)
            {
                case 0:
                    result = (global::Nighthollow.Data.IItemData)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.CreatureItemData>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Nighthollow.Data.IItemData)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.ResourceItemData>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }

    public sealed class IValueDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.IValueData>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public IValueDataFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(9, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Nighthollow.Data.IntValueData).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Nighthollow.Stats.DurationValue).TypeHandle, new KeyValuePair<int, int>(1, 1) },
                { typeof(global::Nighthollow.Stats.PercentageValue).TypeHandle, new KeyValuePair<int, int>(2, 2) },
                { typeof(global::Nighthollow.Stats.IntRangeValue).TypeHandle, new KeyValuePair<int, int>(3, 3) },
                { typeof(global::Nighthollow.Data.BoolValueData).TypeHandle, new KeyValuePair<int, int>(4, 4) },
                { typeof(global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, int>).TypeHandle, new KeyValuePair<int, int>(5, 5) },
                { typeof(global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.PercentageValue>).TypeHandle, new KeyValuePair<int, int>(6, 6) },
                { typeof(global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.IntRangeValue>).TypeHandle, new KeyValuePair<int, int>(7, 7) },
                { typeof(global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.School, int>).TypeHandle, new KeyValuePair<int, int>(8, 8) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(9)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
                { 5, 5 },
                { 6, 6 },
                { 7, 7 },
                { 8, 8 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.IValueData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.IntValueData>().Serialize(ref writer, (global::Nighthollow.Data.IntValueData)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue>().Serialize(ref writer, (global::Nighthollow.Stats.DurationValue)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Stats.PercentageValue>().Serialize(ref writer, (global::Nighthollow.Stats.PercentageValue)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Stats.IntRangeValue>().Serialize(ref writer, (global::Nighthollow.Stats.IntRangeValue)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.BoolValueData>().Serialize(ref writer, (global::Nighthollow.Data.BoolValueData)value, options);
                        break;
                    case 5:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, int>>().Serialize(ref writer, (global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, int>)value, options);
                        break;
                    case 6:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.PercentageValue>>().Serialize(ref writer, (global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.PercentageValue>)value, options);
                        break;
                    case 7:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.IntRangeValue>>().Serialize(ref writer, (global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.IntRangeValue>)value, options);
                        break;
                    case 8:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.School, int>>().Serialize(ref writer, (global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.School, int>)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Nighthollow.Data.IValueData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Nighthollow.Data.IValueData");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Nighthollow.Data.IValueData result = null;
            switch (key)
            {
                case 0:
                    result = (global::Nighthollow.Data.IValueData)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.IntValueData>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Nighthollow.Data.IValueData)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Nighthollow.Data.IValueData)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Stats.PercentageValue>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Nighthollow.Data.IValueData)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Stats.IntRangeValue>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::Nighthollow.Data.IValueData)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.BoolValueData>().Deserialize(ref reader, options);
                    break;
                case 5:
                    result = (global::Nighthollow.Data.IValueData)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, int>>().Deserialize(ref reader, options);
                    break;
                case 6:
                    result = (global::Nighthollow.Data.IValueData)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.PercentageValue>>().Deserialize(ref reader, options);
                    break;
                case 7:
                    result = (global::Nighthollow.Data.IValueData)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.IntRangeValue>>().Deserialize(ref reader, options);
                    break;
                case 8:
                    result = (global::Nighthollow.Data.IValueData)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.School, int>>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Nighthollow.Triggers
{
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using MessagePack;

    public sealed class IConditionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Triggers.ICondition>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public IConditionFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(1, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Nighthollow.Triggers.Conditions.UserDeckSizeCondition).TypeHandle, new KeyValuePair<int, int>(0, 0) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(1)
            {
                { 0, 0 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Triggers.ICondition value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.Conditions.UserDeckSizeCondition>().Serialize(ref writer, (global::Nighthollow.Triggers.Conditions.UserDeckSizeCondition)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Nighthollow.Triggers.ICondition Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Nighthollow.Triggers.ICondition");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Nighthollow.Triggers.ICondition result = null;
            switch (key)
            {
                case 0:
                    result = (global::Nighthollow.Triggers.ICondition)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.Conditions.UserDeckSizeCondition>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }

    public sealed class IEffectFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Triggers.IEffect>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public IEffectFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(2, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Nighthollow.Triggers.Effects.CharacterDialogueEffect).TypeHandle, new KeyValuePair<int, int>(1, 1) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(2)
            {
                { 0, 0 },
                { 1, 1 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Triggers.IEffect value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect>().Serialize(ref writer, (global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.Effects.CharacterDialogueEffect>().Serialize(ref writer, (global::Nighthollow.Triggers.Effects.CharacterDialogueEffect)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Nighthollow.Triggers.IEffect Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Nighthollow.Triggers.IEffect");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Nighthollow.Triggers.IEffect result = null;
            switch (key)
            {
                case 0:
                    result = (global::Nighthollow.Triggers.IEffect)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Nighthollow.Triggers.IEffect)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.Effects.CharacterDialogueEffect>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }

    public sealed class ITriggerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Triggers.ITrigger>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public ITriggerFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(7, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.WorldSceneReadyEvent>).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.BattleSceneReadyEvent>).TypeHandle, new KeyValuePair<int, int>(1, 1) },
                { typeof(global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.BattleStartedEvent>).TypeHandle, new KeyValuePair<int, int>(2, 2) },
                { typeof(global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.DrewOpeningHandEvent>).TypeHandle, new KeyValuePair<int, int>(3, 3) },
                { typeof(global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.EnemyCreatureSpawnedEvent>).TypeHandle, new KeyValuePair<int, int>(4, 4) },
                { typeof(global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.UserCreaturePlayedEvent>).TypeHandle, new KeyValuePair<int, int>(5, 5) },
                { typeof(global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.TriggerInvokedEvent>).TypeHandle, new KeyValuePair<int, int>(6, 6) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(7)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
                { 5, 5 },
                { 6, 6 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Triggers.ITrigger value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.WorldSceneReadyEvent>>().Serialize(ref writer, (global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.WorldSceneReadyEvent>)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.BattleSceneReadyEvent>>().Serialize(ref writer, (global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.BattleSceneReadyEvent>)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.BattleStartedEvent>>().Serialize(ref writer, (global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.BattleStartedEvent>)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.DrewOpeningHandEvent>>().Serialize(ref writer, (global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.DrewOpeningHandEvent>)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.EnemyCreatureSpawnedEvent>>().Serialize(ref writer, (global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.EnemyCreatureSpawnedEvent>)value, options);
                        break;
                    case 5:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.UserCreaturePlayedEvent>>().Serialize(ref writer, (global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.UserCreaturePlayedEvent>)value, options);
                        break;
                    case 6:
                        options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.TriggerInvokedEvent>>().Serialize(ref writer, (global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.TriggerInvokedEvent>)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Nighthollow.Triggers.ITrigger Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::Nighthollow.Triggers.ITrigger");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Nighthollow.Triggers.ITrigger result = null;
            switch (key)
            {
                case 0:
                    result = (global::Nighthollow.Triggers.ITrigger)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.WorldSceneReadyEvent>>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Nighthollow.Triggers.ITrigger)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.BattleSceneReadyEvent>>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Nighthollow.Triggers.ITrigger)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.BattleStartedEvent>>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Nighthollow.Triggers.ITrigger)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.DrewOpeningHandEvent>>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::Nighthollow.Triggers.ITrigger)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.EnemyCreatureSpawnedEvent>>().Deserialize(ref reader, options);
                    break;
                case 5:
                    result = (global::Nighthollow.Triggers.ITrigger)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.UserCreaturePlayedEvent>>().Deserialize(ref reader, options);
                    break;
                case 6:
                    result = (global::Nighthollow.Triggers.ITrigger)options.Resolver.GetFormatterWithVerify<global::Nighthollow.Triggers.TriggerData<global::Nighthollow.Triggers.Events.TriggerInvokedEvent>>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Nighthollow.Components
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class GameDataHolderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Components.GameDataHolder>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Components.GameDataHolder value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.CreatureTypeData>>().Serialize(ref writer, value.Creatures, options);
        }

        public global::Nighthollow.Components.GameDataHolder Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Creatures__ = default(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.CreatureTypeData>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Creatures__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.CreatureTypeData>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Components.GameDataHolder(__Creatures__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Nighthollow.Data
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AffixDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.AffixData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.AffixData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.AffixTypeId);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Serialize(ref writer, value.Modifiers, options);
        }

        public global::Nighthollow.Data.AffixData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __AffixTypeId__ = default(int);
            var __Modifiers__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __AffixTypeId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Modifiers__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.AffixData(__AffixTypeId__, __Modifiers__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class AffixTypeDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.AffixTypeData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.AffixTypeData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.MinLevel);
            writer.Write(value.Weight);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.IntRangeValue>().Serialize(ref writer, value.ManaCost, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Serialize(ref writer, value.Modifiers, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.School?>().Serialize(ref writer, value.InfluenceType, options);
        }

        public global::Nighthollow.Data.AffixTypeData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MinLevel__ = default(int);
            var __Weight__ = default(int);
            var __ManaCost__ = default(global::Nighthollow.Stats.IntRangeValue);
            var __Modifiers__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>);
            var __InfluenceType__ = default(global::Nighthollow.Data.School?);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MinLevel__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Weight__ = reader.ReadInt32();
                        break;
                    case 2:
                        __ManaCost__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.IntRangeValue>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Modifiers__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __InfluenceType__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.School?>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.AffixTypeData(__MinLevel__, __Weight__, __ManaCost__, __Modifiers__, __InfluenceType__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BattleDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.BattleData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.BattleData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.CreatureItemData>>().Serialize(ref writer, value.Enemies, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Serialize(ref writer, value.EnemyModifiers, options);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.UserDeckOverride, options);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.EnemyListOverride, options);
        }

        public global::Nighthollow.Data.BattleData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Enemies__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.CreatureItemData>);
            var __EnemyModifiers__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>);
            var __UserDeckOverride__ = default(int?);
            var __EnemyListOverride__ = default(int?);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Enemies__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.CreatureItemData>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __EnemyModifiers__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __UserDeckOverride__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __EnemyListOverride__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.BattleData(__Enemies__, __EnemyModifiers__, __UserDeckOverride__, __EnemyListOverride__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class BoolValueDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.BoolValueData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.BoolValueData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(1);
            writer.Write(value.Bool);
        }

        public global::Nighthollow.Data.BoolValueData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Bool__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Bool__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.BoolValueData(__Bool__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreatureItemDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.CreatureItemData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.CreatureItemData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            writer.Write(value.CreatureTypeId);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.School>().Serialize(ref writer, value.School, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.SkillItemData>>().Serialize(ref writer, value.Skills, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.AffixData>>().Serialize(ref writer, value.Affixes, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Serialize(ref writer, value.ImplicitModifiers, options);
            writer.Write(value.Health);
            writer.Write(value.ManaCost);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.School, int>>().Serialize(ref writer, value.InfluenceCost, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.IntRangeValue>>().Serialize(ref writer, value.BaseDamage, options);
        }

        public global::Nighthollow.Data.CreatureItemData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __CreatureTypeId__ = default(int);
            var __Name__ = default(string);
            var __School__ = default(global::Nighthollow.Data.School);
            var __Skills__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.SkillItemData>);
            var __Affixes__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.AffixData>);
            var __ImplicitModifiers__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>);
            var __Health__ = default(int);
            var __ManaCost__ = default(int);
            var __InfluenceCost__ = default(global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.School, int>);
            var __BaseDamage__ = default(global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.IntRangeValue>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __CreatureTypeId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __School__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.School>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Skills__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.SkillItemData>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Affixes__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.AffixData>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __ImplicitModifiers__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Health__ = reader.ReadInt32();
                        break;
                    case 7:
                        __ManaCost__ = reader.ReadInt32();
                        break;
                    case 8:
                        __InfluenceCost__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.School, int>>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __BaseDamage__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.IntRangeValue>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.CreatureItemData(__CreatureTypeId__, __Name__, __School__, __Skills__, __Affixes__, __ImplicitModifiers__, __Health__, __ManaCost__, __InfluenceCost__, __BaseDamage__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreatureSkillAnimationFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.CreatureSkillAnimation>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.CreatureSkillAnimation value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.SkillAnimationNumber>().Serialize(ref writer, value.SkillAnimationNumber, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.SkillAnimationType>().Serialize(ref writer, value.SkillAnimationType, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue?>().Serialize(ref writer, value.Duration, options);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.SkillTypeId, options);
        }

        public global::Nighthollow.Data.CreatureSkillAnimation Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SkillAnimationNumber__ = default(global::Nighthollow.Data.SkillAnimationNumber);
            var __SkillAnimationType__ = default(global::Nighthollow.Data.SkillAnimationType);
            var __Duration__ = default(global::Nighthollow.Stats.DurationValue?);
            var __SkillTypeId__ = default(int?);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __SkillAnimationNumber__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.SkillAnimationNumber>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __SkillAnimationType__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.SkillAnimationType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Duration__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue?>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __SkillTypeId__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.CreatureSkillAnimation(__SkillAnimationNumber__, __SkillAnimationType__, __Duration__, __SkillTypeId__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreatureTypeDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.CreatureTypeData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.CreatureTypeData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.PrefabAddress, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.PlayerName>().Serialize(ref writer, value.Owner, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.IntRangeValue>().Serialize(ref writer, value.Health, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ImageAddress, options);
            writer.Write(value.BaseManaCost);
            writer.Write(value.Speed);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Serialize(ref writer, value.ImplicitModifiers, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.CreatureSkillAnimation>>().Serialize(ref writer, value.SkillAnimations, options);
            writer.Write(value.IsManaCreature);
        }

        public global::Nighthollow.Data.CreatureTypeData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __PrefabAddress__ = default(string);
            var __Owner__ = default(global::Nighthollow.Data.PlayerName);
            var __Health__ = default(global::Nighthollow.Stats.IntRangeValue);
            var __ImageAddress__ = default(string);
            var __BaseManaCost__ = default(int);
            var __Speed__ = default(int);
            var __ImplicitModifiers__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>);
            var __SkillAnimations__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.CreatureSkillAnimation>);
            var __IsManaCreature__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __PrefabAddress__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Owner__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.PlayerName>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Health__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.IntRangeValue>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ImageAddress__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __BaseManaCost__ = reader.ReadInt32();
                        break;
                    case 6:
                        __Speed__ = reader.ReadInt32();
                        break;
                    case 7:
                        __ImplicitModifiers__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __SkillAnimations__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.CreatureSkillAnimation>>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __IsManaCreature__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.CreatureTypeData(__Name__, __PrefabAddress__, __Owner__, __Health__, __ImageAddress__, __BaseManaCost__, __Speed__, __ImplicitModifiers__, __SkillAnimations__, __IsManaCreature__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GlobalDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.GlobalData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.GlobalData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.Write(value.Value);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Comment, options);
        }

        public global::Nighthollow.Data.GlobalData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Value__ = default(int);
            var __Comment__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Value__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Comment__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.GlobalData(__Name__, __Value__, __Comment__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ImmutableDictionaryValueFormatter<TTag,TValue> : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.ImmutableDictionaryValue<TTag, TValue>>
        where TTag : notnull
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.ImmutableDictionaryValue<TTag, TValue> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<TTag, TValue>>().Serialize(ref writer, value.Dictionary, options);
        }

        public global::Nighthollow.Data.ImmutableDictionaryValue<TTag, TValue> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Dictionary__ = default(global::System.Collections.Immutable.ImmutableDictionary<TTag, TValue>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Dictionary__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<TTag, TValue>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.ImmutableDictionaryValue<TTag, TValue>(__Dictionary__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class IntValueDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.IntValueData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.IntValueData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(1);
            writer.Write(value.Int);
        }

        public global::Nighthollow.Data.IntValueData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Int__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Int__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.IntValueData(__Int__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ModifierDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.ModifierData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.ModifierData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.StatId?>().Serialize(ref writer, value.StatId, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.ModifierType?>().Serialize(ref writer, value.ModifierType, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Delegates.DelegateId?>().Serialize(ref writer, value.DelegateId, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.IValueData>().Serialize(ref writer, value.Value, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.IValueData>().Serialize(ref writer, value.ValueLow, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.IValueData>().Serialize(ref writer, value.ValueHigh, options);
            writer.Write(value.Targeted);
        }

        public global::Nighthollow.Data.ModifierData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __StatId__ = default(global::Nighthollow.Stats.StatId?);
            var __ModifierType__ = default(global::Nighthollow.Stats.ModifierType?);
            var __DelegateId__ = default(global::Nighthollow.Delegates.DelegateId?);
            var __Value__ = default(global::Nighthollow.Data.IValueData);
            var __ValueLow__ = default(global::Nighthollow.Data.IValueData);
            var __ValueHigh__ = default(global::Nighthollow.Data.IValueData);
            var __Targeted__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __StatId__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.StatId?>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __ModifierType__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.ModifierType?>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __DelegateId__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Delegates.DelegateId?>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Value__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.IValueData>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ValueLow__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.IValueData>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __ValueHigh__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.IValueData>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Targeted__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.ModifierData(__StatId__, __ModifierType__, __DelegateId__, __Value__, __ValueLow__, __ValueHigh__, __Targeted__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ResourceItemDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.ResourceItemData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.ResourceItemData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ImageAddress, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
        }

        public global::Nighthollow.Data.ResourceItemData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __ImageAddress__ = default(string);
            var __Description__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __ImageAddress__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.ResourceItemData(__Name__, __ImageAddress__, __Description__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SerializationListFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.SerializationList>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.SerializationList value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(110);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.TableMetadata>>().Serialize(ref writer, value.TableMetadata, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.CreatureTypeData>>().Serialize(ref writer, value.CreatureTypes, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.AffixTypeData>>().Serialize(ref writer, value.AffixTypes, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.SkillTypeData>>().Serialize(ref writer, value.SkillTypes, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.StatData>>().Serialize(ref writer, value.StatData, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.StaticItemListData>>().Serialize(ref writer, value.ItemLists, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.ModifierData>>().Serialize(ref writer, value.UserModifiers, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.CreatureItemData>>().Serialize(ref writer, value.Collection, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.CreatureItemData>>().Serialize(ref writer, value.Deck, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.BattleData>().Serialize(ref writer, value.BattleData, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.StatusEffectTypeData>>().Serialize(ref writer, value.StatusEffects, options);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.IntValueData>().Serialize(ref writer, value.A, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue>().Serialize(ref writer, value.B, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.PercentageValue>().Serialize(ref writer, value.C, options);
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.IntRangeValue>().Serialize(ref writer, value.D, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.BoolValueData>().Serialize(ref writer, value.E, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, int>>().Serialize(ref writer, value.F, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.PercentageValue>>().Serialize(ref writer, value.G, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.IntRangeValue>>().Serialize(ref writer, value.H, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.School, int>>().Serialize(ref writer, value.I, options);
        }

        public global::Nighthollow.Data.SerializationList Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TableMetadata__ = default(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.TableMetadata>);
            var __CreatureTypes__ = default(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.CreatureTypeData>);
            var __AffixTypes__ = default(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.AffixTypeData>);
            var __SkillTypes__ = default(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.SkillTypeData>);
            var __StatData__ = default(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.StatData>);
            var __ItemLists__ = default(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.StaticItemListData>);
            var __UserModifiers__ = default(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.ModifierData>);
            var __Collection__ = default(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.CreatureItemData>);
            var __Deck__ = default(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.CreatureItemData>);
            var __BattleData__ = default(global::Nighthollow.Data.BattleData);
            var __StatusEffects__ = default(global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.StatusEffectTypeData>);
            var __A__ = default(global::Nighthollow.Data.IntValueData);
            var __B__ = default(global::Nighthollow.Stats.DurationValue);
            var __C__ = default(global::Nighthollow.Stats.PercentageValue);
            var __D__ = default(global::Nighthollow.Stats.IntRangeValue);
            var __E__ = default(global::Nighthollow.Data.BoolValueData);
            var __F__ = default(global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, int>);
            var __G__ = default(global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.PercentageValue>);
            var __H__ = default(global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.IntRangeValue>);
            var __I__ = default(global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.School, int>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __TableMetadata__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.TableMetadata>>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __CreatureTypes__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.CreatureTypeData>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __AffixTypes__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.AffixTypeData>>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __SkillTypes__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.SkillTypeData>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __StatData__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.StatData>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __ItemLists__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.StaticItemListData>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __UserModifiers__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.ModifierData>>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Collection__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.CreatureItemData>>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Deck__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.CreatureItemData>>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __BattleData__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.BattleData>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __StatusEffects__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableDictionary<int, global::Nighthollow.Data.StatusEffectTypeData>>().Deserialize(ref reader, options);
                        break;
                    case 100:
                        __A__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.IntValueData>().Deserialize(ref reader, options);
                        break;
                    case 101:
                        __B__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue>().Deserialize(ref reader, options);
                        break;
                    case 102:
                        __C__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.PercentageValue>().Deserialize(ref reader, options);
                        break;
                    case 104:
                        __D__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.IntRangeValue>().Deserialize(ref reader, options);
                        break;
                    case 105:
                        __E__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.BoolValueData>().Deserialize(ref reader, options);
                        break;
                    case 106:
                        __F__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, int>>().Deserialize(ref reader, options);
                        break;
                    case 107:
                        __G__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.PercentageValue>>().Deserialize(ref reader, options);
                        break;
                    case 108:
                        __H__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.DamageType, global::Nighthollow.Stats.IntRangeValue>>().Deserialize(ref reader, options);
                        break;
                    case 109:
                        __I__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.ImmutableDictionaryValue<global::Nighthollow.Data.School, int>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.SerializationList();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SkillItemDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.SkillItemData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.SkillItemData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.SkillTypeId);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.AffixData>>().Serialize(ref writer, value.Affixes, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Serialize(ref writer, value.ImplicitModifiers, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.CreatureItemData>>().Serialize(ref writer, value.Summons, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.StatusEffectItemData>>().Serialize(ref writer, value.StatusEffects, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue?>().Serialize(ref writer, value.Cooldown, options);
        }

        public global::Nighthollow.Data.SkillItemData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SkillTypeId__ = default(int);
            var __Affixes__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.AffixData>);
            var __ImplicitModifiers__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>);
            var __Name__ = default(string);
            var __Summons__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.CreatureItemData>);
            var __StatusEffects__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.StatusEffectItemData>);
            var __Cooldown__ = default(global::Nighthollow.Stats.DurationValue?);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __SkillTypeId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Affixes__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.AffixData>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ImplicitModifiers__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Summons__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.CreatureItemData>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __StatusEffects__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.StatusEffectItemData>>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Cooldown__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue?>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.SkillItemData(__SkillTypeId__, __Affixes__, __ImplicitModifiers__, __Name__, __Summons__, __StatusEffects__, __Cooldown__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SkillTypeDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.SkillTypeData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.SkillTypeData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(13);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.SkillAnimationType>().Serialize(ref writer, value.SkillAnimationType, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.SkillType>().Serialize(ref writer, value.SkillType, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Serialize(ref writer, value.ImplicitModifiers, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Address, options);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.ProjectileSpeed, options);
            writer.Write(value.UsesAccuracy);
            writer.Write(value.CanCrit);
            writer.Write(value.CanStun);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<int>>().Serialize(ref writer, value.SummonCreatures, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<int>>().Serialize(ref writer, value.StatusEffects, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue?>().Serialize(ref writer, value.Cooldown, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue?>().Serialize(ref writer, value.CooldownHigh, options);
        }

        public global::Nighthollow.Data.SkillTypeData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __SkillAnimationType__ = default(global::Nighthollow.Data.SkillAnimationType);
            var __SkillType__ = default(global::Nighthollow.Data.SkillType);
            var __ImplicitModifiers__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>);
            var __Address__ = default(string);
            var __ProjectileSpeed__ = default(int?);
            var __UsesAccuracy__ = default(bool);
            var __CanCrit__ = default(bool);
            var __CanStun__ = default(bool);
            var __SummonCreatures__ = default(global::System.Collections.Immutable.ImmutableList<int>);
            var __StatusEffects__ = default(global::System.Collections.Immutable.ImmutableList<int>);
            var __Cooldown__ = default(global::Nighthollow.Stats.DurationValue?);
            var __CooldownHigh__ = default(global::Nighthollow.Stats.DurationValue?);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __SkillAnimationType__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.SkillAnimationType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __SkillType__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.SkillType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __ImplicitModifiers__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Address__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __ProjectileSpeed__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __UsesAccuracy__ = reader.ReadBoolean();
                        break;
                    case 7:
                        __CanCrit__ = reader.ReadBoolean();
                        break;
                    case 8:
                        __CanStun__ = reader.ReadBoolean();
                        break;
                    case 9:
                        __SummonCreatures__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<int>>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __StatusEffects__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<int>>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Cooldown__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue?>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __CooldownHigh__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue?>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.SkillTypeData(__Name__, __SkillAnimationType__, __SkillType__, __ImplicitModifiers__, __Address__, __ProjectileSpeed__, __UsesAccuracy__, __CanCrit__, __CanStun__, __SummonCreatures__, __StatusEffects__, __Cooldown__, __CooldownHigh__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StatDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.StatData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.StatData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.StatType>().Serialize(ref writer, value.StatType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.DescriptionTemplate, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.IValueData>().Serialize(ref writer, value.DefaultValue, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.StatTagType?>().Serialize(ref writer, value.TagType, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.StatType?>().Serialize(ref writer, value.StatValueType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Comment, options);
        }

        public global::Nighthollow.Data.StatData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __StatType__ = default(global::Nighthollow.Data.StatType);
            var __DescriptionTemplate__ = default(string);
            var __DefaultValue__ = default(global::Nighthollow.Data.IValueData);
            var __TagType__ = default(global::Nighthollow.Data.StatTagType?);
            var __StatValueType__ = default(global::Nighthollow.Data.StatType?);
            var __Comment__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __StatType__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.StatType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __DescriptionTemplate__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __DefaultValue__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.IValueData>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __TagType__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.StatTagType?>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __StatValueType__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Data.StatType?>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Comment__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.StatData(__Name__, __StatType__, __DescriptionTemplate__, __DefaultValue__, __TagType__, __StatValueType__, __Comment__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StaticItemListDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.StaticItemListData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.StaticItemListData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.CreatureItemData>>().Serialize(ref writer, value.Creatures, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ResourceItemData>>().Serialize(ref writer, value.Resources, options);
        }

        public global::Nighthollow.Data.StaticItemListData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Creatures__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.CreatureItemData>);
            var __Resources__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ResourceItemData>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Creatures__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.CreatureItemData>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Resources__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ResourceItemData>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.StaticItemListData(__Name__, __Creatures__, __Resources__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StatusEffectItemDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.StatusEffectItemData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.StatusEffectItemData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.StatusEffectTypeId);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Serialize(ref writer, value.ImplicitModifiers, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue?>().Serialize(ref writer, value.Duration, options);
        }

        public global::Nighthollow.Data.StatusEffectItemData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __StatusEffectTypeId__ = default(int);
            var __ImplicitModifiers__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>);
            var __Duration__ = default(global::Nighthollow.Stats.DurationValue?);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __StatusEffectTypeId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __ImplicitModifiers__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Duration__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue?>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.StatusEffectItemData(__StatusEffectTypeId__, __ImplicitModifiers__, __Duration__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StatusEffectTypeDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.StatusEffectTypeData>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.StatusEffectTypeData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.Write(value.IsNamed);
            writer.Write(value.MaxStacks);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Serialize(ref writer, value.ImplicitModifiers, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue?>().Serialize(ref writer, value.Duration, options);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue?>().Serialize(ref writer, value.DurationHigh, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ImageAddress, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.EffectAddress, options);
        }

        public global::Nighthollow.Data.StatusEffectTypeData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __IsNamed__ = default(bool);
            var __MaxStacks__ = default(int);
            var __ImplicitModifiers__ = default(global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>);
            var __Duration__ = default(global::Nighthollow.Stats.DurationValue?);
            var __DurationHigh__ = default(global::Nighthollow.Stats.DurationValue?);
            var __ImageAddress__ = default(string);
            var __EffectAddress__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __IsNamed__ = reader.ReadBoolean();
                        break;
                    case 2:
                        __MaxStacks__ = reader.ReadInt32();
                        break;
                    case 3:
                        __ImplicitModifiers__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Immutable.ImmutableList<global::Nighthollow.Data.ModifierData>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Duration__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue?>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __DurationHigh__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Stats.DurationValue?>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __ImageAddress__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __EffectAddress__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.StatusEffectTypeData(__Name__, __IsNamed__, __MaxStacks__, __ImplicitModifiers__, __Duration__, __DurationHigh__, __ImageAddress__, __EffectAddress__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TableMetadataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Data.TableMetadata>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Data.TableMetadata value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.NextId);
            writer.Write(value.LastAccessedTime);
        }

        public global::Nighthollow.Data.TableMetadata Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __NextId__ = default(int);
            var __LastAccessedTime__ = default(long);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __NextId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __LastAccessedTime__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Data.TableMetadata(__NextId__, __LastAccessedTime__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Nighthollow.Stats
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class DurationValueFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Stats.DurationValue>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Stats.DurationValue value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(1);
            writer.Write(value.TimeMilliseconds);
        }

        public global::Nighthollow.Stats.DurationValue Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __TimeMilliseconds__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __TimeMilliseconds__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Stats.DurationValue(__TimeMilliseconds__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class IntRangeValueFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Stats.IntRangeValue>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Stats.IntRangeValue value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(2);
            writer.Write(value.Low);
            writer.Write(value.High);
        }

        public global::Nighthollow.Stats.IntRangeValue Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Low__ = default(int);
            var __High__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Low__ = reader.ReadInt32();
                        break;
                    case 1:
                        __High__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Stats.IntRangeValue(__Low__, __High__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PercentageValueFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Stats.PercentageValue>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Stats.PercentageValue value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(1);
            writer.Write(value.BasisPoints);
        }

        public global::Nighthollow.Stats.PercentageValue Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __BasisPoints__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __BasisPoints__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Stats.PercentageValue(__BasisPoints__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Nighthollow.Triggers.Conditions
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class UserDeckSizeConditionFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Triggers.Conditions.UserDeckSizeCondition>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Triggers.Conditions.UserDeckSizeCondition value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.Target);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Triggers.Conditions.IntegerOperator>().Serialize(ref writer, value.Operator, options);
        }

        public global::Nighthollow.Triggers.Conditions.UserDeckSizeCondition Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Target__ = default(int);
            var __Operator__ = default(global::Nighthollow.Triggers.Conditions.IntegerOperator);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Target__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Operator__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Triggers.Conditions.IntegerOperator>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Triggers.Conditions.UserDeckSizeCondition(__Target__, __Operator__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Nighthollow.Triggers.Effects
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class CharacterDialogueEffectFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Triggers.Effects.CharacterDialogueEffect>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Triggers.Effects.CharacterDialogueEffect value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Triggers.Effects.CharacterName>().Serialize(ref writer, value.CharacterName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Text, options);
            formatterResolver.GetFormatterWithVerify<int?>().Serialize(ref writer, value.OnContinueTriggerId, options);
        }

        public global::Nighthollow.Triggers.Effects.CharacterDialogueEffect Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __CharacterName__ = default(global::Nighthollow.Triggers.Effects.CharacterName);
            var __Text__ = default(string);
            var __OnContinueTriggerId__ = default(int?);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __CharacterName__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Triggers.Effects.CharacterName>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Text__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __OnContinueTriggerId__ = formatterResolver.GetFormatterWithVerify<int?>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Triggers.Effects.CharacterDialogueEffect(__CharacterName__, __Text__, __OnContinueTriggerId__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DisplayHelpTextEffectFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect>
    {

        public void Serialize(ref MessagePackWriter writer, global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Text, options);
            writer.Write(value.XPosition);
            writer.Write(value.YPosition);
            formatterResolver.GetFormatterWithVerify<global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect.Direction>().Serialize(ref writer, value.ArrowDirection, options);
        }

        public global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Text__ = default(string);
            var __XPosition__ = default(int);
            var __YPosition__ = default(int);
            var __ArrowDirection__ = default(global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect.Direction);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Text__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __XPosition__ = reader.ReadInt32();
                        break;
                    case 2:
                        __YPosition__ = reader.ReadInt32();
                        break;
                    case 3:
                        __ArrowDirection__ = formatterResolver.GetFormatterWithVerify<global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect.Direction>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Nighthollow.Triggers.Effects.DisplayHelpTextEffect(__Text__, __XPosition__, __YPosition__, __ArrowDirection__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

