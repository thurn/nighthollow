// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: api.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Magewatch.API {

  /// <summary>Holder for reflection information generated from api.proto</summary>
  public static partial class ApiReflection {

    #region Descriptor
    /// <summary>File descriptor for api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglhcGkucHJvdG8SA2FwaSIXCgZVc2VySWQSDQoFdmFsdWUYASABKAUiFwoG",
            "R2FtZUlkEg0KBXZhbHVlGAEgASgFIhsKCkNyZWF0dXJlSWQSDQoFdmFsdWUY",
            "ASABKAUiFwoGQ2FyZElkEg0KBXZhbHVlGAEgASgFIhIKEFN0YXJ0R2FtZVJl",
            "cXVlc3QiNAoUQ29ubmVjdFRvR2FtZVJlcXVlc3QSHAoHZ2FtZV9pZBgBIAEo",
            "CzILLmFwaS5HYW1lSWQicAoXTUNsaWNrTWFpbkJ1dHRvblJlcXVlc3QSHAoH",
            "Z2FtZV9pZBgBIAEoCzILLmFwaS5HYW1lSWQSHwoGcGxheWVyGAIgASgOMg8u",
            "YXBpLlBsYXllck5hbWUSFgoOY2xpY2tfZXZlbnRfaWQYAyABKA0iYAoQUGxh",
            "eUNyZWF0dXJlQ2FyZBIlCg1yYW5rX3Bvc2l0aW9uGAEgASgOMg4uYXBpLlJh",
            "bmtWYWx1ZRIlCg1maWxlX3Bvc2l0aW9uGAIgASgOMg4uYXBpLkZpbGVWYWx1",
            "ZSI6ChJQbGF5QXR0YWNobWVudENhcmQSJAoLY3JlYXR1cmVfaWQYASABKAsy",
            "Dy5hcGkuQ3JlYXR1cmVJZCIUChJQbGF5VW50YXJnZXRlZENhcmQikwIKD1Bs",
            "YXlDYXJkUmVxdWVzdBIcCgdnYW1lX2lkGAEgASgLMgsuYXBpLkdhbWVJZBIf",
            "CgZwbGF5ZXIYAiABKA4yDy5hcGkuUGxheWVyTmFtZRIcCgdjYXJkX2lkGAMg",
            "ASgLMgsuYXBpLkNhcmRJZBIuCg1wbGF5X2NyZWF0dXJlGAQgASgLMhUuYXBp",
            "LlBsYXlDcmVhdHVyZUNhcmRIABIyCg9wbGF5X2F0dGFjaG1lbnQYBSABKAsy",
            "Fy5hcGkuUGxheUF0dGFjaG1lbnRDYXJkSAASMgoPcGxheV91bnRhcmdldGVk",
            "GAYgASgLMhcuYXBpLlBsYXlVbnRhcmdldGVkQ2FyZEgAQgsKCXBsYXlfY2Fy",
            "ZCKMAQoWQ3JlYXR1cmVQb3NpdGlvblVwZGF0ZRIkCgtjcmVhdHVyZV9pZBgB",
            "IAEoCzIPLmFwaS5DcmVhdHVyZUlkEiUKDXJhbmtfcG9zaXRpb24YAiABKA4y",
            "Di5hcGkuUmFua1ZhbHVlEiUKDWZpbGVfcG9zaXRpb24YAyABKA4yDi5hcGku",
            "RmlsZVZhbHVlIpIBChpSZXBvc2l0aW9uQ3JlYXR1cmVzUmVxdWVzdBIcCgdn",
            "YW1lX2lkGAEgASgLMgsuYXBpLkdhbWVJZBIfCgZwbGF5ZXIYAiABKA4yDy5h",
            "cGkuUGxheWVyTmFtZRI1ChBwb3NpdGlvbl91cGRhdGVzGAMgAygLMhsuYXBp",
            "LkNyZWF0dXJlUG9zaXRpb25VcGRhdGUiMgoZTURlYnVnTG9hZFNjZW5hcmlv",
            "UmVxdWVzdBIVCg1zY2VuYXJpb19uYW1lGAEgASgJIksKFk1EZWJ1Z0RyYXdD",
            "YXJkc1JlcXVlc3QSFwoPZHJhd191c2VyX2NhcmRzGAEgAygNEhgKEGRyYXdf",
            "ZW5lbXlfY2FyZHMYAiADKA0iQQofTURlYnVnUnVuUmVxdWVzdFNlcXVlbmNl",
            "UmVxdWVzdBIeCghyZXF1ZXN0cxgBIAMoCzIMLmFwaS5SZXF1ZXN0Iu4DCgdS",
            "ZXF1ZXN0EhwKB3VzZXJfaWQYASABKAsyCy5hcGkuVXNlcklkEisKCnN0YXJ0",
            "X2dhbWUYAiABKAsyFS5hcGkuU3RhcnRHYW1lUmVxdWVzdEgAEjQKD2Nvbm5l",
            "Y3RfdG9fZ2FtZRgDIAEoCzIZLmFwaS5Db25uZWN0VG9HYW1lUmVxdWVzdEgA",
            "EjkKEWNsaWNrX21haW5fYnV0dG9uGAQgASgLMhwuYXBpLk1DbGlja01haW5C",
            "dXR0b25SZXF1ZXN0SAASKQoJcGxheV9jYXJkGAUgASgLMhQuYXBpLlBsYXlD",
            "YXJkUmVxdWVzdEgAEj8KFHJlcG9zaXRpb25fY3JlYXR1cmVzGAYgASgLMh8u",
            "YXBpLlJlcG9zaXRpb25DcmVhdHVyZXNSZXF1ZXN0SAASNwoNbG9hZF9zY2Vu",
            "YXJpbxgIIAEoCzIeLmFwaS5NRGVidWdMb2FkU2NlbmFyaW9SZXF1ZXN0SAAS",
            "MQoKZHJhd19jYXJkcxgJIAEoCzIbLmFwaS5NRGVidWdEcmF3Q2FyZHNSZXF1",
            "ZXN0SAASRAoUcnVuX3JlcXVlc3Rfc2VxdWVuY2UYCiABKAsyJC5hcGkuTURl",
            "YnVnUnVuUmVxdWVzdFNlcXVlbmNlUmVxdWVzdEgAQgkKB3JlcXVlc3QiRgoJ",
            "SW5mbHVlbmNlEioKDmluZmx1ZW5jZV90eXBlGAEgASgOMhIuYXBpLkluZmx1",
            "ZW5jZVR5cGUSDQoFdmFsdWUYAiABKA0iPAoFQXNzZXQSDwoHYWRkcmVzcxgB",
            "IAEoCRIiCgphc3NldF90eXBlGAIgASgOMg4uYXBpLkFzc2V0VHlwZSLiAQoK",
            "UGxheWVyRGF0YRIkCgtwbGF5ZXJfbmFtZRgBIAEoDjIPLmFwaS5QbGF5ZXJO",
            "YW1lEhQKDGN1cnJlbnRfbGlmZRgCIAEoDRIUCgxtYXhpbXVtX2xpZmUYAyAB",
            "KA0SFQoNY3VycmVudF9wb3dlchgEIAEoDRIVCg1tYXhpbXVtX3Bvd2VyGAUg",
            "ASgNEikKEWN1cnJlbnRfaW5mbHVlbmNlGAYgAygLMg4uYXBpLkluZmx1ZW5j",
            "ZRIpChFtYXhpbXVtX2luZmx1ZW5jZRgHIAMoCzIOLmFwaS5JbmZsdWVuY2Ui",
            "CAoGTm9Db3N0IkoKDFN0YW5kYXJkQ29zdBISCgpwb3dlcl9jb3N0GAEgASgN",
            "EiYKDmluZmx1ZW5jZV9jb3N0GAIgAygLMg4uYXBpLkluZmx1ZW5jZSIYCghS",
            "aWNoVGV4dBIMCgR0ZXh0GAEgASgJIisKDkF0dGFjaG1lbnREYXRhEhkKBWlt",
            "YWdlGAEgASgLMgouYXBpLkFzc2V0IhAKDlVudGFyZ2V0ZWREYXRhIsMDCghD",
            "YXJkRGF0YRIcCgdjYXJkX2lkGAEgASgLMgsuYXBpLkNhcmRJZBIaCgZwcmVm",
            "YWIYAiABKAsyCi5hcGkuQXNzZXQSDAoEbmFtZRgDIAEoCRIeCgdub19jb3N0",
            "GAQgASgLMgsuYXBpLk5vQ29zdEgAEioKDXN0YW5kYXJkX2Nvc3QYBSABKAsy",
            "ES5hcGkuU3RhbmRhcmRDb3N0SAASHgoFb3duZXIYBiABKA4yDy5hcGkuUGxh",
            "eWVyTmFtZRIZCgVpbWFnZRgHIAEoCzIKLmFwaS5Bc3NldBIbCgR0ZXh0GAgg",
            "ASgLMg0uYXBpLlJpY2hUZXh0EhMKC2lzX3JldmVhbGVkGAkgASgIEhUKDWNh",
            "bl9iZV9wbGF5ZWQYCiABKAgSKgoNY3JlYXR1cmVfY2FyZBgLIAEoCzIRLmFw",
            "aS5DcmVhdHVyZURhdGFIARIuCg9hdHRhY2htZW50X2NhcmQYDCABKAsyEy5h",
            "cGkuQXR0YWNobWVudERhdGFIARIuCg91bnRhcmdldGVkX2NhcmQYDSABKAsy",
            "Ey5hcGkuVW50YXJnZXRlZERhdGFIAUIGCgRjb3N0QgsKCWNhcmRfdHlwZSKF",
            "AgoMQ3JlYXR1cmVEYXRhEiQKC2NyZWF0dXJlX2lkGAEgASgLMg8uYXBpLkNy",
            "ZWF0dXJlSWQSGgoGcHJlZmFiGAIgASgLMgouYXBpLkFzc2V0Eh4KBW93bmVy",
            "GAMgASgOMg8uYXBpLlBsYXllck5hbWUSJQoNcmFua19wb3NpdGlvbhgEIAEo",
            "DjIOLmFwaS5SYW5rVmFsdWUSJQoNZmlsZV9wb3NpdGlvbhgFIAEoDjIOLmFw",
            "aS5GaWxlVmFsdWUSGwoTY2FuX2JlX3JlcG9zaXRpb25lZBgGIAEoCBIoCgth",
            "dHRhY2htZW50cxgHIAMoCzITLmFwaS5BdHRhY2htZW50RGF0YSIkChNEaXNw",
            "bGF5RXJyb3JDb21tYW5kEg0KBWVycm9yGAEgASgJIi0KC1dhaXRDb21tYW5k",
            "Eh4KFndhaXRfdGltZV9taWxsaXNlY29uZHMYASABKA0iaAoXTVVwZGF0ZUlu",
            "dGVyZmFjZUNvbW1hbmQSGwoTbWFpbl9idXR0b25fZW5hYmxlZBgBIAEoCBIY",
            "ChBtYWluX2J1dHRvbl90ZXh0GAIgASgJEhYKDmNsaWNrX2V2ZW50X2lkGA0g",
            "ASgNIjYKE1VwZGF0ZVBsYXllckNvbW1hbmQSHwoGcGxheWVyGAEgASgLMg8u",
            "YXBpLlBsYXllckRhdGEiNwoYTURyYXdPclVwZGF0ZUNhcmRDb21tYW5kEhsK",
            "BGNhcmQYASABKAsyDS5hcGkuQ2FyZERhdGEibAoZTVVwZGF0ZUNhblBsYXlD",
            "YXJkQ29tbWFuZBIfCgZwbGF5ZXIYASABKA4yDy5hcGkuUGxheWVyTmFtZRIc",
            "CgdjYXJkX2lkGAIgASgLMgsuYXBpLkNhcmRJZBIQCghjYW5fcGxheRgDIAEo",
            "CCKhAQoRUmV2ZWFsQ2FyZENvbW1hbmQSGwoEY2FyZBgBIAEoCzINLmFwaS5D",
            "YXJkRGF0YRIhChlyZXZlYWxfZGVsYXlfbWlsbGlzZWNvbmRzGAIgASgNEiUK",
            "DXJhbmtfcG9zaXRpb24YAyABKA4yDi5hcGkuUmFua1ZhbHVlEiUKDWZpbGVf",
            "cG9zaXRpb24YBCABKA4yDi5hcGkuRmlsZVZhbHVlIkQKHUNyZWF0ZU9yVXBk",
            "YXRlQ3JlYXR1cmVDb21tYW5kEiMKCGNyZWF0dXJlGAEgASgLMhEuYXBpLkNy",
            "ZWF0dXJlRGF0YSI9ChVSZW1vdmVDcmVhdHVyZUNvbW1hbmQSJAoLY3JlYXR1",
            "cmVfaWQYASABKAsyDy5hcGkuQ3JlYXR1cmVJZCJSCg9NU2tpbGxBbmltYXRp",
            "b24SKQoFc2tpbGwYASABKA4yGi5hcGkuTVNraWxsQW5pbWF0aW9uTnVtYmVy",
            "EhQKDGltcGFjdF9jb3VudBgCIAEoBSJICg9NT25JbXBhY3ROdW1iZXISFQoN",
            "aW1wYWN0X251bWJlchgBIAEoDRIeCgZlZmZlY3QYAiABKAsyDi5hcGkuTU9u",
            "SW1wYWN0InEKCU1PbkltcGFjdBImCgZ1cGRhdGUYASABKAsyFC5hcGkuTUNy",
            "ZWF0dXJlVXBkYXRlSAASLwoPZmlyZV9wcm9qZWN0aWxlGAIgASgLMhQuYXBp",
            "Lk1GaXJlUHJvamVjdGlsZUgAQgsKCW9uX2ltcGFjdCKtAQoPTUZpcmVQcm9q",
            "ZWN0aWxlEiQKC2NyZWF0dXJlX2lkGAEgASgLMg8uYXBpLkNyZWF0dXJlSWQS",
            "HgoKcHJvamVjdGlsZRgCIAEoCzIKLmFwaS5Bc3NldBIeCgZvbl9oaXQYAyAD",
            "KAsyDi5hcGkuTU9uSW1wYWN0EioKD3RhcmdldF9jcmVhdHVyZRgEIAEoCzIP",
            "LmFwaS5DcmVhdHVyZUlkSABCCAoGdGFyZ2V0IrwBCg9NQ3JlYXR1cmVVcGRh",
            "dGUSJAoLY3JlYXR1cmVfaWQYASABKAsyDy5hcGkuQ3JlYXR1cmVJZBIdChVz",
            "ZXRfaGVhbHRoX3BlcmNlbnRhZ2UYAiABKAISHAoUcGxheV9kZWF0aF9hbmlt",
            "YXRpb24YAyABKAgSGwoTc2V0X21hbmFfcGVyY2VudGFnZRgEIAEoAhIpChVw",
            "bGF5X3BhcnRpY2xlX2VmZmVjdHMYBSADKAsyCi5hcGkuQXNzZXQiPgoWTVVw",
            "ZGF0ZUNyZWF0dXJlQ29tbWFuZBIkCgZ1cGRhdGUYASABKAsyFC5hcGkuTUNy",
            "ZWF0dXJlVXBkYXRlIr0BChhNVXNlQ3JlYXR1cmVTa2lsbENvbW1hbmQSKAoP",
            "c291cmNlX2NyZWF0dXJlGAEgASgLMg8uYXBpLkNyZWF0dXJlSWQSJwoJYW5p",
            "bWF0aW9uGAIgASgLMhQuYXBpLk1Ta2lsbEFuaW1hdGlvbhInCglvbl9pbXBh",
            "Y3QYAyADKAsyFC5hcGkuTU9uSW1wYWN0TnVtYmVyEiUKDG1lbGVlX3Rhcmdl",
            "dBgEIAEoCzIPLmFwaS5DcmVhdHVyZUlkImgKE01EZXN0cm95Q2FyZENvbW1h",
            "bmQSHwoGcGxheWVyGAEgASgOMg8uYXBpLlBsYXllck5hbWUSHAoHY2FyZF9p",
            "ZBgCIAEoCzILLmFwaS5DYXJkSWQSEgoKbXVzdF9leGlzdBgDIAEoCCKTAQoU",
            "TUluaXRpYXRlR2FtZUNvbW1hbmQSIAoLbmV3X2dhbWVfaWQYASABKAsyCy5h",
            "cGkuR2FtZUlkEisKEmluaXRpYWxfdXNlcl9zdGF0ZRgCIAEoCzIPLmFwaS5Q",
            "bGF5ZXJEYXRhEiwKE2luaXRpYWxfZW5lbXlfc3RhdGUYAyABKAsyDy5hcGku",
            "UGxheWVyRGF0YSLeBQoHQ29tbWFuZBIgCgR3YWl0GAEgASgLMhAuYXBpLldh",
            "aXRDb21tYW5kSAASOAoQdXBkYXRlX2ludGVyZmFjZRgCIAEoCzIcLmFwaS5N",
            "VXBkYXRlSW50ZXJmYWNlQ29tbWFuZEgAEjwKE2RyYXdfb3JfdXBkYXRlX2Nh",
            "cmQYAyABKAsyHS5hcGkuTURyYXdPclVwZGF0ZUNhcmRDb21tYW5kSAASLQoL",
            "cmV2ZWFsX2NhcmQYBCABKAsyFi5hcGkuUmV2ZWFsQ2FyZENvbW1hbmRIABIx",
            "Cg11cGRhdGVfcGxheWVyGAUgASgLMhguYXBpLlVwZGF0ZVBsYXllckNvbW1h",
            "bmRIABJHChljcmVhdGVfb3JfdXBkYXRlX2NyZWF0dXJlGAYgASgLMiIuYXBp",
            "LkNyZWF0ZU9yVXBkYXRlQ3JlYXR1cmVDb21tYW5kSAASNQoPcmVtb3ZlX2Ny",
            "ZWF0dXJlGAcgASgLMhouYXBpLlJlbW92ZUNyZWF0dXJlQ29tbWFuZEgAEjYK",
            "D3VwZGF0ZV9jcmVhdHVyZRgKIAEoCzIbLmFwaS5NVXBkYXRlQ3JlYXR1cmVD",
            "b21tYW5kSAASOwoSdXNlX2NyZWF0dXJlX3NraWxsGAsgASgLMh0uYXBpLk1V",
            "c2VDcmVhdHVyZVNraWxsQ29tbWFuZEgAEjEKDWRpc3BsYXlfZXJyb3IYDCAB",
            "KAsyGC5hcGkuRGlzcGxheUVycm9yQ29tbWFuZEgAEjAKDGRlc3Ryb3lfY2Fy",
            "ZBgNIAEoCzIYLmFwaS5NRGVzdHJveUNhcmRDb21tYW5kSAASMgoNaW5pdGlh",
            "dGVfZ2FtZRgOIAEoCzIZLmFwaS5NSW5pdGlhdGVHYW1lQ29tbWFuZEgAEj4K",
            "FHVwZGF0ZV9jYW5fcGxheV9jYXJkGA8gASgLMh4uYXBpLk1VcGRhdGVDYW5Q",
            "bGF5Q2FyZENvbW1hbmRIAEIJCgdjb21tYW5kIi4KDENvbW1hbmRHcm91cBIe",
            "Cghjb21tYW5kcxgBIAMoCzIMLmFwaS5Db21tYW5kIjgKC0NvbW1hbmRMaXN0",
            "EikKDmNvbW1hbmRfZ3JvdXBzGAEgAygLMhEuYXBpLkNvbW1hbmRHcm91cCo5",
            "CgpQbGF5ZXJOYW1lEhYKElBMQVlFUl9VTlNQRUNJRklFRBAAEggKBFVTRVIQ",
            "ARIJCgVFTkVNWRACKl0KCVJhbmtWYWx1ZRIUChBSQU5LX1VOU1BFQ0lGSUVE",
            "EAASCgoGUkFOS18xEAISCgoGUkFOS18yEAMSCgoGUkFOS18zEAQSCgoGUkFO",
            "S180EAUSCgoGUkFOS181EAYqXQoJRmlsZVZhbHVlEhQKEEZJTEVfVU5TUEVD",
            "SUZJRUQQABIKCgZGSUxFXzEQAhIKCgZGSUxFXzIQAxIKCgZGSUxFXzMQBBIK",
            "CgZGSUxFXzQQBRIKCgZGSUxFXzUQBippCg1JbmZsdWVuY2VUeXBlEhkKFUlO",
            "RkxVRU5DRV9VTlNQRUNJRklFRBAAEgkKBUxJR0hUEAESBwoDU0tZEAISCQoF",
            "RkxBTUUQAxIHCgNJQ0UQBBIJCgVFQVJUSBAFEgoKBlNIQURPVxAGKjkKCUFz",
            "c2V0VHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAASCgoGUFJFRkFCEAESCgoG",
            "U1BSSVRFEAIqbwoVTVNraWxsQW5pbWF0aW9uTnVtYmVyEhUKEVNLSUxMX1VO",
            "U1BFQ0lGSUVEEAASCwoHU0tJTExfMRABEgsKB1NLSUxMXzIQAhILCgdTS0lM",
            "TF8zEAMSCwoHU0tJTExfNBAEEgsKB1NLSUxMXzUQBUIQqgINTWFnZXdhdGNo",
            "LkFQSWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Magewatch.API.PlayerName), typeof(global::Magewatch.API.RankValue), typeof(global::Magewatch.API.FileValue), typeof(global::Magewatch.API.InfluenceType), typeof(global::Magewatch.API.AssetType), typeof(global::Magewatch.API.MSkillAnimationNumber), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.UserId), global::Magewatch.API.UserId.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.GameId), global::Magewatch.API.GameId.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CreatureId), global::Magewatch.API.CreatureId.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CardId), global::Magewatch.API.CardId.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.StartGameRequest), global::Magewatch.API.StartGameRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.ConnectToGameRequest), global::Magewatch.API.ConnectToGameRequest.Parser, new[]{ "GameId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MClickMainButtonRequest), global::Magewatch.API.MClickMainButtonRequest.Parser, new[]{ "GameId", "Player", "ClickEventId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.PlayCreatureCard), global::Magewatch.API.PlayCreatureCard.Parser, new[]{ "RankPosition", "FilePosition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.PlayAttachmentCard), global::Magewatch.API.PlayAttachmentCard.Parser, new[]{ "CreatureId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.PlayUntargetedCard), global::Magewatch.API.PlayUntargetedCard.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.PlayCardRequest), global::Magewatch.API.PlayCardRequest.Parser, new[]{ "GameId", "Player", "CardId", "PlayCreature", "PlayAttachment", "PlayUntargeted" }, new[]{ "PlayCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CreaturePositionUpdate), global::Magewatch.API.CreaturePositionUpdate.Parser, new[]{ "CreatureId", "RankPosition", "FilePosition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.RepositionCreaturesRequest), global::Magewatch.API.RepositionCreaturesRequest.Parser, new[]{ "GameId", "Player", "PositionUpdates" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MDebugLoadScenarioRequest), global::Magewatch.API.MDebugLoadScenarioRequest.Parser, new[]{ "ScenarioName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MDebugDrawCardsRequest), global::Magewatch.API.MDebugDrawCardsRequest.Parser, new[]{ "DrawUserCards", "DrawEnemyCards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MDebugRunRequestSequenceRequest), global::Magewatch.API.MDebugRunRequestSequenceRequest.Parser, new[]{ "Requests" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.Request), global::Magewatch.API.Request.Parser, new[]{ "UserId", "StartGame", "ConnectToGame", "ClickMainButton", "PlayCard", "RepositionCreatures", "LoadScenario", "DrawCards", "RunRequestSequence" }, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.Influence), global::Magewatch.API.Influence.Parser, new[]{ "InfluenceType", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.Asset), global::Magewatch.API.Asset.Parser, new[]{ "Address", "AssetType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.PlayerData), global::Magewatch.API.PlayerData.Parser, new[]{ "PlayerName", "CurrentLife", "MaximumLife", "CurrentPower", "MaximumPower", "CurrentInfluence", "MaximumInfluence" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.NoCost), global::Magewatch.API.NoCost.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.StandardCost), global::Magewatch.API.StandardCost.Parser, new[]{ "PowerCost", "InfluenceCost" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.RichText), global::Magewatch.API.RichText.Parser, new[]{ "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.AttachmentData), global::Magewatch.API.AttachmentData.Parser, new[]{ "Image" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.UntargetedData), global::Magewatch.API.UntargetedData.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CardData), global::Magewatch.API.CardData.Parser, new[]{ "CardId", "Prefab", "Name", "NoCost", "StandardCost", "Owner", "Image", "Text", "IsRevealed", "CanBePlayed", "CreatureCard", "AttachmentCard", "UntargetedCard" }, new[]{ "Cost", "CardType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CreatureData), global::Magewatch.API.CreatureData.Parser, new[]{ "CreatureId", "Prefab", "Owner", "RankPosition", "FilePosition", "CanBeRepositioned", "Attachments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.DisplayErrorCommand), global::Magewatch.API.DisplayErrorCommand.Parser, new[]{ "Error" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.WaitCommand), global::Magewatch.API.WaitCommand.Parser, new[]{ "WaitTimeMilliseconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MUpdateInterfaceCommand), global::Magewatch.API.MUpdateInterfaceCommand.Parser, new[]{ "MainButtonEnabled", "MainButtonText", "ClickEventId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.UpdatePlayerCommand), global::Magewatch.API.UpdatePlayerCommand.Parser, new[]{ "Player" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MDrawOrUpdateCardCommand), global::Magewatch.API.MDrawOrUpdateCardCommand.Parser, new[]{ "Card" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MUpdateCanPlayCardCommand), global::Magewatch.API.MUpdateCanPlayCardCommand.Parser, new[]{ "Player", "CardId", "CanPlay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.RevealCardCommand), global::Magewatch.API.RevealCardCommand.Parser, new[]{ "Card", "RevealDelayMilliseconds", "RankPosition", "FilePosition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CreateOrUpdateCreatureCommand), global::Magewatch.API.CreateOrUpdateCreatureCommand.Parser, new[]{ "Creature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.RemoveCreatureCommand), global::Magewatch.API.RemoveCreatureCommand.Parser, new[]{ "CreatureId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MSkillAnimation), global::Magewatch.API.MSkillAnimation.Parser, new[]{ "Skill", "ImpactCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MOnImpactNumber), global::Magewatch.API.MOnImpactNumber.Parser, new[]{ "ImpactNumber", "Effect" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MOnImpact), global::Magewatch.API.MOnImpact.Parser, new[]{ "Update", "FireProjectile" }, new[]{ "OnImpact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MFireProjectile), global::Magewatch.API.MFireProjectile.Parser, new[]{ "CreatureId", "Projectile", "OnHit", "TargetCreature" }, new[]{ "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MCreatureUpdate), global::Magewatch.API.MCreatureUpdate.Parser, new[]{ "CreatureId", "SetHealthPercentage", "PlayDeathAnimation", "SetManaPercentage", "PlayParticleEffects" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MUpdateCreatureCommand), global::Magewatch.API.MUpdateCreatureCommand.Parser, new[]{ "Update" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MUseCreatureSkillCommand), global::Magewatch.API.MUseCreatureSkillCommand.Parser, new[]{ "SourceCreature", "Animation", "OnImpact", "MeleeTarget" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MDestroyCardCommand), global::Magewatch.API.MDestroyCardCommand.Parser, new[]{ "Player", "CardId", "MustExist" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MInitiateGameCommand), global::Magewatch.API.MInitiateGameCommand.Parser, new[]{ "NewGameId", "InitialUserState", "InitialEnemyState" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.Command), global::Magewatch.API.Command.Parser, new[]{ "Wait", "UpdateInterface", "DrawOrUpdateCard", "RevealCard", "UpdatePlayer", "CreateOrUpdateCreature", "RemoveCreature", "UpdateCreature", "UseCreatureSkill", "DisplayError", "DestroyCard", "InitiateGame", "UpdateCanPlayCard" }, new[]{ "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CommandGroup), global::Magewatch.API.CommandGroup.Parser, new[]{ "Commands" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CommandList), global::Magewatch.API.CommandList.Parser, new[]{ "CommandGroups" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PlayerName {
    [pbr::OriginalName("PLAYER_UNSPECIFIED")] PlayerUnspecified = 0,
    [pbr::OriginalName("USER")] User = 1,
    [pbr::OriginalName("ENEMY")] Enemy = 2,
  }

  public enum RankValue {
    [pbr::OriginalName("RANK_UNSPECIFIED")] RankUnspecified = 0,
    [pbr::OriginalName("RANK_1")] Rank1 = 2,
    [pbr::OriginalName("RANK_2")] Rank2 = 3,
    [pbr::OriginalName("RANK_3")] Rank3 = 4,
    [pbr::OriginalName("RANK_4")] Rank4 = 5,
    [pbr::OriginalName("RANK_5")] Rank5 = 6,
  }

  public enum FileValue {
    [pbr::OriginalName("FILE_UNSPECIFIED")] FileUnspecified = 0,
    [pbr::OriginalName("FILE_1")] File1 = 2,
    [pbr::OriginalName("FILE_2")] File2 = 3,
    [pbr::OriginalName("FILE_3")] File3 = 4,
    [pbr::OriginalName("FILE_4")] File4 = 5,
    [pbr::OriginalName("FILE_5")] File5 = 6,
  }

  public enum InfluenceType {
    [pbr::OriginalName("INFLUENCE_UNSPECIFIED")] InfluenceUnspecified = 0,
    [pbr::OriginalName("LIGHT")] Light = 1,
    [pbr::OriginalName("SKY")] Sky = 2,
    [pbr::OriginalName("FLAME")] Flame = 3,
    [pbr::OriginalName("ICE")] Ice = 4,
    [pbr::OriginalName("EARTH")] Earth = 5,
    [pbr::OriginalName("SHADOW")] Shadow = 6,
  }

  public enum AssetType {
    [pbr::OriginalName("TYPE_UNSPECIFIED")] TypeUnspecified = 0,
    [pbr::OriginalName("PREFAB")] Prefab = 1,
    [pbr::OriginalName("SPRITE")] Sprite = 2,
  }

  public enum MSkillAnimationNumber {
    [pbr::OriginalName("SKILL_UNSPECIFIED")] SkillUnspecified = 0,
    [pbr::OriginalName("SKILL_1")] Skill1 = 1,
    [pbr::OriginalName("SKILL_2")] Skill2 = 2,
    [pbr::OriginalName("SKILL_3")] Skill3 = 3,
    [pbr::OriginalName("SKILL_4")] Skill4 = 4,
    [pbr::OriginalName("SKILL_5")] Skill5 = 5,
  }

  #endregion

  #region Messages
  public sealed partial class UserId : pb::IMessage<UserId> {
    private static readonly pb::MessageParser<UserId> _parser = new pb::MessageParser<UserId>(() => new UserId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserId(UserId other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserId Clone() {
      return new UserId(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserId other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameId : pb::IMessage<GameId> {
    private static readonly pb::MessageParser<GameId> _parser = new pb::MessageParser<GameId>(() => new GameId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameId(GameId other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameId Clone() {
      return new GameId(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameId other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreatureId : pb::IMessage<CreatureId> {
    private static readonly pb::MessageParser<CreatureId> _parser = new pb::MessageParser<CreatureId>(() => new CreatureId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatureId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureId(CreatureId other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureId Clone() {
      return new CreatureId(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatureId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatureId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatureId other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardId : pb::IMessage<CardId> {
    private static readonly pb::MessageParser<CardId> _parser = new pb::MessageParser<CardId>(() => new CardId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardId(CardId other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardId Clone() {
      return new CardId(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardId other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Requests to start a new game with a new game ID. The client should discard
  /// all previous state when sending this request.
  /// </summary>
  public sealed partial class StartGameRequest : pb::IMessage<StartGameRequest> {
    private static readonly pb::MessageParser<StartGameRequest> _parser = new pb::MessageParser<StartGameRequest>(() => new StartGameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameRequest(StartGameRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameRequest Clone() {
      return new StartGameRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartGameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartGameRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Requests to load the current state of a game. The client should discard
  /// all previous state when sending this request.
  /// </summary>
  public sealed partial class ConnectToGameRequest : pb::IMessage<ConnectToGameRequest> {
    private static readonly pb::MessageParser<ConnectToGameRequest> _parser = new pb::MessageParser<ConnectToGameRequest>(() => new ConnectToGameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectToGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToGameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToGameRequest(ConnectToGameRequest other) : this() {
      gameId_ = other.gameId_ != null ? other.gameId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToGameRequest Clone() {
      return new ConnectToGameRequest(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private global::Magewatch.API.GameId gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.GameId GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectToGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectToGameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameId, other.GameId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameId_ != null) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectToGameRequest other) {
      if (other == null) {
        return;
      }
      if (other.gameId_ != null) {
        if (gameId_ == null) {
          GameId = new global::Magewatch.API.GameId();
        }
        GameId.MergeFrom(other.GameId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameId_ == null) {
              GameId = new global::Magewatch.API.GameId();
            }
            input.ReadMessage(GameId);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Advance the game to the next phase
  /// </summary>
  public sealed partial class MClickMainButtonRequest : pb::IMessage<MClickMainButtonRequest> {
    private static readonly pb::MessageParser<MClickMainButtonRequest> _parser = new pb::MessageParser<MClickMainButtonRequest>(() => new MClickMainButtonRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MClickMainButtonRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MClickMainButtonRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MClickMainButtonRequest(MClickMainButtonRequest other) : this() {
      gameId_ = other.gameId_ != null ? other.gameId_.Clone() : null;
      player_ = other.player_;
      clickEventId_ = other.clickEventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MClickMainButtonRequest Clone() {
      return new MClickMainButtonRequest(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private global::Magewatch.API.GameId gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.GameId GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::Magewatch.API.PlayerName player_ = global::Magewatch.API.PlayerName.PlayerUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerName Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "click_event_id" field.</summary>
    public const int ClickEventIdFieldNumber = 3;
    private uint clickEventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClickEventId {
      get { return clickEventId_; }
      set {
        clickEventId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MClickMainButtonRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MClickMainButtonRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameId, other.GameId)) return false;
      if (Player != other.Player) return false;
      if (ClickEventId != other.ClickEventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameId_ != null) hash ^= GameId.GetHashCode();
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) hash ^= Player.GetHashCode();
      if (ClickEventId != 0) hash ^= ClickEventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameId);
      }
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Player);
      }
      if (ClickEventId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClickEventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameId);
      }
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      if (ClickEventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClickEventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MClickMainButtonRequest other) {
      if (other == null) {
        return;
      }
      if (other.gameId_ != null) {
        if (gameId_ == null) {
          GameId = new global::Magewatch.API.GameId();
        }
        GameId.MergeFrom(other.GameId);
      }
      if (other.Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        Player = other.Player;
      }
      if (other.ClickEventId != 0) {
        ClickEventId = other.ClickEventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameId_ == null) {
              GameId = new global::Magewatch.API.GameId();
            }
            input.ReadMessage(GameId);
            break;
          }
          case 16: {
            Player = (global::Magewatch.API.PlayerName) input.ReadEnum();
            break;
          }
          case 24: {
            ClickEventId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Play a creature card at a given position
  /// </summary>
  public sealed partial class PlayCreatureCard : pb::IMessage<PlayCreatureCard> {
    private static readonly pb::MessageParser<PlayCreatureCard> _parser = new pb::MessageParser<PlayCreatureCard>(() => new PlayCreatureCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayCreatureCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCreatureCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCreatureCard(PlayCreatureCard other) : this() {
      rankPosition_ = other.rankPosition_;
      filePosition_ = other.filePosition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCreatureCard Clone() {
      return new PlayCreatureCard(this);
    }

    /// <summary>Field number for the "rank_position" field.</summary>
    public const int RankPositionFieldNumber = 1;
    private global::Magewatch.API.RankValue rankPosition_ = global::Magewatch.API.RankValue.RankUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RankValue RankPosition {
      get { return rankPosition_; }
      set {
        rankPosition_ = value;
      }
    }

    /// <summary>Field number for the "file_position" field.</summary>
    public const int FilePositionFieldNumber = 2;
    private global::Magewatch.API.FileValue filePosition_ = global::Magewatch.API.FileValue.FileUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.FileValue FilePosition {
      get { return filePosition_; }
      set {
        filePosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayCreatureCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayCreatureCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RankPosition != other.RankPosition) return false;
      if (FilePosition != other.FilePosition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) hash ^= RankPosition.GetHashCode();
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) hash ^= FilePosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FilePosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FilePosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayCreatureCard other) {
      if (other == null) {
        return;
      }
      if (other.RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        RankPosition = other.RankPosition;
      }
      if (other.FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        FilePosition = other.FilePosition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RankPosition = (global::Magewatch.API.RankValue) input.ReadEnum();
            break;
          }
          case 16: {
            FilePosition = (global::Magewatch.API.FileValue) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Play an attachment card on a given creature
  /// </summary>
  public sealed partial class PlayAttachmentCard : pb::IMessage<PlayAttachmentCard> {
    private static readonly pb::MessageParser<PlayAttachmentCard> _parser = new pb::MessageParser<PlayAttachmentCard>(() => new PlayAttachmentCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayAttachmentCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayAttachmentCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayAttachmentCard(PlayAttachmentCard other) : this() {
      creatureId_ = other.creatureId_ != null ? other.creatureId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayAttachmentCard Clone() {
      return new PlayAttachmentCard(this);
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 1;
    private global::Magewatch.API.CreatureId creatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayAttachmentCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayAttachmentCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreatureId, other.CreatureId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creatureId_ != null) hash ^= CreatureId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creatureId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreatureId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayAttachmentCard other) {
      if (other == null) {
        return;
      }
      if (other.creatureId_ != null) {
        if (creatureId_ == null) {
          CreatureId = new global::Magewatch.API.CreatureId();
        }
        CreatureId.MergeFrom(other.CreatureId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creatureId_ == null) {
              CreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(CreatureId);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Play a card which does not require targeting
  /// </summary>
  public sealed partial class PlayUntargetedCard : pb::IMessage<PlayUntargetedCard> {
    private static readonly pb::MessageParser<PlayUntargetedCard> _parser = new pb::MessageParser<PlayUntargetedCard>(() => new PlayUntargetedCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayUntargetedCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayUntargetedCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayUntargetedCard(PlayUntargetedCard other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayUntargetedCard Clone() {
      return new PlayUntargetedCard(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayUntargetedCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayUntargetedCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayUntargetedCard other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Play a card from the user's hand
  /// </summary>
  public sealed partial class PlayCardRequest : pb::IMessage<PlayCardRequest> {
    private static readonly pb::MessageParser<PlayCardRequest> _parser = new pb::MessageParser<PlayCardRequest>(() => new PlayCardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayCardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardRequest(PlayCardRequest other) : this() {
      gameId_ = other.gameId_ != null ? other.gameId_.Clone() : null;
      player_ = other.player_;
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      switch (other.PlayCardCase) {
        case PlayCardOneofCase.PlayCreature:
          PlayCreature = other.PlayCreature.Clone();
          break;
        case PlayCardOneofCase.PlayAttachment:
          PlayAttachment = other.PlayAttachment.Clone();
          break;
        case PlayCardOneofCase.PlayUntargeted:
          PlayUntargeted = other.PlayUntargeted.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardRequest Clone() {
      return new PlayCardRequest(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private global::Magewatch.API.GameId gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.GameId GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::Magewatch.API.PlayerName player_ = global::Magewatch.API.PlayerName.PlayerUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerName Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 3;
    private global::Magewatch.API.CardId cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CardId CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "play_creature" field.</summary>
    public const int PlayCreatureFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayCreatureCard PlayCreature {
      get { return playCardCase_ == PlayCardOneofCase.PlayCreature ? (global::Magewatch.API.PlayCreatureCard) playCard_ : null; }
      set {
        playCard_ = value;
        playCardCase_ = value == null ? PlayCardOneofCase.None : PlayCardOneofCase.PlayCreature;
      }
    }

    /// <summary>Field number for the "play_attachment" field.</summary>
    public const int PlayAttachmentFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayAttachmentCard PlayAttachment {
      get { return playCardCase_ == PlayCardOneofCase.PlayAttachment ? (global::Magewatch.API.PlayAttachmentCard) playCard_ : null; }
      set {
        playCard_ = value;
        playCardCase_ = value == null ? PlayCardOneofCase.None : PlayCardOneofCase.PlayAttachment;
      }
    }

    /// <summary>Field number for the "play_untargeted" field.</summary>
    public const int PlayUntargetedFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayUntargetedCard PlayUntargeted {
      get { return playCardCase_ == PlayCardOneofCase.PlayUntargeted ? (global::Magewatch.API.PlayUntargetedCard) playCard_ : null; }
      set {
        playCard_ = value;
        playCardCase_ = value == null ? PlayCardOneofCase.None : PlayCardOneofCase.PlayUntargeted;
      }
    }

    private object playCard_;
    /// <summary>Enum of possible cases for the "play_card" oneof.</summary>
    public enum PlayCardOneofCase {
      None = 0,
      PlayCreature = 4,
      PlayAttachment = 5,
      PlayUntargeted = 6,
    }
    private PlayCardOneofCase playCardCase_ = PlayCardOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardOneofCase PlayCardCase {
      get { return playCardCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayCard() {
      playCardCase_ = PlayCardOneofCase.None;
      playCard_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayCardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayCardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameId, other.GameId)) return false;
      if (Player != other.Player) return false;
      if (!object.Equals(CardId, other.CardId)) return false;
      if (!object.Equals(PlayCreature, other.PlayCreature)) return false;
      if (!object.Equals(PlayAttachment, other.PlayAttachment)) return false;
      if (!object.Equals(PlayUntargeted, other.PlayUntargeted)) return false;
      if (PlayCardCase != other.PlayCardCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameId_ != null) hash ^= GameId.GetHashCode();
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) hash ^= Player.GetHashCode();
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (playCardCase_ == PlayCardOneofCase.PlayCreature) hash ^= PlayCreature.GetHashCode();
      if (playCardCase_ == PlayCardOneofCase.PlayAttachment) hash ^= PlayAttachment.GetHashCode();
      if (playCardCase_ == PlayCardOneofCase.PlayUntargeted) hash ^= PlayUntargeted.GetHashCode();
      hash ^= (int) playCardCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameId);
      }
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Player);
      }
      if (cardId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CardId);
      }
      if (playCardCase_ == PlayCardOneofCase.PlayCreature) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayCreature);
      }
      if (playCardCase_ == PlayCardOneofCase.PlayAttachment) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayAttachment);
      }
      if (playCardCase_ == PlayCardOneofCase.PlayUntargeted) {
        output.WriteRawTag(50);
        output.WriteMessage(PlayUntargeted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameId);
      }
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (playCardCase_ == PlayCardOneofCase.PlayCreature) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayCreature);
      }
      if (playCardCase_ == PlayCardOneofCase.PlayAttachment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayAttachment);
      }
      if (playCardCase_ == PlayCardOneofCase.PlayUntargeted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayUntargeted);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayCardRequest other) {
      if (other == null) {
        return;
      }
      if (other.gameId_ != null) {
        if (gameId_ == null) {
          GameId = new global::Magewatch.API.GameId();
        }
        GameId.MergeFrom(other.GameId);
      }
      if (other.Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        Player = other.Player;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Magewatch.API.CardId();
        }
        CardId.MergeFrom(other.CardId);
      }
      switch (other.PlayCardCase) {
        case PlayCardOneofCase.PlayCreature:
          if (PlayCreature == null) {
            PlayCreature = new global::Magewatch.API.PlayCreatureCard();
          }
          PlayCreature.MergeFrom(other.PlayCreature);
          break;
        case PlayCardOneofCase.PlayAttachment:
          if (PlayAttachment == null) {
            PlayAttachment = new global::Magewatch.API.PlayAttachmentCard();
          }
          PlayAttachment.MergeFrom(other.PlayAttachment);
          break;
        case PlayCardOneofCase.PlayUntargeted:
          if (PlayUntargeted == null) {
            PlayUntargeted = new global::Magewatch.API.PlayUntargetedCard();
          }
          PlayUntargeted.MergeFrom(other.PlayUntargeted);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameId_ == null) {
              GameId = new global::Magewatch.API.GameId();
            }
            input.ReadMessage(GameId);
            break;
          }
          case 16: {
            Player = (global::Magewatch.API.PlayerName) input.ReadEnum();
            break;
          }
          case 26: {
            if (cardId_ == null) {
              CardId = new global::Magewatch.API.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 34: {
            global::Magewatch.API.PlayCreatureCard subBuilder = new global::Magewatch.API.PlayCreatureCard();
            if (playCardCase_ == PlayCardOneofCase.PlayCreature) {
              subBuilder.MergeFrom(PlayCreature);
            }
            input.ReadMessage(subBuilder);
            PlayCreature = subBuilder;
            break;
          }
          case 42: {
            global::Magewatch.API.PlayAttachmentCard subBuilder = new global::Magewatch.API.PlayAttachmentCard();
            if (playCardCase_ == PlayCardOneofCase.PlayAttachment) {
              subBuilder.MergeFrom(PlayAttachment);
            }
            input.ReadMessage(subBuilder);
            PlayAttachment = subBuilder;
            break;
          }
          case 50: {
            global::Magewatch.API.PlayUntargetedCard subBuilder = new global::Magewatch.API.PlayUntargetedCard();
            if (playCardCase_ == PlayCardOneofCase.PlayUntargeted) {
              subBuilder.MergeFrom(PlayUntargeted);
            }
            input.ReadMessage(subBuilder);
            PlayUntargeted = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreaturePositionUpdate : pb::IMessage<CreaturePositionUpdate> {
    private static readonly pb::MessageParser<CreaturePositionUpdate> _parser = new pb::MessageParser<CreaturePositionUpdate>(() => new CreaturePositionUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreaturePositionUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreaturePositionUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreaturePositionUpdate(CreaturePositionUpdate other) : this() {
      creatureId_ = other.creatureId_ != null ? other.creatureId_.Clone() : null;
      rankPosition_ = other.rankPosition_;
      filePosition_ = other.filePosition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreaturePositionUpdate Clone() {
      return new CreaturePositionUpdate(this);
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 1;
    private global::Magewatch.API.CreatureId creatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    /// <summary>Field number for the "rank_position" field.</summary>
    public const int RankPositionFieldNumber = 2;
    private global::Magewatch.API.RankValue rankPosition_ = global::Magewatch.API.RankValue.RankUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RankValue RankPosition {
      get { return rankPosition_; }
      set {
        rankPosition_ = value;
      }
    }

    /// <summary>Field number for the "file_position" field.</summary>
    public const int FilePositionFieldNumber = 3;
    private global::Magewatch.API.FileValue filePosition_ = global::Magewatch.API.FileValue.FileUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.FileValue FilePosition {
      get { return filePosition_; }
      set {
        filePosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreaturePositionUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreaturePositionUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreatureId, other.CreatureId)) return false;
      if (RankPosition != other.RankPosition) return false;
      if (FilePosition != other.FilePosition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creatureId_ != null) hash ^= CreatureId.GetHashCode();
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) hash ^= RankPosition.GetHashCode();
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) hash ^= FilePosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creatureId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreatureId);
      }
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) FilePosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureId);
      }
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FilePosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreaturePositionUpdate other) {
      if (other == null) {
        return;
      }
      if (other.creatureId_ != null) {
        if (creatureId_ == null) {
          CreatureId = new global::Magewatch.API.CreatureId();
        }
        CreatureId.MergeFrom(other.CreatureId);
      }
      if (other.RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        RankPosition = other.RankPosition;
      }
      if (other.FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        FilePosition = other.FilePosition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creatureId_ == null) {
              CreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(CreatureId);
            break;
          }
          case 16: {
            RankPosition = (global::Magewatch.API.RankValue) input.ReadEnum();
            break;
          }
          case 24: {
            FilePosition = (global::Magewatch.API.FileValue) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RepositionCreaturesRequest : pb::IMessage<RepositionCreaturesRequest> {
    private static readonly pb::MessageParser<RepositionCreaturesRequest> _parser = new pb::MessageParser<RepositionCreaturesRequest>(() => new RepositionCreaturesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RepositionCreaturesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepositionCreaturesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepositionCreaturesRequest(RepositionCreaturesRequest other) : this() {
      gameId_ = other.gameId_ != null ? other.gameId_.Clone() : null;
      player_ = other.player_;
      positionUpdates_ = other.positionUpdates_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepositionCreaturesRequest Clone() {
      return new RepositionCreaturesRequest(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private global::Magewatch.API.GameId gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.GameId GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::Magewatch.API.PlayerName player_ = global::Magewatch.API.PlayerName.PlayerUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerName Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "position_updates" field.</summary>
    public const int PositionUpdatesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Magewatch.API.CreaturePositionUpdate> _repeated_positionUpdates_codec
        = pb::FieldCodec.ForMessage(26, global::Magewatch.API.CreaturePositionUpdate.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.CreaturePositionUpdate> positionUpdates_ = new pbc::RepeatedField<global::Magewatch.API.CreaturePositionUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.CreaturePositionUpdate> PositionUpdates {
      get { return positionUpdates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RepositionCreaturesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RepositionCreaturesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameId, other.GameId)) return false;
      if (Player != other.Player) return false;
      if(!positionUpdates_.Equals(other.positionUpdates_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameId_ != null) hash ^= GameId.GetHashCode();
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) hash ^= Player.GetHashCode();
      hash ^= positionUpdates_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameId);
      }
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Player);
      }
      positionUpdates_.WriteTo(output, _repeated_positionUpdates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameId);
      }
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      size += positionUpdates_.CalculateSize(_repeated_positionUpdates_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RepositionCreaturesRequest other) {
      if (other == null) {
        return;
      }
      if (other.gameId_ != null) {
        if (gameId_ == null) {
          GameId = new global::Magewatch.API.GameId();
        }
        GameId.MergeFrom(other.GameId);
      }
      if (other.Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        Player = other.Player;
      }
      positionUpdates_.Add(other.positionUpdates_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameId_ == null) {
              GameId = new global::Magewatch.API.GameId();
            }
            input.ReadMessage(GameId);
            break;
          }
          case 16: {
            Player = (global::Magewatch.API.PlayerName) input.ReadEnum();
            break;
          }
          case 26: {
            positionUpdates_.AddEntriesFrom(input, _repeated_positionUpdates_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Requests to start a new game with the provided scenario name. The client
  /// must discard all previous state when sending this request.
  /// </summary>
  public sealed partial class MDebugLoadScenarioRequest : pb::IMessage<MDebugLoadScenarioRequest> {
    private static readonly pb::MessageParser<MDebugLoadScenarioRequest> _parser = new pb::MessageParser<MDebugLoadScenarioRequest>(() => new MDebugLoadScenarioRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MDebugLoadScenarioRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDebugLoadScenarioRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDebugLoadScenarioRequest(MDebugLoadScenarioRequest other) : this() {
      scenarioName_ = other.scenarioName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDebugLoadScenarioRequest Clone() {
      return new MDebugLoadScenarioRequest(this);
    }

    /// <summary>Field number for the "scenario_name" field.</summary>
    public const int ScenarioNameFieldNumber = 1;
    private string scenarioName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScenarioName {
      get { return scenarioName_; }
      set {
        scenarioName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MDebugLoadScenarioRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MDebugLoadScenarioRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScenarioName != other.ScenarioName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScenarioName.Length != 0) hash ^= ScenarioName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScenarioName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScenarioName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScenarioName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScenarioName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MDebugLoadScenarioRequest other) {
      if (other == null) {
        return;
      }
      if (other.ScenarioName.Length != 0) {
        ScenarioName = other.ScenarioName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ScenarioName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Specifies specific cards to draw based on their *deck position*
  /// </summary>
  public sealed partial class MDebugDrawCardsRequest : pb::IMessage<MDebugDrawCardsRequest> {
    private static readonly pb::MessageParser<MDebugDrawCardsRequest> _parser = new pb::MessageParser<MDebugDrawCardsRequest>(() => new MDebugDrawCardsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MDebugDrawCardsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDebugDrawCardsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDebugDrawCardsRequest(MDebugDrawCardsRequest other) : this() {
      drawUserCards_ = other.drawUserCards_.Clone();
      drawEnemyCards_ = other.drawEnemyCards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDebugDrawCardsRequest Clone() {
      return new MDebugDrawCardsRequest(this);
    }

    /// <summary>Field number for the "draw_user_cards" field.</summary>
    public const int DrawUserCardsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_drawUserCards_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> drawUserCards_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DrawUserCards {
      get { return drawUserCards_; }
    }

    /// <summary>Field number for the "draw_enemy_cards" field.</summary>
    public const int DrawEnemyCardsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_drawEnemyCards_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> drawEnemyCards_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DrawEnemyCards {
      get { return drawEnemyCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MDebugDrawCardsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MDebugDrawCardsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!drawUserCards_.Equals(other.drawUserCards_)) return false;
      if(!drawEnemyCards_.Equals(other.drawEnemyCards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= drawUserCards_.GetHashCode();
      hash ^= drawEnemyCards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      drawUserCards_.WriteTo(output, _repeated_drawUserCards_codec);
      drawEnemyCards_.WriteTo(output, _repeated_drawEnemyCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += drawUserCards_.CalculateSize(_repeated_drawUserCards_codec);
      size += drawEnemyCards_.CalculateSize(_repeated_drawEnemyCards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MDebugDrawCardsRequest other) {
      if (other == null) {
        return;
      }
      drawUserCards_.Add(other.drawUserCards_);
      drawEnemyCards_.Add(other.drawEnemyCards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            drawUserCards_.AddEntriesFrom(input, _repeated_drawUserCards_codec);
            break;
          }
          case 18:
          case 16: {
            drawEnemyCards_.AddEntriesFrom(input, _repeated_drawEnemyCards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Run several requests in sequence and return Commands for all of them
  /// </summary>
  public sealed partial class MDebugRunRequestSequenceRequest : pb::IMessage<MDebugRunRequestSequenceRequest> {
    private static readonly pb::MessageParser<MDebugRunRequestSequenceRequest> _parser = new pb::MessageParser<MDebugRunRequestSequenceRequest>(() => new MDebugRunRequestSequenceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MDebugRunRequestSequenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDebugRunRequestSequenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDebugRunRequestSequenceRequest(MDebugRunRequestSequenceRequest other) : this() {
      requests_ = other.requests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDebugRunRequestSequenceRequest Clone() {
      return new MDebugRunRequestSequenceRequest(this);
    }

    /// <summary>Field number for the "requests" field.</summary>
    public const int RequestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Magewatch.API.Request> _repeated_requests_codec
        = pb::FieldCodec.ForMessage(10, global::Magewatch.API.Request.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.Request> requests_ = new pbc::RepeatedField<global::Magewatch.API.Request>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.Request> Requests {
      get { return requests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MDebugRunRequestSequenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MDebugRunRequestSequenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!requests_.Equals(other.requests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= requests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      requests_.WriteTo(output, _repeated_requests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += requests_.CalculateSize(_repeated_requests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MDebugRunRequestSequenceRequest other) {
      if (other == null) {
        return;
      }
      requests_.Add(other.requests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            requests_.AddEntriesFrom(input, _repeated_requests_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Data sent to the server whenever the user does something in the game's user
  /// interface
  /// </summary>
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      userId_ = other.userId_ != null ? other.userId_.Clone() : null;
      switch (other.RequestCase) {
        case RequestOneofCase.StartGame:
          StartGame = other.StartGame.Clone();
          break;
        case RequestOneofCase.ConnectToGame:
          ConnectToGame = other.ConnectToGame.Clone();
          break;
        case RequestOneofCase.ClickMainButton:
          ClickMainButton = other.ClickMainButton.Clone();
          break;
        case RequestOneofCase.PlayCard:
          PlayCard = other.PlayCard.Clone();
          break;
        case RequestOneofCase.RepositionCreatures:
          RepositionCreatures = other.RepositionCreatures.Clone();
          break;
        case RequestOneofCase.LoadScenario:
          LoadScenario = other.LoadScenario.Clone();
          break;
        case RequestOneofCase.DrawCards:
          DrawCards = other.DrawCards.Clone();
          break;
        case RequestOneofCase.RunRequestSequence:
          RunRequestSequence = other.RunRequestSequence.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private global::Magewatch.API.UserId userId_;
    /// <summary>
    /// Identifies the user making this request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.UserId UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "start_game" field.</summary>
    public const int StartGameFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.StartGameRequest StartGame {
      get { return requestCase_ == RequestOneofCase.StartGame ? (global::Magewatch.API.StartGameRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.StartGame;
      }
    }

    /// <summary>Field number for the "connect_to_game" field.</summary>
    public const int ConnectToGameFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.ConnectToGameRequest ConnectToGame {
      get { return requestCase_ == RequestOneofCase.ConnectToGame ? (global::Magewatch.API.ConnectToGameRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.ConnectToGame;
      }
    }

    /// <summary>Field number for the "click_main_button" field.</summary>
    public const int ClickMainButtonFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MClickMainButtonRequest ClickMainButton {
      get { return requestCase_ == RequestOneofCase.ClickMainButton ? (global::Magewatch.API.MClickMainButtonRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.ClickMainButton;
      }
    }

    /// <summary>Field number for the "play_card" field.</summary>
    public const int PlayCardFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayCardRequest PlayCard {
      get { return requestCase_ == RequestOneofCase.PlayCard ? (global::Magewatch.API.PlayCardRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.PlayCard;
      }
    }

    /// <summary>Field number for the "reposition_creatures" field.</summary>
    public const int RepositionCreaturesFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RepositionCreaturesRequest RepositionCreatures {
      get { return requestCase_ == RequestOneofCase.RepositionCreatures ? (global::Magewatch.API.RepositionCreaturesRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.RepositionCreatures;
      }
    }

    /// <summary>Field number for the "load_scenario" field.</summary>
    public const int LoadScenarioFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MDebugLoadScenarioRequest LoadScenario {
      get { return requestCase_ == RequestOneofCase.LoadScenario ? (global::Magewatch.API.MDebugLoadScenarioRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.LoadScenario;
      }
    }

    /// <summary>Field number for the "draw_cards" field.</summary>
    public const int DrawCardsFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MDebugDrawCardsRequest DrawCards {
      get { return requestCase_ == RequestOneofCase.DrawCards ? (global::Magewatch.API.MDebugDrawCardsRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.DrawCards;
      }
    }

    /// <summary>Field number for the "run_request_sequence" field.</summary>
    public const int RunRequestSequenceFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MDebugRunRequestSequenceRequest RunRequestSequence {
      get { return requestCase_ == RequestOneofCase.RunRequestSequence ? (global::Magewatch.API.MDebugRunRequestSequenceRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.RunRequestSequence;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      StartGame = 2,
      ConnectToGame = 3,
      ClickMainButton = 4,
      PlayCard = 5,
      RepositionCreatures = 6,
      LoadScenario = 8,
      DrawCards = 9,
      RunRequestSequence = 10,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserId, other.UserId)) return false;
      if (!object.Equals(StartGame, other.StartGame)) return false;
      if (!object.Equals(ConnectToGame, other.ConnectToGame)) return false;
      if (!object.Equals(ClickMainButton, other.ClickMainButton)) return false;
      if (!object.Equals(PlayCard, other.PlayCard)) return false;
      if (!object.Equals(RepositionCreatures, other.RepositionCreatures)) return false;
      if (!object.Equals(LoadScenario, other.LoadScenario)) return false;
      if (!object.Equals(DrawCards, other.DrawCards)) return false;
      if (!object.Equals(RunRequestSequence, other.RunRequestSequence)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userId_ != null) hash ^= UserId.GetHashCode();
      if (requestCase_ == RequestOneofCase.StartGame) hash ^= StartGame.GetHashCode();
      if (requestCase_ == RequestOneofCase.ConnectToGame) hash ^= ConnectToGame.GetHashCode();
      if (requestCase_ == RequestOneofCase.ClickMainButton) hash ^= ClickMainButton.GetHashCode();
      if (requestCase_ == RequestOneofCase.PlayCard) hash ^= PlayCard.GetHashCode();
      if (requestCase_ == RequestOneofCase.RepositionCreatures) hash ^= RepositionCreatures.GetHashCode();
      if (requestCase_ == RequestOneofCase.LoadScenario) hash ^= LoadScenario.GetHashCode();
      if (requestCase_ == RequestOneofCase.DrawCards) hash ^= DrawCards.GetHashCode();
      if (requestCase_ == RequestOneofCase.RunRequestSequence) hash ^= RunRequestSequence.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserId);
      }
      if (requestCase_ == RequestOneofCase.StartGame) {
        output.WriteRawTag(18);
        output.WriteMessage(StartGame);
      }
      if (requestCase_ == RequestOneofCase.ConnectToGame) {
        output.WriteRawTag(26);
        output.WriteMessage(ConnectToGame);
      }
      if (requestCase_ == RequestOneofCase.ClickMainButton) {
        output.WriteRawTag(34);
        output.WriteMessage(ClickMainButton);
      }
      if (requestCase_ == RequestOneofCase.PlayCard) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayCard);
      }
      if (requestCase_ == RequestOneofCase.RepositionCreatures) {
        output.WriteRawTag(50);
        output.WriteMessage(RepositionCreatures);
      }
      if (requestCase_ == RequestOneofCase.LoadScenario) {
        output.WriteRawTag(66);
        output.WriteMessage(LoadScenario);
      }
      if (requestCase_ == RequestOneofCase.DrawCards) {
        output.WriteRawTag(74);
        output.WriteMessage(DrawCards);
      }
      if (requestCase_ == RequestOneofCase.RunRequestSequence) {
        output.WriteRawTag(82);
        output.WriteMessage(RunRequestSequence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserId);
      }
      if (requestCase_ == RequestOneofCase.StartGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartGame);
      }
      if (requestCase_ == RequestOneofCase.ConnectToGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectToGame);
      }
      if (requestCase_ == RequestOneofCase.ClickMainButton) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClickMainButton);
      }
      if (requestCase_ == RequestOneofCase.PlayCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayCard);
      }
      if (requestCase_ == RequestOneofCase.RepositionCreatures) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RepositionCreatures);
      }
      if (requestCase_ == RequestOneofCase.LoadScenario) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoadScenario);
      }
      if (requestCase_ == RequestOneofCase.DrawCards) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawCards);
      }
      if (requestCase_ == RequestOneofCase.RunRequestSequence) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RunRequestSequence);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.userId_ != null) {
        if (userId_ == null) {
          UserId = new global::Magewatch.API.UserId();
        }
        UserId.MergeFrom(other.UserId);
      }
      switch (other.RequestCase) {
        case RequestOneofCase.StartGame:
          if (StartGame == null) {
            StartGame = new global::Magewatch.API.StartGameRequest();
          }
          StartGame.MergeFrom(other.StartGame);
          break;
        case RequestOneofCase.ConnectToGame:
          if (ConnectToGame == null) {
            ConnectToGame = new global::Magewatch.API.ConnectToGameRequest();
          }
          ConnectToGame.MergeFrom(other.ConnectToGame);
          break;
        case RequestOneofCase.ClickMainButton:
          if (ClickMainButton == null) {
            ClickMainButton = new global::Magewatch.API.MClickMainButtonRequest();
          }
          ClickMainButton.MergeFrom(other.ClickMainButton);
          break;
        case RequestOneofCase.PlayCard:
          if (PlayCard == null) {
            PlayCard = new global::Magewatch.API.PlayCardRequest();
          }
          PlayCard.MergeFrom(other.PlayCard);
          break;
        case RequestOneofCase.RepositionCreatures:
          if (RepositionCreatures == null) {
            RepositionCreatures = new global::Magewatch.API.RepositionCreaturesRequest();
          }
          RepositionCreatures.MergeFrom(other.RepositionCreatures);
          break;
        case RequestOneofCase.LoadScenario:
          if (LoadScenario == null) {
            LoadScenario = new global::Magewatch.API.MDebugLoadScenarioRequest();
          }
          LoadScenario.MergeFrom(other.LoadScenario);
          break;
        case RequestOneofCase.DrawCards:
          if (DrawCards == null) {
            DrawCards = new global::Magewatch.API.MDebugDrawCardsRequest();
          }
          DrawCards.MergeFrom(other.DrawCards);
          break;
        case RequestOneofCase.RunRequestSequence:
          if (RunRequestSequence == null) {
            RunRequestSequence = new global::Magewatch.API.MDebugRunRequestSequenceRequest();
          }
          RunRequestSequence.MergeFrom(other.RunRequestSequence);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userId_ == null) {
              UserId = new global::Magewatch.API.UserId();
            }
            input.ReadMessage(UserId);
            break;
          }
          case 18: {
            global::Magewatch.API.StartGameRequest subBuilder = new global::Magewatch.API.StartGameRequest();
            if (requestCase_ == RequestOneofCase.StartGame) {
              subBuilder.MergeFrom(StartGame);
            }
            input.ReadMessage(subBuilder);
            StartGame = subBuilder;
            break;
          }
          case 26: {
            global::Magewatch.API.ConnectToGameRequest subBuilder = new global::Magewatch.API.ConnectToGameRequest();
            if (requestCase_ == RequestOneofCase.ConnectToGame) {
              subBuilder.MergeFrom(ConnectToGame);
            }
            input.ReadMessage(subBuilder);
            ConnectToGame = subBuilder;
            break;
          }
          case 34: {
            global::Magewatch.API.MClickMainButtonRequest subBuilder = new global::Magewatch.API.MClickMainButtonRequest();
            if (requestCase_ == RequestOneofCase.ClickMainButton) {
              subBuilder.MergeFrom(ClickMainButton);
            }
            input.ReadMessage(subBuilder);
            ClickMainButton = subBuilder;
            break;
          }
          case 42: {
            global::Magewatch.API.PlayCardRequest subBuilder = new global::Magewatch.API.PlayCardRequest();
            if (requestCase_ == RequestOneofCase.PlayCard) {
              subBuilder.MergeFrom(PlayCard);
            }
            input.ReadMessage(subBuilder);
            PlayCard = subBuilder;
            break;
          }
          case 50: {
            global::Magewatch.API.RepositionCreaturesRequest subBuilder = new global::Magewatch.API.RepositionCreaturesRequest();
            if (requestCase_ == RequestOneofCase.RepositionCreatures) {
              subBuilder.MergeFrom(RepositionCreatures);
            }
            input.ReadMessage(subBuilder);
            RepositionCreatures = subBuilder;
            break;
          }
          case 66: {
            global::Magewatch.API.MDebugLoadScenarioRequest subBuilder = new global::Magewatch.API.MDebugLoadScenarioRequest();
            if (requestCase_ == RequestOneofCase.LoadScenario) {
              subBuilder.MergeFrom(LoadScenario);
            }
            input.ReadMessage(subBuilder);
            LoadScenario = subBuilder;
            break;
          }
          case 74: {
            global::Magewatch.API.MDebugDrawCardsRequest subBuilder = new global::Magewatch.API.MDebugDrawCardsRequest();
            if (requestCase_ == RequestOneofCase.DrawCards) {
              subBuilder.MergeFrom(DrawCards);
            }
            input.ReadMessage(subBuilder);
            DrawCards = subBuilder;
            break;
          }
          case 82: {
            global::Magewatch.API.MDebugRunRequestSequenceRequest subBuilder = new global::Magewatch.API.MDebugRunRequestSequenceRequest();
            if (requestCase_ == RequestOneofCase.RunRequestSequence) {
              subBuilder.MergeFrom(RunRequestSequence);
            }
            input.ReadMessage(subBuilder);
            RunRequestSequence = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Influence : pb::IMessage<Influence> {
    private static readonly pb::MessageParser<Influence> _parser = new pb::MessageParser<Influence>(() => new Influence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Influence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Influence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Influence(Influence other) : this() {
      influenceType_ = other.influenceType_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Influence Clone() {
      return new Influence(this);
    }

    /// <summary>Field number for the "influence_type" field.</summary>
    public const int InfluenceTypeFieldNumber = 1;
    private global::Magewatch.API.InfluenceType influenceType_ = global::Magewatch.API.InfluenceType.InfluenceUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.InfluenceType InfluenceType {
      get { return influenceType_; }
      set {
        influenceType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Influence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Influence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InfluenceType != other.InfluenceType) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InfluenceType != global::Magewatch.API.InfluenceType.InfluenceUnspecified) hash ^= InfluenceType.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfluenceType != global::Magewatch.API.InfluenceType.InfluenceUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) InfluenceType);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfluenceType != global::Magewatch.API.InfluenceType.InfluenceUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InfluenceType);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Influence other) {
      if (other == null) {
        return;
      }
      if (other.InfluenceType != global::Magewatch.API.InfluenceType.InfluenceUnspecified) {
        InfluenceType = other.InfluenceType;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InfluenceType = (global::Magewatch.API.InfluenceType) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Asset : pb::IMessage<Asset> {
    private static readonly pb::MessageParser<Asset> _parser = new pb::MessageParser<Asset>(() => new Asset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Asset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset(Asset other) : this() {
      address_ = other.address_;
      assetType_ = other.assetType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset Clone() {
      return new Asset(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_type" field.</summary>
    public const int AssetTypeFieldNumber = 2;
    private global::Magewatch.API.AssetType assetType_ = global::Magewatch.API.AssetType.TypeUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.AssetType AssetType {
      get { return assetType_; }
      set {
        assetType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Asset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Asset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (AssetType != other.AssetType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (AssetType != global::Magewatch.API.AssetType.TypeUnspecified) hash ^= AssetType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (AssetType != global::Magewatch.API.AssetType.TypeUnspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AssetType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (AssetType != global::Magewatch.API.AssetType.TypeUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AssetType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Asset other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.AssetType != global::Magewatch.API.AssetType.TypeUnspecified) {
        AssetType = other.AssetType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            AssetType = (global::Magewatch.API.AssetType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// There are two players in a game named "user" and "enemy". The term
  /// "opponent" can be used to contextually refer to either player
  /// </summary>
  public sealed partial class PlayerData : pb::IMessage<PlayerData> {
    private static readonly pb::MessageParser<PlayerData> _parser = new pb::MessageParser<PlayerData>(() => new PlayerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData(PlayerData other) : this() {
      playerName_ = other.playerName_;
      currentLife_ = other.currentLife_;
      maximumLife_ = other.maximumLife_;
      currentPower_ = other.currentPower_;
      maximumPower_ = other.maximumPower_;
      currentInfluence_ = other.currentInfluence_.Clone();
      maximumInfluence_ = other.maximumInfluence_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData Clone() {
      return new PlayerData(this);
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 1;
    private global::Magewatch.API.PlayerName playerName_ = global::Magewatch.API.PlayerName.PlayerUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerName PlayerName {
      get { return playerName_; }
      set {
        playerName_ = value;
      }
    }

    /// <summary>Field number for the "current_life" field.</summary>
    public const int CurrentLifeFieldNumber = 2;
    private uint currentLife_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentLife {
      get { return currentLife_; }
      set {
        currentLife_ = value;
      }
    }

    /// <summary>Field number for the "maximum_life" field.</summary>
    public const int MaximumLifeFieldNumber = 3;
    private uint maximumLife_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaximumLife {
      get { return maximumLife_; }
      set {
        maximumLife_ = value;
      }
    }

    /// <summary>Field number for the "current_power" field.</summary>
    public const int CurrentPowerFieldNumber = 4;
    private uint currentPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentPower {
      get { return currentPower_; }
      set {
        currentPower_ = value;
      }
    }

    /// <summary>Field number for the "maximum_power" field.</summary>
    public const int MaximumPowerFieldNumber = 5;
    private uint maximumPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaximumPower {
      get { return maximumPower_; }
      set {
        maximumPower_ = value;
      }
    }

    /// <summary>Field number for the "current_influence" field.</summary>
    public const int CurrentInfluenceFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Magewatch.API.Influence> _repeated_currentInfluence_codec
        = pb::FieldCodec.ForMessage(50, global::Magewatch.API.Influence.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.Influence> currentInfluence_ = new pbc::RepeatedField<global::Magewatch.API.Influence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.Influence> CurrentInfluence {
      get { return currentInfluence_; }
    }

    /// <summary>Field number for the "maximum_influence" field.</summary>
    public const int MaximumInfluenceFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Magewatch.API.Influence> _repeated_maximumInfluence_codec
        = pb::FieldCodec.ForMessage(58, global::Magewatch.API.Influence.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.Influence> maximumInfluence_ = new pbc::RepeatedField<global::Magewatch.API.Influence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.Influence> MaximumInfluence {
      get { return maximumInfluence_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerName != other.PlayerName) return false;
      if (CurrentLife != other.CurrentLife) return false;
      if (MaximumLife != other.MaximumLife) return false;
      if (CurrentPower != other.CurrentPower) return false;
      if (MaximumPower != other.MaximumPower) return false;
      if(!currentInfluence_.Equals(other.currentInfluence_)) return false;
      if(!maximumInfluence_.Equals(other.maximumInfluence_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerName != global::Magewatch.API.PlayerName.PlayerUnspecified) hash ^= PlayerName.GetHashCode();
      if (CurrentLife != 0) hash ^= CurrentLife.GetHashCode();
      if (MaximumLife != 0) hash ^= MaximumLife.GetHashCode();
      if (CurrentPower != 0) hash ^= CurrentPower.GetHashCode();
      if (MaximumPower != 0) hash ^= MaximumPower.GetHashCode();
      hash ^= currentInfluence_.GetHashCode();
      hash ^= maximumInfluence_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerName != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PlayerName);
      }
      if (CurrentLife != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurrentLife);
      }
      if (MaximumLife != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaximumLife);
      }
      if (CurrentPower != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CurrentPower);
      }
      if (MaximumPower != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MaximumPower);
      }
      currentInfluence_.WriteTo(output, _repeated_currentInfluence_codec);
      maximumInfluence_.WriteTo(output, _repeated_maximumInfluence_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerName != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlayerName);
      }
      if (CurrentLife != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentLife);
      }
      if (MaximumLife != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumLife);
      }
      if (CurrentPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentPower);
      }
      if (MaximumPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaximumPower);
      }
      size += currentInfluence_.CalculateSize(_repeated_currentInfluence_codec);
      size += maximumInfluence_.CalculateSize(_repeated_maximumInfluence_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerData other) {
      if (other == null) {
        return;
      }
      if (other.PlayerName != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        PlayerName = other.PlayerName;
      }
      if (other.CurrentLife != 0) {
        CurrentLife = other.CurrentLife;
      }
      if (other.MaximumLife != 0) {
        MaximumLife = other.MaximumLife;
      }
      if (other.CurrentPower != 0) {
        CurrentPower = other.CurrentPower;
      }
      if (other.MaximumPower != 0) {
        MaximumPower = other.MaximumPower;
      }
      currentInfluence_.Add(other.currentInfluence_);
      maximumInfluence_.Add(other.maximumInfluence_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerName = (global::Magewatch.API.PlayerName) input.ReadEnum();
            break;
          }
          case 16: {
            CurrentLife = input.ReadUInt32();
            break;
          }
          case 24: {
            MaximumLife = input.ReadUInt32();
            break;
          }
          case 32: {
            CurrentPower = input.ReadUInt32();
            break;
          }
          case 40: {
            MaximumPower = input.ReadUInt32();
            break;
          }
          case 50: {
            currentInfluence_.AddEntriesFrom(input, _repeated_currentInfluence_codec);
            break;
          }
          case 58: {
            maximumInfluence_.AddEntriesFrom(input, _repeated_maximumInfluence_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoCost : pb::IMessage<NoCost> {
    private static readonly pb::MessageParser<NoCost> _parser = new pb::MessageParser<NoCost>(() => new NoCost());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoCost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoCost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoCost(NoCost other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoCost Clone() {
      return new NoCost(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoCost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoCost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoCost other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class StandardCost : pb::IMessage<StandardCost> {
    private static readonly pb::MessageParser<StandardCost> _parser = new pb::MessageParser<StandardCost>(() => new StandardCost());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StandardCost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardCost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardCost(StandardCost other) : this() {
      powerCost_ = other.powerCost_;
      influenceCost_ = other.influenceCost_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardCost Clone() {
      return new StandardCost(this);
    }

    /// <summary>Field number for the "power_cost" field.</summary>
    public const int PowerCostFieldNumber = 1;
    private uint powerCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PowerCost {
      get { return powerCost_; }
      set {
        powerCost_ = value;
      }
    }

    /// <summary>Field number for the "influence_cost" field.</summary>
    public const int InfluenceCostFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Magewatch.API.Influence> _repeated_influenceCost_codec
        = pb::FieldCodec.ForMessage(18, global::Magewatch.API.Influence.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.Influence> influenceCost_ = new pbc::RepeatedField<global::Magewatch.API.Influence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.Influence> InfluenceCost {
      get { return influenceCost_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StandardCost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StandardCost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PowerCost != other.PowerCost) return false;
      if(!influenceCost_.Equals(other.influenceCost_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PowerCost != 0) hash ^= PowerCost.GetHashCode();
      hash ^= influenceCost_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PowerCost != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PowerCost);
      }
      influenceCost_.WriteTo(output, _repeated_influenceCost_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PowerCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PowerCost);
      }
      size += influenceCost_.CalculateSize(_repeated_influenceCost_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StandardCost other) {
      if (other == null) {
        return;
      }
      if (other.PowerCost != 0) {
        PowerCost = other.PowerCost;
      }
      influenceCost_.Add(other.influenceCost_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PowerCost = input.ReadUInt32();
            break;
          }
          case 18: {
            influenceCost_.AddEntriesFrom(input, _repeated_influenceCost_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RichText : pb::IMessage<RichText> {
    private static readonly pb::MessageParser<RichText> _parser = new pb::MessageParser<RichText>(() => new RichText());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RichText> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RichText() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RichText(RichText other) : this() {
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RichText Clone() {
      return new RichText(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RichText);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RichText other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RichText other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttachmentData : pb::IMessage<AttachmentData> {
    private static readonly pb::MessageParser<AttachmentData> _parser = new pb::MessageParser<AttachmentData>(() => new AttachmentData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachmentData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentData(AttachmentData other) : this() {
      image_ = other.image_ != null ? other.image_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentData Clone() {
      return new AttachmentData(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private global::Magewatch.API.Asset image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.Asset Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachmentData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachmentData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Image, other.Image)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (image_ != null) hash ^= Image.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (image_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Image);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachmentData other) {
      if (other == null) {
        return;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Magewatch.API.Asset();
        }
        Image.MergeFrom(other.Image);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (image_ == null) {
              Image = new global::Magewatch.API.Asset();
            }
            input.ReadMessage(Image);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UntargetedData : pb::IMessage<UntargetedData> {
    private static readonly pb::MessageParser<UntargetedData> _parser = new pb::MessageParser<UntargetedData>(() => new UntargetedData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UntargetedData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UntargetedData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UntargetedData(UntargetedData other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UntargetedData Clone() {
      return new UntargetedData(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UntargetedData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UntargetedData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UntargetedData other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CardData : pb::IMessage<CardData> {
    private static readonly pb::MessageParser<CardData> _parser = new pb::MessageParser<CardData>(() => new CardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardData(CardData other) : this() {
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      prefab_ = other.prefab_ != null ? other.prefab_.Clone() : null;
      name_ = other.name_;
      owner_ = other.owner_;
      image_ = other.image_ != null ? other.image_.Clone() : null;
      text_ = other.text_ != null ? other.text_.Clone() : null;
      isRevealed_ = other.isRevealed_;
      canBePlayed_ = other.canBePlayed_;
      switch (other.CostCase) {
        case CostOneofCase.NoCost:
          NoCost = other.NoCost.Clone();
          break;
        case CostOneofCase.StandardCost:
          StandardCost = other.StandardCost.Clone();
          break;
      }

      switch (other.CardTypeCase) {
        case CardTypeOneofCase.CreatureCard:
          CreatureCard = other.CreatureCard.Clone();
          break;
        case CardTypeOneofCase.AttachmentCard:
          AttachmentCard = other.AttachmentCard.Clone();
          break;
        case CardTypeOneofCase.UntargetedCard:
          UntargetedCard = other.UntargetedCard.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardData Clone() {
      return new CardData(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private global::Magewatch.API.CardId cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CardId CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "prefab" field.</summary>
    public const int PrefabFieldNumber = 2;
    private global::Magewatch.API.Asset prefab_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.Asset Prefab {
      get { return prefab_; }
      set {
        prefab_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "no_cost" field.</summary>
    public const int NoCostFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.NoCost NoCost {
      get { return costCase_ == CostOneofCase.NoCost ? (global::Magewatch.API.NoCost) cost_ : null; }
      set {
        cost_ = value;
        costCase_ = value == null ? CostOneofCase.None : CostOneofCase.NoCost;
      }
    }

    /// <summary>Field number for the "standard_cost" field.</summary>
    public const int StandardCostFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.StandardCost StandardCost {
      get { return costCase_ == CostOneofCase.StandardCost ? (global::Magewatch.API.StandardCost) cost_ : null; }
      set {
        cost_ = value;
        costCase_ = value == null ? CostOneofCase.None : CostOneofCase.StandardCost;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 6;
    private global::Magewatch.API.PlayerName owner_ = global::Magewatch.API.PlayerName.PlayerUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 7;
    private global::Magewatch.API.Asset image_;
    /// <summary>
    /// Sprite to display as the card image
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.Asset Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 8;
    private global::Magewatch.API.RichText text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RichText Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "is_revealed" field.</summary>
    public const int IsRevealedFieldNumber = 9;
    private bool isRevealed_;
    /// <summary>
    /// Should this card be shown face-up?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRevealed {
      get { return isRevealed_; }
      set {
        isRevealed_ = value;
      }
    }

    /// <summary>Field number for the "can_be_played" field.</summary>
    public const int CanBePlayedFieldNumber = 10;
    private bool canBePlayed_;
    /// <summary>
    /// Can the user play this card? i.e. does it have a valid target and can the
    /// user pay its costs?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanBePlayed {
      get { return canBePlayed_; }
      set {
        canBePlayed_ = value;
      }
    }

    /// <summary>Field number for the "creature_card" field.</summary>
    public const int CreatureCardFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureData CreatureCard {
      get { return cardTypeCase_ == CardTypeOneofCase.CreatureCard ? (global::Magewatch.API.CreatureData) cardType_ : null; }
      set {
        cardType_ = value;
        cardTypeCase_ = value == null ? CardTypeOneofCase.None : CardTypeOneofCase.CreatureCard;
      }
    }

    /// <summary>Field number for the "attachment_card" field.</summary>
    public const int AttachmentCardFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.AttachmentData AttachmentCard {
      get { return cardTypeCase_ == CardTypeOneofCase.AttachmentCard ? (global::Magewatch.API.AttachmentData) cardType_ : null; }
      set {
        cardType_ = value;
        cardTypeCase_ = value == null ? CardTypeOneofCase.None : CardTypeOneofCase.AttachmentCard;
      }
    }

    /// <summary>Field number for the "untargeted_card" field.</summary>
    public const int UntargetedCardFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.UntargetedData UntargetedCard {
      get { return cardTypeCase_ == CardTypeOneofCase.UntargetedCard ? (global::Magewatch.API.UntargetedData) cardType_ : null; }
      set {
        cardType_ = value;
        cardTypeCase_ = value == null ? CardTypeOneofCase.None : CardTypeOneofCase.UntargetedCard;
      }
    }

    private object cost_;
    /// <summary>Enum of possible cases for the "cost" oneof.</summary>
    public enum CostOneofCase {
      None = 0,
      NoCost = 4,
      StandardCost = 5,
    }
    private CostOneofCase costCase_ = CostOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CostOneofCase CostCase {
      get { return costCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCost() {
      costCase_ = CostOneofCase.None;
      cost_ = null;
    }

    private object cardType_;
    /// <summary>Enum of possible cases for the "card_type" oneof.</summary>
    public enum CardTypeOneofCase {
      None = 0,
      CreatureCard = 11,
      AttachmentCard = 12,
      UntargetedCard = 13,
    }
    private CardTypeOneofCase cardTypeCase_ = CardTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTypeOneofCase CardTypeCase {
      get { return cardTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCardType() {
      cardTypeCase_ = CardTypeOneofCase.None;
      cardType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardId, other.CardId)) return false;
      if (!object.Equals(Prefab, other.Prefab)) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(NoCost, other.NoCost)) return false;
      if (!object.Equals(StandardCost, other.StandardCost)) return false;
      if (Owner != other.Owner) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(Text, other.Text)) return false;
      if (IsRevealed != other.IsRevealed) return false;
      if (CanBePlayed != other.CanBePlayed) return false;
      if (!object.Equals(CreatureCard, other.CreatureCard)) return false;
      if (!object.Equals(AttachmentCard, other.AttachmentCard)) return false;
      if (!object.Equals(UntargetedCard, other.UntargetedCard)) return false;
      if (CostCase != other.CostCase) return false;
      if (CardTypeCase != other.CardTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (prefab_ != null) hash ^= Prefab.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (costCase_ == CostOneofCase.NoCost) hash ^= NoCost.GetHashCode();
      if (costCase_ == CostOneofCase.StandardCost) hash ^= StandardCost.GetHashCode();
      if (Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) hash ^= Owner.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      if (text_ != null) hash ^= Text.GetHashCode();
      if (IsRevealed != false) hash ^= IsRevealed.GetHashCode();
      if (CanBePlayed != false) hash ^= CanBePlayed.GetHashCode();
      if (cardTypeCase_ == CardTypeOneofCase.CreatureCard) hash ^= CreatureCard.GetHashCode();
      if (cardTypeCase_ == CardTypeOneofCase.AttachmentCard) hash ^= AttachmentCard.GetHashCode();
      if (cardTypeCase_ == CardTypeOneofCase.UntargetedCard) hash ^= UntargetedCard.GetHashCode();
      hash ^= (int) costCase_;
      hash ^= (int) cardTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (prefab_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Prefab);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (costCase_ == CostOneofCase.NoCost) {
        output.WriteRawTag(34);
        output.WriteMessage(NoCost);
      }
      if (costCase_ == CostOneofCase.StandardCost) {
        output.WriteRawTag(42);
        output.WriteMessage(StandardCost);
      }
      if (Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Owner);
      }
      if (image_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Image);
      }
      if (text_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Text);
      }
      if (IsRevealed != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsRevealed);
      }
      if (CanBePlayed != false) {
        output.WriteRawTag(80);
        output.WriteBool(CanBePlayed);
      }
      if (cardTypeCase_ == CardTypeOneofCase.CreatureCard) {
        output.WriteRawTag(90);
        output.WriteMessage(CreatureCard);
      }
      if (cardTypeCase_ == CardTypeOneofCase.AttachmentCard) {
        output.WriteRawTag(98);
        output.WriteMessage(AttachmentCard);
      }
      if (cardTypeCase_ == CardTypeOneofCase.UntargetedCard) {
        output.WriteRawTag(106);
        output.WriteMessage(UntargetedCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (prefab_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prefab);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (costCase_ == CostOneofCase.NoCost) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NoCost);
      }
      if (costCase_ == CostOneofCase.StandardCost) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StandardCost);
      }
      if (Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (IsRevealed != false) {
        size += 1 + 1;
      }
      if (CanBePlayed != false) {
        size += 1 + 1;
      }
      if (cardTypeCase_ == CardTypeOneofCase.CreatureCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureCard);
      }
      if (cardTypeCase_ == CardTypeOneofCase.AttachmentCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttachmentCard);
      }
      if (cardTypeCase_ == CardTypeOneofCase.UntargetedCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UntargetedCard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardData other) {
      if (other == null) {
        return;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Magewatch.API.CardId();
        }
        CardId.MergeFrom(other.CardId);
      }
      if (other.prefab_ != null) {
        if (prefab_ == null) {
          Prefab = new global::Magewatch.API.Asset();
        }
        Prefab.MergeFrom(other.Prefab);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        Owner = other.Owner;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Magewatch.API.Asset();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.text_ != null) {
        if (text_ == null) {
          Text = new global::Magewatch.API.RichText();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.IsRevealed != false) {
        IsRevealed = other.IsRevealed;
      }
      if (other.CanBePlayed != false) {
        CanBePlayed = other.CanBePlayed;
      }
      switch (other.CostCase) {
        case CostOneofCase.NoCost:
          if (NoCost == null) {
            NoCost = new global::Magewatch.API.NoCost();
          }
          NoCost.MergeFrom(other.NoCost);
          break;
        case CostOneofCase.StandardCost:
          if (StandardCost == null) {
            StandardCost = new global::Magewatch.API.StandardCost();
          }
          StandardCost.MergeFrom(other.StandardCost);
          break;
      }

      switch (other.CardTypeCase) {
        case CardTypeOneofCase.CreatureCard:
          if (CreatureCard == null) {
            CreatureCard = new global::Magewatch.API.CreatureData();
          }
          CreatureCard.MergeFrom(other.CreatureCard);
          break;
        case CardTypeOneofCase.AttachmentCard:
          if (AttachmentCard == null) {
            AttachmentCard = new global::Magewatch.API.AttachmentData();
          }
          AttachmentCard.MergeFrom(other.AttachmentCard);
          break;
        case CardTypeOneofCase.UntargetedCard:
          if (UntargetedCard == null) {
            UntargetedCard = new global::Magewatch.API.UntargetedData();
          }
          UntargetedCard.MergeFrom(other.UntargetedCard);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Magewatch.API.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 18: {
            if (prefab_ == null) {
              Prefab = new global::Magewatch.API.Asset();
            }
            input.ReadMessage(Prefab);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            global::Magewatch.API.NoCost subBuilder = new global::Magewatch.API.NoCost();
            if (costCase_ == CostOneofCase.NoCost) {
              subBuilder.MergeFrom(NoCost);
            }
            input.ReadMessage(subBuilder);
            NoCost = subBuilder;
            break;
          }
          case 42: {
            global::Magewatch.API.StandardCost subBuilder = new global::Magewatch.API.StandardCost();
            if (costCase_ == CostOneofCase.StandardCost) {
              subBuilder.MergeFrom(StandardCost);
            }
            input.ReadMessage(subBuilder);
            StandardCost = subBuilder;
            break;
          }
          case 48: {
            Owner = (global::Magewatch.API.PlayerName) input.ReadEnum();
            break;
          }
          case 58: {
            if (image_ == null) {
              Image = new global::Magewatch.API.Asset();
            }
            input.ReadMessage(Image);
            break;
          }
          case 66: {
            if (text_ == null) {
              Text = new global::Magewatch.API.RichText();
            }
            input.ReadMessage(Text);
            break;
          }
          case 72: {
            IsRevealed = input.ReadBool();
            break;
          }
          case 80: {
            CanBePlayed = input.ReadBool();
            break;
          }
          case 90: {
            global::Magewatch.API.CreatureData subBuilder = new global::Magewatch.API.CreatureData();
            if (cardTypeCase_ == CardTypeOneofCase.CreatureCard) {
              subBuilder.MergeFrom(CreatureCard);
            }
            input.ReadMessage(subBuilder);
            CreatureCard = subBuilder;
            break;
          }
          case 98: {
            global::Magewatch.API.AttachmentData subBuilder = new global::Magewatch.API.AttachmentData();
            if (cardTypeCase_ == CardTypeOneofCase.AttachmentCard) {
              subBuilder.MergeFrom(AttachmentCard);
            }
            input.ReadMessage(subBuilder);
            AttachmentCard = subBuilder;
            break;
          }
          case 106: {
            global::Magewatch.API.UntargetedData subBuilder = new global::Magewatch.API.UntargetedData();
            if (cardTypeCase_ == CardTypeOneofCase.UntargetedCard) {
              subBuilder.MergeFrom(UntargetedCard);
            }
            input.ReadMessage(subBuilder);
            UntargetedCard = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreatureData : pb::IMessage<CreatureData> {
    private static readonly pb::MessageParser<CreatureData> _parser = new pb::MessageParser<CreatureData>(() => new CreatureData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatureData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureData(CreatureData other) : this() {
      creatureId_ = other.creatureId_ != null ? other.creatureId_.Clone() : null;
      prefab_ = other.prefab_ != null ? other.prefab_.Clone() : null;
      owner_ = other.owner_;
      rankPosition_ = other.rankPosition_;
      filePosition_ = other.filePosition_;
      canBeRepositioned_ = other.canBeRepositioned_;
      attachments_ = other.attachments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureData Clone() {
      return new CreatureData(this);
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 1;
    private global::Magewatch.API.CreatureId creatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    /// <summary>Field number for the "prefab" field.</summary>
    public const int PrefabFieldNumber = 2;
    private global::Magewatch.API.Asset prefab_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.Asset Prefab {
      get { return prefab_; }
      set {
        prefab_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private global::Magewatch.API.PlayerName owner_ = global::Magewatch.API.PlayerName.PlayerUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "rank_position" field.</summary>
    public const int RankPositionFieldNumber = 4;
    private global::Magewatch.API.RankValue rankPosition_ = global::Magewatch.API.RankValue.RankUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RankValue RankPosition {
      get { return rankPosition_; }
      set {
        rankPosition_ = value;
      }
    }

    /// <summary>Field number for the "file_position" field.</summary>
    public const int FilePositionFieldNumber = 5;
    private global::Magewatch.API.FileValue filePosition_ = global::Magewatch.API.FileValue.FileUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.FileValue FilePosition {
      get { return filePosition_; }
      set {
        filePosition_ = value;
      }
    }

    /// <summary>Field number for the "can_be_repositioned" field.</summary>
    public const int CanBeRepositionedFieldNumber = 6;
    private bool canBeRepositioned_;
    /// <summary>
    /// Can the user change this creature's position?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanBeRepositioned {
      get { return canBeRepositioned_; }
      set {
        canBeRepositioned_ = value;
      }
    }

    /// <summary>Field number for the "attachments" field.</summary>
    public const int AttachmentsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Magewatch.API.AttachmentData> _repeated_attachments_codec
        = pb::FieldCodec.ForMessage(58, global::Magewatch.API.AttachmentData.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.AttachmentData> attachments_ = new pbc::RepeatedField<global::Magewatch.API.AttachmentData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.AttachmentData> Attachments {
      get { return attachments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatureData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatureData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreatureId, other.CreatureId)) return false;
      if (!object.Equals(Prefab, other.Prefab)) return false;
      if (Owner != other.Owner) return false;
      if (RankPosition != other.RankPosition) return false;
      if (FilePosition != other.FilePosition) return false;
      if (CanBeRepositioned != other.CanBeRepositioned) return false;
      if(!attachments_.Equals(other.attachments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creatureId_ != null) hash ^= CreatureId.GetHashCode();
      if (prefab_ != null) hash ^= Prefab.GetHashCode();
      if (Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) hash ^= Owner.GetHashCode();
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) hash ^= RankPosition.GetHashCode();
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) hash ^= FilePosition.GetHashCode();
      if (CanBeRepositioned != false) hash ^= CanBeRepositioned.GetHashCode();
      hash ^= attachments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creatureId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreatureId);
      }
      if (prefab_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Prefab);
      }
      if (Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Owner);
      }
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) FilePosition);
      }
      if (CanBeRepositioned != false) {
        output.WriteRawTag(48);
        output.WriteBool(CanBeRepositioned);
      }
      attachments_.WriteTo(output, _repeated_attachments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureId);
      }
      if (prefab_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prefab);
      }
      if (Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FilePosition);
      }
      if (CanBeRepositioned != false) {
        size += 1 + 1;
      }
      size += attachments_.CalculateSize(_repeated_attachments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatureData other) {
      if (other == null) {
        return;
      }
      if (other.creatureId_ != null) {
        if (creatureId_ == null) {
          CreatureId = new global::Magewatch.API.CreatureId();
        }
        CreatureId.MergeFrom(other.CreatureId);
      }
      if (other.prefab_ != null) {
        if (prefab_ == null) {
          Prefab = new global::Magewatch.API.Asset();
        }
        Prefab.MergeFrom(other.Prefab);
      }
      if (other.Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        Owner = other.Owner;
      }
      if (other.RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        RankPosition = other.RankPosition;
      }
      if (other.FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        FilePosition = other.FilePosition;
      }
      if (other.CanBeRepositioned != false) {
        CanBeRepositioned = other.CanBeRepositioned;
      }
      attachments_.Add(other.attachments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creatureId_ == null) {
              CreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(CreatureId);
            break;
          }
          case 18: {
            if (prefab_ == null) {
              Prefab = new global::Magewatch.API.Asset();
            }
            input.ReadMessage(Prefab);
            break;
          }
          case 24: {
            Owner = (global::Magewatch.API.PlayerName) input.ReadEnum();
            break;
          }
          case 32: {
            RankPosition = (global::Magewatch.API.RankValue) input.ReadEnum();
            break;
          }
          case 40: {
            FilePosition = (global::Magewatch.API.FileValue) input.ReadEnum();
            break;
          }
          case 48: {
            CanBeRepositioned = input.ReadBool();
            break;
          }
          case 58: {
            attachments_.AddEntriesFrom(input, _repeated_attachments_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DisplayErrorCommand : pb::IMessage<DisplayErrorCommand> {
    private static readonly pb::MessageParser<DisplayErrorCommand> _parser = new pb::MessageParser<DisplayErrorCommand>(() => new DisplayErrorCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisplayErrorCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayErrorCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayErrorCommand(DisplayErrorCommand other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayErrorCommand Clone() {
      return new DisplayErrorCommand(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisplayErrorCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisplayErrorCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisplayErrorCommand other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WaitCommand : pb::IMessage<WaitCommand> {
    private static readonly pb::MessageParser<WaitCommand> _parser = new pb::MessageParser<WaitCommand>(() => new WaitCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WaitCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitCommand(WaitCommand other) : this() {
      waitTimeMilliseconds_ = other.waitTimeMilliseconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitCommand Clone() {
      return new WaitCommand(this);
    }

    /// <summary>Field number for the "wait_time_milliseconds" field.</summary>
    public const int WaitTimeMillisecondsFieldNumber = 1;
    private uint waitTimeMilliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WaitTimeMilliseconds {
      get { return waitTimeMilliseconds_; }
      set {
        waitTimeMilliseconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WaitCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WaitCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WaitTimeMilliseconds != other.WaitTimeMilliseconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WaitTimeMilliseconds != 0) hash ^= WaitTimeMilliseconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WaitTimeMilliseconds != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(WaitTimeMilliseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WaitTimeMilliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WaitTimeMilliseconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WaitCommand other) {
      if (other == null) {
        return;
      }
      if (other.WaitTimeMilliseconds != 0) {
        WaitTimeMilliseconds = other.WaitTimeMilliseconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WaitTimeMilliseconds = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MUpdateInterfaceCommand : pb::IMessage<MUpdateInterfaceCommand> {
    private static readonly pb::MessageParser<MUpdateInterfaceCommand> _parser = new pb::MessageParser<MUpdateInterfaceCommand>(() => new MUpdateInterfaceCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MUpdateInterfaceCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MUpdateInterfaceCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MUpdateInterfaceCommand(MUpdateInterfaceCommand other) : this() {
      mainButtonEnabled_ = other.mainButtonEnabled_;
      mainButtonText_ = other.mainButtonText_;
      clickEventId_ = other.clickEventId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MUpdateInterfaceCommand Clone() {
      return new MUpdateInterfaceCommand(this);
    }

    /// <summary>Field number for the "main_button_enabled" field.</summary>
    public const int MainButtonEnabledFieldNumber = 1;
    private bool mainButtonEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MainButtonEnabled {
      get { return mainButtonEnabled_; }
      set {
        mainButtonEnabled_ = value;
      }
    }

    /// <summary>Field number for the "main_button_text" field.</summary>
    public const int MainButtonTextFieldNumber = 2;
    private string mainButtonText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainButtonText {
      get { return mainButtonText_; }
      set {
        mainButtonText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "click_event_id" field.</summary>
    public const int ClickEventIdFieldNumber = 13;
    private uint clickEventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClickEventId {
      get { return clickEventId_; }
      set {
        clickEventId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MUpdateInterfaceCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MUpdateInterfaceCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MainButtonEnabled != other.MainButtonEnabled) return false;
      if (MainButtonText != other.MainButtonText) return false;
      if (ClickEventId != other.ClickEventId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MainButtonEnabled != false) hash ^= MainButtonEnabled.GetHashCode();
      if (MainButtonText.Length != 0) hash ^= MainButtonText.GetHashCode();
      if (ClickEventId != 0) hash ^= ClickEventId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MainButtonEnabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(MainButtonEnabled);
      }
      if (MainButtonText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MainButtonText);
      }
      if (ClickEventId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(ClickEventId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MainButtonEnabled != false) {
        size += 1 + 1;
      }
      if (MainButtonText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainButtonText);
      }
      if (ClickEventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClickEventId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MUpdateInterfaceCommand other) {
      if (other == null) {
        return;
      }
      if (other.MainButtonEnabled != false) {
        MainButtonEnabled = other.MainButtonEnabled;
      }
      if (other.MainButtonText.Length != 0) {
        MainButtonText = other.MainButtonText;
      }
      if (other.ClickEventId != 0) {
        ClickEventId = other.ClickEventId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MainButtonEnabled = input.ReadBool();
            break;
          }
          case 18: {
            MainButtonText = input.ReadString();
            break;
          }
          case 104: {
            ClickEventId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdatePlayerCommand : pb::IMessage<UpdatePlayerCommand> {
    private static readonly pb::MessageParser<UpdatePlayerCommand> _parser = new pb::MessageParser<UpdatePlayerCommand>(() => new UpdatePlayerCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePlayerCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerCommand(UpdatePlayerCommand other) : this() {
      player_ = other.player_ != null ? other.player_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerCommand Clone() {
      return new UpdatePlayerCommand(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::Magewatch.API.PlayerData player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerData Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePlayerCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePlayerCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePlayerCommand other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::Magewatch.API.PlayerData();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (player_ == null) {
              Player = new global::Magewatch.API.PlayerData();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MDrawOrUpdateCardCommand : pb::IMessage<MDrawOrUpdateCardCommand> {
    private static readonly pb::MessageParser<MDrawOrUpdateCardCommand> _parser = new pb::MessageParser<MDrawOrUpdateCardCommand>(() => new MDrawOrUpdateCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MDrawOrUpdateCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDrawOrUpdateCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDrawOrUpdateCardCommand(MDrawOrUpdateCardCommand other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDrawOrUpdateCardCommand Clone() {
      return new MDrawOrUpdateCardCommand(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Magewatch.API.CardData card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CardData Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MDrawOrUpdateCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MDrawOrUpdateCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MDrawOrUpdateCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          Card = new global::Magewatch.API.CardData();
        }
        Card.MergeFrom(other.Card);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::Magewatch.API.CardData();
            }
            input.ReadMessage(Card);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MUpdateCanPlayCardCommand : pb::IMessage<MUpdateCanPlayCardCommand> {
    private static readonly pb::MessageParser<MUpdateCanPlayCardCommand> _parser = new pb::MessageParser<MUpdateCanPlayCardCommand>(() => new MUpdateCanPlayCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MUpdateCanPlayCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MUpdateCanPlayCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MUpdateCanPlayCardCommand(MUpdateCanPlayCardCommand other) : this() {
      player_ = other.player_;
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      canPlay_ = other.canPlay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MUpdateCanPlayCardCommand Clone() {
      return new MUpdateCanPlayCardCommand(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::Magewatch.API.PlayerName player_ = global::Magewatch.API.PlayerName.PlayerUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerName Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 2;
    private global::Magewatch.API.CardId cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CardId CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "can_play" field.</summary>
    public const int CanPlayFieldNumber = 3;
    private bool canPlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanPlay {
      get { return canPlay_; }
      set {
        canPlay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MUpdateCanPlayCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MUpdateCanPlayCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (!object.Equals(CardId, other.CardId)) return false;
      if (CanPlay != other.CanPlay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) hash ^= Player.GetHashCode();
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (CanPlay != false) hash ^= CanPlay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Player);
      }
      if (cardId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CardId);
      }
      if (CanPlay != false) {
        output.WriteRawTag(24);
        output.WriteBool(CanPlay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (CanPlay != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MUpdateCanPlayCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        Player = other.Player;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Magewatch.API.CardId();
        }
        CardId.MergeFrom(other.CardId);
      }
      if (other.CanPlay != false) {
        CanPlay = other.CanPlay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = (global::Magewatch.API.PlayerName) input.ReadEnum();
            break;
          }
          case 18: {
            if (cardId_ == null) {
              CardId = new global::Magewatch.API.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 24: {
            CanPlay = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Reveal an *existing* card and (optionally) animate it to a specific
  /// rank/file position
  /// </summary>
  public sealed partial class RevealCardCommand : pb::IMessage<RevealCardCommand> {
    private static readonly pb::MessageParser<RevealCardCommand> _parser = new pb::MessageParser<RevealCardCommand>(() => new RevealCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevealCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealCardCommand(RevealCardCommand other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      revealDelayMilliseconds_ = other.revealDelayMilliseconds_;
      rankPosition_ = other.rankPosition_;
      filePosition_ = other.filePosition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealCardCommand Clone() {
      return new RevealCardCommand(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Magewatch.API.CardData card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CardData Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "reveal_delay_milliseconds" field.</summary>
    public const int RevealDelayMillisecondsFieldNumber = 2;
    private uint revealDelayMilliseconds_;
    /// <summary>
    /// How long to show the card for before animating it away. 0 should be
    /// interpreted as allowing the client to pick its own default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RevealDelayMilliseconds {
      get { return revealDelayMilliseconds_; }
      set {
        revealDelayMilliseconds_ = value;
      }
    }

    /// <summary>Field number for the "rank_position" field.</summary>
    public const int RankPositionFieldNumber = 3;
    private global::Magewatch.API.RankValue rankPosition_ = global::Magewatch.API.RankValue.RankUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RankValue RankPosition {
      get { return rankPosition_; }
      set {
        rankPosition_ = value;
      }
    }

    /// <summary>Field number for the "file_position" field.</summary>
    public const int FilePositionFieldNumber = 4;
    private global::Magewatch.API.FileValue filePosition_ = global::Magewatch.API.FileValue.FileUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.FileValue FilePosition {
      get { return filePosition_; }
      set {
        filePosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RevealCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RevealCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if (RevealDelayMilliseconds != other.RevealDelayMilliseconds) return false;
      if (RankPosition != other.RankPosition) return false;
      if (FilePosition != other.FilePosition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (RevealDelayMilliseconds != 0) hash ^= RevealDelayMilliseconds.GetHashCode();
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) hash ^= RankPosition.GetHashCode();
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) hash ^= FilePosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (RevealDelayMilliseconds != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RevealDelayMilliseconds);
      }
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) FilePosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (RevealDelayMilliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RevealDelayMilliseconds);
      }
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FilePosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RevealCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          Card = new global::Magewatch.API.CardData();
        }
        Card.MergeFrom(other.Card);
      }
      if (other.RevealDelayMilliseconds != 0) {
        RevealDelayMilliseconds = other.RevealDelayMilliseconds;
      }
      if (other.RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        RankPosition = other.RankPosition;
      }
      if (other.FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        FilePosition = other.FilePosition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::Magewatch.API.CardData();
            }
            input.ReadMessage(Card);
            break;
          }
          case 16: {
            RevealDelayMilliseconds = input.ReadUInt32();
            break;
          }
          case 24: {
            RankPosition = (global::Magewatch.API.RankValue) input.ReadEnum();
            break;
          }
          case 32: {
            FilePosition = (global::Magewatch.API.FileValue) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateOrUpdateCreatureCommand : pb::IMessage<CreateOrUpdateCreatureCommand> {
    private static readonly pb::MessageParser<CreateOrUpdateCreatureCommand> _parser = new pb::MessageParser<CreateOrUpdateCreatureCommand>(() => new CreateOrUpdateCreatureCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateOrUpdateCreatureCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOrUpdateCreatureCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOrUpdateCreatureCommand(CreateOrUpdateCreatureCommand other) : this() {
      creature_ = other.creature_ != null ? other.creature_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOrUpdateCreatureCommand Clone() {
      return new CreateOrUpdateCreatureCommand(this);
    }

    /// <summary>Field number for the "creature" field.</summary>
    public const int CreatureFieldNumber = 1;
    private global::Magewatch.API.CreatureData creature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureData Creature {
      get { return creature_; }
      set {
        creature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateOrUpdateCreatureCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateOrUpdateCreatureCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Creature, other.Creature)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creature_ != null) hash ^= Creature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creature_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Creature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateOrUpdateCreatureCommand other) {
      if (other == null) {
        return;
      }
      if (other.creature_ != null) {
        if (creature_ == null) {
          Creature = new global::Magewatch.API.CreatureData();
        }
        Creature.MergeFrom(other.Creature);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creature_ == null) {
              Creature = new global::Magewatch.API.CreatureData();
            }
            input.ReadMessage(Creature);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveCreatureCommand : pb::IMessage<RemoveCreatureCommand> {
    private static readonly pb::MessageParser<RemoveCreatureCommand> _parser = new pb::MessageParser<RemoveCreatureCommand>(() => new RemoveCreatureCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveCreatureCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveCreatureCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveCreatureCommand(RemoveCreatureCommand other) : this() {
      creatureId_ = other.creatureId_ != null ? other.creatureId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveCreatureCommand Clone() {
      return new RemoveCreatureCommand(this);
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 1;
    private global::Magewatch.API.CreatureId creatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveCreatureCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveCreatureCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreatureId, other.CreatureId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creatureId_ != null) hash ^= CreatureId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creatureId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreatureId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveCreatureCommand other) {
      if (other == null) {
        return;
      }
      if (other.creatureId_ != null) {
        if (creatureId_ == null) {
          CreatureId = new global::Magewatch.API.CreatureId();
        }
        CreatureId.MergeFrom(other.CreatureId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creatureId_ == null) {
              CreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(CreatureId);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MSkillAnimation : pb::IMessage<MSkillAnimation> {
    private static readonly pb::MessageParser<MSkillAnimation> _parser = new pb::MessageParser<MSkillAnimation>(() => new MSkillAnimation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MSkillAnimation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSkillAnimation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSkillAnimation(MSkillAnimation other) : this() {
      skill_ = other.skill_;
      impactCount_ = other.impactCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSkillAnimation Clone() {
      return new MSkillAnimation(this);
    }

    /// <summary>Field number for the "skill" field.</summary>
    public const int SkillFieldNumber = 1;
    private global::Magewatch.API.MSkillAnimationNumber skill_ = global::Magewatch.API.MSkillAnimationNumber.SkillUnspecified;
    /// <summary>
    /// The animation to perform
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MSkillAnimationNumber Skill {
      get { return skill_; }
      set {
        skill_ = value;
      }
    }

    /// <summary>Field number for the "impact_count" field.</summary>
    public const int ImpactCountFieldNumber = 2;
    private int impactCount_;
    /// <summary>
    /// How many times this skill is expected to reach its impact frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImpactCount {
      get { return impactCount_; }
      set {
        impactCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MSkillAnimation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MSkillAnimation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Skill != other.Skill) return false;
      if (ImpactCount != other.ImpactCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Skill != global::Magewatch.API.MSkillAnimationNumber.SkillUnspecified) hash ^= Skill.GetHashCode();
      if (ImpactCount != 0) hash ^= ImpactCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skill != global::Magewatch.API.MSkillAnimationNumber.SkillUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Skill);
      }
      if (ImpactCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ImpactCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Skill != global::Magewatch.API.MSkillAnimationNumber.SkillUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Skill);
      }
      if (ImpactCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImpactCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MSkillAnimation other) {
      if (other == null) {
        return;
      }
      if (other.Skill != global::Magewatch.API.MSkillAnimationNumber.SkillUnspecified) {
        Skill = other.Skill;
      }
      if (other.ImpactCount != 0) {
        ImpactCount = other.ImpactCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Skill = (global::Magewatch.API.MSkillAnimationNumber) input.ReadEnum();
            break;
          }
          case 16: {
            ImpactCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An effect to apply when a skill's impact event fires for the nth time
  /// </summary>
  public sealed partial class MOnImpactNumber : pb::IMessage<MOnImpactNumber> {
    private static readonly pb::MessageParser<MOnImpactNumber> _parser = new pb::MessageParser<MOnImpactNumber>(() => new MOnImpactNumber());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MOnImpactNumber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MOnImpactNumber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MOnImpactNumber(MOnImpactNumber other) : this() {
      impactNumber_ = other.impactNumber_;
      effect_ = other.effect_ != null ? other.effect_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MOnImpactNumber Clone() {
      return new MOnImpactNumber(this);
    }

    /// <summary>Field number for the "impact_number" field.</summary>
    public const int ImpactNumberFieldNumber = 1;
    private uint impactNumber_;
    /// <summary>
    /// Apply this effect when the skill has reached its impact frame
    /// 'on_impact_number' times. A value of 0 should be interpreted the same
    /// as 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImpactNumber {
      get { return impactNumber_; }
      set {
        impactNumber_ = value;
      }
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 2;
    private global::Magewatch.API.MOnImpact effect_;
    /// <summary>
    /// What to do on impact
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MOnImpact Effect {
      get { return effect_; }
      set {
        effect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MOnImpactNumber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MOnImpactNumber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImpactNumber != other.ImpactNumber) return false;
      if (!object.Equals(Effect, other.Effect)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImpactNumber != 0) hash ^= ImpactNumber.GetHashCode();
      if (effect_ != null) hash ^= Effect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImpactNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ImpactNumber);
      }
      if (effect_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Effect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImpactNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImpactNumber);
      }
      if (effect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Effect);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MOnImpactNumber other) {
      if (other == null) {
        return;
      }
      if (other.ImpactNumber != 0) {
        ImpactNumber = other.ImpactNumber;
      }
      if (other.effect_ != null) {
        if (effect_ == null) {
          Effect = new global::Magewatch.API.MOnImpact();
        }
        Effect.MergeFrom(other.Effect);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ImpactNumber = input.ReadUInt32();
            break;
          }
          case 18: {
            if (effect_ == null) {
              Effect = new global::Magewatch.API.MOnImpact();
            }
            input.ReadMessage(Effect);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// What to do when a skill or projectile reaches impact
  /// </summary>
  public sealed partial class MOnImpact : pb::IMessage<MOnImpact> {
    private static readonly pb::MessageParser<MOnImpact> _parser = new pb::MessageParser<MOnImpact>(() => new MOnImpact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MOnImpact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MOnImpact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MOnImpact(MOnImpact other) : this() {
      switch (other.OnImpactCase) {
        case OnImpactOneofCase.Update:
          Update = other.Update.Clone();
          break;
        case OnImpactOneofCase.FireProjectile:
          FireProjectile = other.FireProjectile.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MOnImpact Clone() {
      return new MOnImpact(this);
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 1;
    /// <summary>
    /// Apply an update
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MCreatureUpdate Update {
      get { return onImpactCase_ == OnImpactOneofCase.Update ? (global::Magewatch.API.MCreatureUpdate) onImpact_ : null; }
      set {
        onImpact_ = value;
        onImpactCase_ = value == null ? OnImpactOneofCase.None : OnImpactOneofCase.Update;
      }
    }

    /// <summary>Field number for the "fire_projectile" field.</summary>
    public const int FireProjectileFieldNumber = 2;
    /// <summary>
    /// Fire a projectile
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MFireProjectile FireProjectile {
      get { return onImpactCase_ == OnImpactOneofCase.FireProjectile ? (global::Magewatch.API.MFireProjectile) onImpact_ : null; }
      set {
        onImpact_ = value;
        onImpactCase_ = value == null ? OnImpactOneofCase.None : OnImpactOneofCase.FireProjectile;
      }
    }

    private object onImpact_;
    /// <summary>Enum of possible cases for the "on_impact" oneof.</summary>
    public enum OnImpactOneofCase {
      None = 0,
      Update = 1,
      FireProjectile = 2,
    }
    private OnImpactOneofCase onImpactCase_ = OnImpactOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnImpactOneofCase OnImpactCase {
      get { return onImpactCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOnImpact() {
      onImpactCase_ = OnImpactOneofCase.None;
      onImpact_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MOnImpact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MOnImpact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Update, other.Update)) return false;
      if (!object.Equals(FireProjectile, other.FireProjectile)) return false;
      if (OnImpactCase != other.OnImpactCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (onImpactCase_ == OnImpactOneofCase.Update) hash ^= Update.GetHashCode();
      if (onImpactCase_ == OnImpactOneofCase.FireProjectile) hash ^= FireProjectile.GetHashCode();
      hash ^= (int) onImpactCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (onImpactCase_ == OnImpactOneofCase.Update) {
        output.WriteRawTag(10);
        output.WriteMessage(Update);
      }
      if (onImpactCase_ == OnImpactOneofCase.FireProjectile) {
        output.WriteRawTag(18);
        output.WriteMessage(FireProjectile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (onImpactCase_ == OnImpactOneofCase.Update) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (onImpactCase_ == OnImpactOneofCase.FireProjectile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FireProjectile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MOnImpact other) {
      if (other == null) {
        return;
      }
      switch (other.OnImpactCase) {
        case OnImpactOneofCase.Update:
          if (Update == null) {
            Update = new global::Magewatch.API.MCreatureUpdate();
          }
          Update.MergeFrom(other.Update);
          break;
        case OnImpactOneofCase.FireProjectile:
          if (FireProjectile == null) {
            FireProjectile = new global::Magewatch.API.MFireProjectile();
          }
          FireProjectile.MergeFrom(other.FireProjectile);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Magewatch.API.MCreatureUpdate subBuilder = new global::Magewatch.API.MCreatureUpdate();
            if (onImpactCase_ == OnImpactOneofCase.Update) {
              subBuilder.MergeFrom(Update);
            }
            input.ReadMessage(subBuilder);
            Update = subBuilder;
            break;
          }
          case 18: {
            global::Magewatch.API.MFireProjectile subBuilder = new global::Magewatch.API.MFireProjectile();
            if (onImpactCase_ == OnImpactOneofCase.FireProjectile) {
              subBuilder.MergeFrom(FireProjectile);
            }
            input.ReadMessage(subBuilder);
            FireProjectile = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class MFireProjectile : pb::IMessage<MFireProjectile> {
    private static readonly pb::MessageParser<MFireProjectile> _parser = new pb::MessageParser<MFireProjectile>(() => new MFireProjectile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MFireProjectile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MFireProjectile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MFireProjectile(MFireProjectile other) : this() {
      creatureId_ = other.creatureId_ != null ? other.creatureId_.Clone() : null;
      projectile_ = other.projectile_ != null ? other.projectile_.Clone() : null;
      onHit_ = other.onHit_.Clone();
      switch (other.TargetCase) {
        case TargetOneofCase.TargetCreature:
          TargetCreature = other.TargetCreature.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MFireProjectile Clone() {
      return new MFireProjectile(this);
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 1;
    private global::Magewatch.API.CreatureId creatureId_;
    /// <summary>
    /// Who is firing the projectile?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    /// <summary>Field number for the "projectile" field.</summary>
    public const int ProjectileFieldNumber = 2;
    private global::Magewatch.API.Asset projectile_;
    /// <summary>
    /// Projectile Prefab to create
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.Asset Projectile {
      get { return projectile_; }
      set {
        projectile_ = value;
      }
    }

    /// <summary>Field number for the "on_hit" field.</summary>
    public const int OnHitFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Magewatch.API.MOnImpact> _repeated_onHit_codec
        = pb::FieldCodec.ForMessage(26, global::Magewatch.API.MOnImpact.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.MOnImpact> onHit_ = new pbc::RepeatedField<global::Magewatch.API.MOnImpact>();
    /// <summary>
    /// What to do when the projectile hits
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.MOnImpact> OnHit {
      get { return onHit_; }
    }

    /// <summary>Field number for the "target_creature" field.</summary>
    public const int TargetCreatureFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId TargetCreature {
      get { return targetCase_ == TargetOneofCase.TargetCreature ? (global::Magewatch.API.CreatureId) target_ : null; }
      set {
        target_ = value;
        targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.TargetCreature;
      }
    }

    private object target_;
    /// <summary>Enum of possible cases for the "target" oneof.</summary>
    public enum TargetOneofCase {
      None = 0,
      TargetCreature = 4,
    }
    private TargetOneofCase targetCase_ = TargetOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetOneofCase TargetCase {
      get { return targetCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      targetCase_ = TargetOneofCase.None;
      target_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MFireProjectile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MFireProjectile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreatureId, other.CreatureId)) return false;
      if (!object.Equals(Projectile, other.Projectile)) return false;
      if(!onHit_.Equals(other.onHit_)) return false;
      if (!object.Equals(TargetCreature, other.TargetCreature)) return false;
      if (TargetCase != other.TargetCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creatureId_ != null) hash ^= CreatureId.GetHashCode();
      if (projectile_ != null) hash ^= Projectile.GetHashCode();
      hash ^= onHit_.GetHashCode();
      if (targetCase_ == TargetOneofCase.TargetCreature) hash ^= TargetCreature.GetHashCode();
      hash ^= (int) targetCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creatureId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreatureId);
      }
      if (projectile_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Projectile);
      }
      onHit_.WriteTo(output, _repeated_onHit_codec);
      if (targetCase_ == TargetOneofCase.TargetCreature) {
        output.WriteRawTag(34);
        output.WriteMessage(TargetCreature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureId);
      }
      if (projectile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Projectile);
      }
      size += onHit_.CalculateSize(_repeated_onHit_codec);
      if (targetCase_ == TargetOneofCase.TargetCreature) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetCreature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MFireProjectile other) {
      if (other == null) {
        return;
      }
      if (other.creatureId_ != null) {
        if (creatureId_ == null) {
          CreatureId = new global::Magewatch.API.CreatureId();
        }
        CreatureId.MergeFrom(other.CreatureId);
      }
      if (other.projectile_ != null) {
        if (projectile_ == null) {
          Projectile = new global::Magewatch.API.Asset();
        }
        Projectile.MergeFrom(other.Projectile);
      }
      onHit_.Add(other.onHit_);
      switch (other.TargetCase) {
        case TargetOneofCase.TargetCreature:
          if (TargetCreature == null) {
            TargetCreature = new global::Magewatch.API.CreatureId();
          }
          TargetCreature.MergeFrom(other.TargetCreature);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creatureId_ == null) {
              CreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(CreatureId);
            break;
          }
          case 18: {
            if (projectile_ == null) {
              Projectile = new global::Magewatch.API.Asset();
            }
            input.ReadMessage(Projectile);
            break;
          }
          case 26: {
            onHit_.AddEntriesFrom(input, _repeated_onHit_codec);
            break;
          }
          case 34: {
            global::Magewatch.API.CreatureId subBuilder = new global::Magewatch.API.CreatureId();
            if (targetCase_ == TargetOneofCase.TargetCreature) {
              subBuilder.MergeFrom(TargetCreature);
            }
            input.ReadMessage(subBuilder);
            TargetCreature = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class MCreatureUpdate : pb::IMessage<MCreatureUpdate> {
    private static readonly pb::MessageParser<MCreatureUpdate> _parser = new pb::MessageParser<MCreatureUpdate>(() => new MCreatureUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MCreatureUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MCreatureUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MCreatureUpdate(MCreatureUpdate other) : this() {
      creatureId_ = other.creatureId_ != null ? other.creatureId_.Clone() : null;
      setHealthPercentage_ = other.setHealthPercentage_;
      playDeathAnimation_ = other.playDeathAnimation_;
      setManaPercentage_ = other.setManaPercentage_;
      playParticleEffects_ = other.playParticleEffects_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MCreatureUpdate Clone() {
      return new MCreatureUpdate(this);
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 1;
    private global::Magewatch.API.CreatureId creatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    /// <summary>Field number for the "set_health_percentage" field.</summary>
    public const int SetHealthPercentageFieldNumber = 2;
    private float setHealthPercentage_;
    /// <summary>
    /// Set this creature's health percentage to a specific value, given as a
    /// number between 0 and 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SetHealthPercentage {
      get { return setHealthPercentage_; }
      set {
        setHealthPercentage_ = value;
      }
    }

    /// <summary>Field number for the "play_death_animation" field.</summary>
    public const int PlayDeathAnimationFieldNumber = 3;
    private bool playDeathAnimation_;
    /// <summary>
    /// Mark this creature as dead and play its death animation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayDeathAnimation {
      get { return playDeathAnimation_; }
      set {
        playDeathAnimation_ = value;
      }
    }

    /// <summary>Field number for the "set_mana_percentage" field.</summary>
    public const int SetManaPercentageFieldNumber = 4;
    private float setManaPercentage_;
    /// <summary>
    /// Set this creature's mana percentage to a specific value, given as a
    /// number between 0 and 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SetManaPercentage {
      get { return setManaPercentage_; }
      set {
        setManaPercentage_ = value;
      }
    }

    /// <summary>Field number for the "play_particle_effects" field.</summary>
    public const int PlayParticleEffectsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Magewatch.API.Asset> _repeated_playParticleEffects_codec
        = pb::FieldCodec.ForMessage(42, global::Magewatch.API.Asset.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.Asset> playParticleEffects_ = new pbc::RepeatedField<global::Magewatch.API.Asset>();
    /// <summary>
    /// Play particle effects on this creature
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.Asset> PlayParticleEffects {
      get { return playParticleEffects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MCreatureUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MCreatureUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreatureId, other.CreatureId)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SetHealthPercentage, other.SetHealthPercentage)) return false;
      if (PlayDeathAnimation != other.PlayDeathAnimation) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SetManaPercentage, other.SetManaPercentage)) return false;
      if(!playParticleEffects_.Equals(other.playParticleEffects_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creatureId_ != null) hash ^= CreatureId.GetHashCode();
      if (SetHealthPercentage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SetHealthPercentage);
      if (PlayDeathAnimation != false) hash ^= PlayDeathAnimation.GetHashCode();
      if (SetManaPercentage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SetManaPercentage);
      hash ^= playParticleEffects_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creatureId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreatureId);
      }
      if (SetHealthPercentage != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SetHealthPercentage);
      }
      if (PlayDeathAnimation != false) {
        output.WriteRawTag(24);
        output.WriteBool(PlayDeathAnimation);
      }
      if (SetManaPercentage != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SetManaPercentage);
      }
      playParticleEffects_.WriteTo(output, _repeated_playParticleEffects_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureId);
      }
      if (SetHealthPercentage != 0F) {
        size += 1 + 4;
      }
      if (PlayDeathAnimation != false) {
        size += 1 + 1;
      }
      if (SetManaPercentage != 0F) {
        size += 1 + 4;
      }
      size += playParticleEffects_.CalculateSize(_repeated_playParticleEffects_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MCreatureUpdate other) {
      if (other == null) {
        return;
      }
      if (other.creatureId_ != null) {
        if (creatureId_ == null) {
          CreatureId = new global::Magewatch.API.CreatureId();
        }
        CreatureId.MergeFrom(other.CreatureId);
      }
      if (other.SetHealthPercentage != 0F) {
        SetHealthPercentage = other.SetHealthPercentage;
      }
      if (other.PlayDeathAnimation != false) {
        PlayDeathAnimation = other.PlayDeathAnimation;
      }
      if (other.SetManaPercentage != 0F) {
        SetManaPercentage = other.SetManaPercentage;
      }
      playParticleEffects_.Add(other.playParticleEffects_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creatureId_ == null) {
              CreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(CreatureId);
            break;
          }
          case 21: {
            SetHealthPercentage = input.ReadFloat();
            break;
          }
          case 24: {
            PlayDeathAnimation = input.ReadBool();
            break;
          }
          case 37: {
            SetManaPercentage = input.ReadFloat();
            break;
          }
          case 42: {
            playParticleEffects_.AddEntriesFrom(input, _repeated_playParticleEffects_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Updates the state of a creature
  /// </summary>
  public sealed partial class MUpdateCreatureCommand : pb::IMessage<MUpdateCreatureCommand> {
    private static readonly pb::MessageParser<MUpdateCreatureCommand> _parser = new pb::MessageParser<MUpdateCreatureCommand>(() => new MUpdateCreatureCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MUpdateCreatureCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MUpdateCreatureCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MUpdateCreatureCommand(MUpdateCreatureCommand other) : this() {
      update_ = other.update_ != null ? other.update_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MUpdateCreatureCommand Clone() {
      return new MUpdateCreatureCommand(this);
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 1;
    private global::Magewatch.API.MCreatureUpdate update_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MCreatureUpdate Update {
      get { return update_; }
      set {
        update_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MUpdateCreatureCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MUpdateCreatureCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Update, other.Update)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (update_ != null) hash ^= Update.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (update_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Update);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (update_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MUpdateCreatureCommand other) {
      if (other == null) {
        return;
      }
      if (other.update_ != null) {
        if (update_ == null) {
          Update = new global::Magewatch.API.MCreatureUpdate();
        }
        Update.MergeFrom(other.Update);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (update_ == null) {
              Update = new global::Magewatch.API.MCreatureUpdate();
            }
            input.ReadMessage(Update);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Causes creatures to use skills
  /// </summary>
  public sealed partial class MUseCreatureSkillCommand : pb::IMessage<MUseCreatureSkillCommand> {
    private static readonly pb::MessageParser<MUseCreatureSkillCommand> _parser = new pb::MessageParser<MUseCreatureSkillCommand>(() => new MUseCreatureSkillCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MUseCreatureSkillCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MUseCreatureSkillCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MUseCreatureSkillCommand(MUseCreatureSkillCommand other) : this() {
      sourceCreature_ = other.sourceCreature_ != null ? other.sourceCreature_.Clone() : null;
      animation_ = other.animation_ != null ? other.animation_.Clone() : null;
      onImpact_ = other.onImpact_.Clone();
      meleeTarget_ = other.meleeTarget_ != null ? other.meleeTarget_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MUseCreatureSkillCommand Clone() {
      return new MUseCreatureSkillCommand(this);
    }

    /// <summary>Field number for the "source_creature" field.</summary>
    public const int SourceCreatureFieldNumber = 1;
    private global::Magewatch.API.CreatureId sourceCreature_;
    /// <summary>
    /// Creature to apply these effects to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId SourceCreature {
      get { return sourceCreature_; }
      set {
        sourceCreature_ = value;
      }
    }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 2;
    private global::Magewatch.API.MSkillAnimation animation_;
    /// <summary>
    /// The skill animation to perform
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MSkillAnimation Animation {
      get { return animation_; }
      set {
        animation_ = value;
      }
    }

    /// <summary>Field number for the "on_impact" field.</summary>
    public const int OnImpactFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Magewatch.API.MOnImpactNumber> _repeated_onImpact_codec
        = pb::FieldCodec.ForMessage(26, global::Magewatch.API.MOnImpactNumber.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.MOnImpactNumber> onImpact_ = new pbc::RepeatedField<global::Magewatch.API.MOnImpactNumber>();
    /// <summary>
    /// What to do when the skill animation reaches its impact frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.MOnImpactNumber> OnImpact {
      get { return onImpact_; }
    }

    /// <summary>Field number for the "melee_target" field.</summary>
    public const int MeleeTargetFieldNumber = 4;
    private global::Magewatch.API.CreatureId meleeTarget_;
    /// <summary>
    /// Optionally, a target for this skill. The creature will move into melee
    /// range with this target before performing the skill animation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId MeleeTarget {
      get { return meleeTarget_; }
      set {
        meleeTarget_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MUseCreatureSkillCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MUseCreatureSkillCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SourceCreature, other.SourceCreature)) return false;
      if (!object.Equals(Animation, other.Animation)) return false;
      if(!onImpact_.Equals(other.onImpact_)) return false;
      if (!object.Equals(MeleeTarget, other.MeleeTarget)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sourceCreature_ != null) hash ^= SourceCreature.GetHashCode();
      if (animation_ != null) hash ^= Animation.GetHashCode();
      hash ^= onImpact_.GetHashCode();
      if (meleeTarget_ != null) hash ^= MeleeTarget.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sourceCreature_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SourceCreature);
      }
      if (animation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Animation);
      }
      onImpact_.WriteTo(output, _repeated_onImpact_codec);
      if (meleeTarget_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MeleeTarget);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sourceCreature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceCreature);
      }
      if (animation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Animation);
      }
      size += onImpact_.CalculateSize(_repeated_onImpact_codec);
      if (meleeTarget_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeleeTarget);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MUseCreatureSkillCommand other) {
      if (other == null) {
        return;
      }
      if (other.sourceCreature_ != null) {
        if (sourceCreature_ == null) {
          SourceCreature = new global::Magewatch.API.CreatureId();
        }
        SourceCreature.MergeFrom(other.SourceCreature);
      }
      if (other.animation_ != null) {
        if (animation_ == null) {
          Animation = new global::Magewatch.API.MSkillAnimation();
        }
        Animation.MergeFrom(other.Animation);
      }
      onImpact_.Add(other.onImpact_);
      if (other.meleeTarget_ != null) {
        if (meleeTarget_ == null) {
          MeleeTarget = new global::Magewatch.API.CreatureId();
        }
        MeleeTarget.MergeFrom(other.MeleeTarget);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sourceCreature_ == null) {
              SourceCreature = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(SourceCreature);
            break;
          }
          case 18: {
            if (animation_ == null) {
              Animation = new global::Magewatch.API.MSkillAnimation();
            }
            input.ReadMessage(Animation);
            break;
          }
          case 26: {
            onImpact_.AddEntriesFrom(input, _repeated_onImpact_codec);
            break;
          }
          case 34: {
            if (meleeTarget_ == null) {
              MeleeTarget = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(MeleeTarget);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Requests to destroy a card in a player's hand
  /// </summary>
  public sealed partial class MDestroyCardCommand : pb::IMessage<MDestroyCardCommand> {
    private static readonly pb::MessageParser<MDestroyCardCommand> _parser = new pb::MessageParser<MDestroyCardCommand>(() => new MDestroyCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MDestroyCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDestroyCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDestroyCardCommand(MDestroyCardCommand other) : this() {
      player_ = other.player_;
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      mustExist_ = other.mustExist_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MDestroyCardCommand Clone() {
      return new MDestroyCardCommand(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::Magewatch.API.PlayerName player_ = global::Magewatch.API.PlayerName.PlayerUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerName Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 2;
    private global::Magewatch.API.CardId cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CardId CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "must_exist" field.</summary>
    public const int MustExistFieldNumber = 3;
    private bool mustExist_;
    /// <summary>
    /// If true, it is an error for this card to not exist. Otherwise requests
    /// for cards that do not exist are ignored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MustExist {
      get { return mustExist_; }
      set {
        mustExist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MDestroyCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MDestroyCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Player != other.Player) return false;
      if (!object.Equals(CardId, other.CardId)) return false;
      if (MustExist != other.MustExist) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) hash ^= Player.GetHashCode();
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (MustExist != false) hash ^= MustExist.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Player);
      }
      if (cardId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CardId);
      }
      if (MustExist != false) {
        output.WriteRawTag(24);
        output.WriteBool(MustExist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (MustExist != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MDestroyCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        Player = other.Player;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Magewatch.API.CardId();
        }
        CardId.MergeFrom(other.CardId);
      }
      if (other.MustExist != false) {
        MustExist = other.MustExist;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Player = (global::Magewatch.API.PlayerName) input.ReadEnum();
            break;
          }
          case 18: {
            if (cardId_ == null) {
              CardId = new global::Magewatch.API.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 24: {
            MustExist = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Instructs the client to discard all previous state and begin a new game with
  /// the provided game id.
  /// </summary>
  public sealed partial class MInitiateGameCommand : pb::IMessage<MInitiateGameCommand> {
    private static readonly pb::MessageParser<MInitiateGameCommand> _parser = new pb::MessageParser<MInitiateGameCommand>(() => new MInitiateGameCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MInitiateGameCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MInitiateGameCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MInitiateGameCommand(MInitiateGameCommand other) : this() {
      newGameId_ = other.newGameId_ != null ? other.newGameId_.Clone() : null;
      initialUserState_ = other.initialUserState_ != null ? other.initialUserState_.Clone() : null;
      initialEnemyState_ = other.initialEnemyState_ != null ? other.initialEnemyState_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MInitiateGameCommand Clone() {
      return new MInitiateGameCommand(this);
    }

    /// <summary>Field number for the "new_game_id" field.</summary>
    public const int NewGameIdFieldNumber = 1;
    private global::Magewatch.API.GameId newGameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.GameId NewGameId {
      get { return newGameId_; }
      set {
        newGameId_ = value;
      }
    }

    /// <summary>Field number for the "initial_user_state" field.</summary>
    public const int InitialUserStateFieldNumber = 2;
    private global::Magewatch.API.PlayerData initialUserState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerData InitialUserState {
      get { return initialUserState_; }
      set {
        initialUserState_ = value;
      }
    }

    /// <summary>Field number for the "initial_enemy_state" field.</summary>
    public const int InitialEnemyStateFieldNumber = 3;
    private global::Magewatch.API.PlayerData initialEnemyState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerData InitialEnemyState {
      get { return initialEnemyState_; }
      set {
        initialEnemyState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MInitiateGameCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MInitiateGameCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NewGameId, other.NewGameId)) return false;
      if (!object.Equals(InitialUserState, other.InitialUserState)) return false;
      if (!object.Equals(InitialEnemyState, other.InitialEnemyState)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (newGameId_ != null) hash ^= NewGameId.GetHashCode();
      if (initialUserState_ != null) hash ^= InitialUserState.GetHashCode();
      if (initialEnemyState_ != null) hash ^= InitialEnemyState.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (newGameId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NewGameId);
      }
      if (initialUserState_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(InitialUserState);
      }
      if (initialEnemyState_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InitialEnemyState);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (newGameId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewGameId);
      }
      if (initialUserState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitialUserState);
      }
      if (initialEnemyState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitialEnemyState);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MInitiateGameCommand other) {
      if (other == null) {
        return;
      }
      if (other.newGameId_ != null) {
        if (newGameId_ == null) {
          NewGameId = new global::Magewatch.API.GameId();
        }
        NewGameId.MergeFrom(other.NewGameId);
      }
      if (other.initialUserState_ != null) {
        if (initialUserState_ == null) {
          InitialUserState = new global::Magewatch.API.PlayerData();
        }
        InitialUserState.MergeFrom(other.InitialUserState);
      }
      if (other.initialEnemyState_ != null) {
        if (initialEnemyState_ == null) {
          InitialEnemyState = new global::Magewatch.API.PlayerData();
        }
        InitialEnemyState.MergeFrom(other.InitialEnemyState);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (newGameId_ == null) {
              NewGameId = new global::Magewatch.API.GameId();
            }
            input.ReadMessage(NewGameId);
            break;
          }
          case 18: {
            if (initialUserState_ == null) {
              InitialUserState = new global::Magewatch.API.PlayerData();
            }
            input.ReadMessage(InitialUserState);
            break;
          }
          case 26: {
            if (initialEnemyState_ == null) {
              InitialEnemyState = new global::Magewatch.API.PlayerData();
            }
            input.ReadMessage(InitialEnemyState);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A single instruction to the client UI to perform some action.
  /// </summary>
  public sealed partial class Command : pb::IMessage<Command> {
    private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Command> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command(Command other) : this() {
      switch (other.CommandCase) {
        case CommandOneofCase.Wait:
          Wait = other.Wait.Clone();
          break;
        case CommandOneofCase.UpdateInterface:
          UpdateInterface = other.UpdateInterface.Clone();
          break;
        case CommandOneofCase.DrawOrUpdateCard:
          DrawOrUpdateCard = other.DrawOrUpdateCard.Clone();
          break;
        case CommandOneofCase.RevealCard:
          RevealCard = other.RevealCard.Clone();
          break;
        case CommandOneofCase.UpdatePlayer:
          UpdatePlayer = other.UpdatePlayer.Clone();
          break;
        case CommandOneofCase.CreateOrUpdateCreature:
          CreateOrUpdateCreature = other.CreateOrUpdateCreature.Clone();
          break;
        case CommandOneofCase.RemoveCreature:
          RemoveCreature = other.RemoveCreature.Clone();
          break;
        case CommandOneofCase.UpdateCreature:
          UpdateCreature = other.UpdateCreature.Clone();
          break;
        case CommandOneofCase.UseCreatureSkill:
          UseCreatureSkill = other.UseCreatureSkill.Clone();
          break;
        case CommandOneofCase.DisplayError:
          DisplayError = other.DisplayError.Clone();
          break;
        case CommandOneofCase.DestroyCard:
          DestroyCard = other.DestroyCard.Clone();
          break;
        case CommandOneofCase.InitiateGame:
          InitiateGame = other.InitiateGame.Clone();
          break;
        case CommandOneofCase.UpdateCanPlayCard:
          UpdateCanPlayCard = other.UpdateCanPlayCard.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command Clone() {
      return new Command(this);
    }

    /// <summary>Field number for the "wait" field.</summary>
    public const int WaitFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.WaitCommand Wait {
      get { return commandCase_ == CommandOneofCase.Wait ? (global::Magewatch.API.WaitCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Wait;
      }
    }

    /// <summary>Field number for the "update_interface" field.</summary>
    public const int UpdateInterfaceFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MUpdateInterfaceCommand UpdateInterface {
      get { return commandCase_ == CommandOneofCase.UpdateInterface ? (global::Magewatch.API.MUpdateInterfaceCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UpdateInterface;
      }
    }

    /// <summary>Field number for the "draw_or_update_card" field.</summary>
    public const int DrawOrUpdateCardFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MDrawOrUpdateCardCommand DrawOrUpdateCard {
      get { return commandCase_ == CommandOneofCase.DrawOrUpdateCard ? (global::Magewatch.API.MDrawOrUpdateCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DrawOrUpdateCard;
      }
    }

    /// <summary>Field number for the "reveal_card" field.</summary>
    public const int RevealCardFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RevealCardCommand RevealCard {
      get { return commandCase_ == CommandOneofCase.RevealCard ? (global::Magewatch.API.RevealCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.RevealCard;
      }
    }

    /// <summary>Field number for the "update_player" field.</summary>
    public const int UpdatePlayerFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.UpdatePlayerCommand UpdatePlayer {
      get { return commandCase_ == CommandOneofCase.UpdatePlayer ? (global::Magewatch.API.UpdatePlayerCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UpdatePlayer;
      }
    }

    /// <summary>Field number for the "create_or_update_creature" field.</summary>
    public const int CreateOrUpdateCreatureFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreateOrUpdateCreatureCommand CreateOrUpdateCreature {
      get { return commandCase_ == CommandOneofCase.CreateOrUpdateCreature ? (global::Magewatch.API.CreateOrUpdateCreatureCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CreateOrUpdateCreature;
      }
    }

    /// <summary>Field number for the "remove_creature" field.</summary>
    public const int RemoveCreatureFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RemoveCreatureCommand RemoveCreature {
      get { return commandCase_ == CommandOneofCase.RemoveCreature ? (global::Magewatch.API.RemoveCreatureCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.RemoveCreature;
      }
    }

    /// <summary>Field number for the "update_creature" field.</summary>
    public const int UpdateCreatureFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MUpdateCreatureCommand UpdateCreature {
      get { return commandCase_ == CommandOneofCase.UpdateCreature ? (global::Magewatch.API.MUpdateCreatureCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UpdateCreature;
      }
    }

    /// <summary>Field number for the "use_creature_skill" field.</summary>
    public const int UseCreatureSkillFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MUseCreatureSkillCommand UseCreatureSkill {
      get { return commandCase_ == CommandOneofCase.UseCreatureSkill ? (global::Magewatch.API.MUseCreatureSkillCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UseCreatureSkill;
      }
    }

    /// <summary>Field number for the "display_error" field.</summary>
    public const int DisplayErrorFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.DisplayErrorCommand DisplayError {
      get { return commandCase_ == CommandOneofCase.DisplayError ? (global::Magewatch.API.DisplayErrorCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DisplayError;
      }
    }

    /// <summary>Field number for the "destroy_card" field.</summary>
    public const int DestroyCardFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MDestroyCardCommand DestroyCard {
      get { return commandCase_ == CommandOneofCase.DestroyCard ? (global::Magewatch.API.MDestroyCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DestroyCard;
      }
    }

    /// <summary>Field number for the "initiate_game" field.</summary>
    public const int InitiateGameFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MInitiateGameCommand InitiateGame {
      get { return commandCase_ == CommandOneofCase.InitiateGame ? (global::Magewatch.API.MInitiateGameCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.InitiateGame;
      }
    }

    /// <summary>Field number for the "update_can_play_card" field.</summary>
    public const int UpdateCanPlayCardFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MUpdateCanPlayCardCommand UpdateCanPlayCard {
      get { return commandCase_ == CommandOneofCase.UpdateCanPlayCard ? (global::Magewatch.API.MUpdateCanPlayCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UpdateCanPlayCard;
      }
    }

    private object command_;
    /// <summary>Enum of possible cases for the "command" oneof.</summary>
    public enum CommandOneofCase {
      None = 0,
      Wait = 1,
      UpdateInterface = 2,
      DrawOrUpdateCard = 3,
      RevealCard = 4,
      UpdatePlayer = 5,
      CreateOrUpdateCreature = 6,
      RemoveCreature = 7,
      UpdateCreature = 10,
      UseCreatureSkill = 11,
      DisplayError = 12,
      DestroyCard = 13,
      InitiateGame = 14,
      UpdateCanPlayCard = 15,
    }
    private CommandOneofCase commandCase_ = CommandOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandOneofCase CommandCase {
      get { return commandCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommand() {
      commandCase_ = CommandOneofCase.None;
      command_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Command);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Wait, other.Wait)) return false;
      if (!object.Equals(UpdateInterface, other.UpdateInterface)) return false;
      if (!object.Equals(DrawOrUpdateCard, other.DrawOrUpdateCard)) return false;
      if (!object.Equals(RevealCard, other.RevealCard)) return false;
      if (!object.Equals(UpdatePlayer, other.UpdatePlayer)) return false;
      if (!object.Equals(CreateOrUpdateCreature, other.CreateOrUpdateCreature)) return false;
      if (!object.Equals(RemoveCreature, other.RemoveCreature)) return false;
      if (!object.Equals(UpdateCreature, other.UpdateCreature)) return false;
      if (!object.Equals(UseCreatureSkill, other.UseCreatureSkill)) return false;
      if (!object.Equals(DisplayError, other.DisplayError)) return false;
      if (!object.Equals(DestroyCard, other.DestroyCard)) return false;
      if (!object.Equals(InitiateGame, other.InitiateGame)) return false;
      if (!object.Equals(UpdateCanPlayCard, other.UpdateCanPlayCard)) return false;
      if (CommandCase != other.CommandCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commandCase_ == CommandOneofCase.Wait) hash ^= Wait.GetHashCode();
      if (commandCase_ == CommandOneofCase.UpdateInterface) hash ^= UpdateInterface.GetHashCode();
      if (commandCase_ == CommandOneofCase.DrawOrUpdateCard) hash ^= DrawOrUpdateCard.GetHashCode();
      if (commandCase_ == CommandOneofCase.RevealCard) hash ^= RevealCard.GetHashCode();
      if (commandCase_ == CommandOneofCase.UpdatePlayer) hash ^= UpdatePlayer.GetHashCode();
      if (commandCase_ == CommandOneofCase.CreateOrUpdateCreature) hash ^= CreateOrUpdateCreature.GetHashCode();
      if (commandCase_ == CommandOneofCase.RemoveCreature) hash ^= RemoveCreature.GetHashCode();
      if (commandCase_ == CommandOneofCase.UpdateCreature) hash ^= UpdateCreature.GetHashCode();
      if (commandCase_ == CommandOneofCase.UseCreatureSkill) hash ^= UseCreatureSkill.GetHashCode();
      if (commandCase_ == CommandOneofCase.DisplayError) hash ^= DisplayError.GetHashCode();
      if (commandCase_ == CommandOneofCase.DestroyCard) hash ^= DestroyCard.GetHashCode();
      if (commandCase_ == CommandOneofCase.InitiateGame) hash ^= InitiateGame.GetHashCode();
      if (commandCase_ == CommandOneofCase.UpdateCanPlayCard) hash ^= UpdateCanPlayCard.GetHashCode();
      hash ^= (int) commandCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commandCase_ == CommandOneofCase.Wait) {
        output.WriteRawTag(10);
        output.WriteMessage(Wait);
      }
      if (commandCase_ == CommandOneofCase.UpdateInterface) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateInterface);
      }
      if (commandCase_ == CommandOneofCase.DrawOrUpdateCard) {
        output.WriteRawTag(26);
        output.WriteMessage(DrawOrUpdateCard);
      }
      if (commandCase_ == CommandOneofCase.RevealCard) {
        output.WriteRawTag(34);
        output.WriteMessage(RevealCard);
      }
      if (commandCase_ == CommandOneofCase.UpdatePlayer) {
        output.WriteRawTag(42);
        output.WriteMessage(UpdatePlayer);
      }
      if (commandCase_ == CommandOneofCase.CreateOrUpdateCreature) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateOrUpdateCreature);
      }
      if (commandCase_ == CommandOneofCase.RemoveCreature) {
        output.WriteRawTag(58);
        output.WriteMessage(RemoveCreature);
      }
      if (commandCase_ == CommandOneofCase.UpdateCreature) {
        output.WriteRawTag(82);
        output.WriteMessage(UpdateCreature);
      }
      if (commandCase_ == CommandOneofCase.UseCreatureSkill) {
        output.WriteRawTag(90);
        output.WriteMessage(UseCreatureSkill);
      }
      if (commandCase_ == CommandOneofCase.DisplayError) {
        output.WriteRawTag(98);
        output.WriteMessage(DisplayError);
      }
      if (commandCase_ == CommandOneofCase.DestroyCard) {
        output.WriteRawTag(106);
        output.WriteMessage(DestroyCard);
      }
      if (commandCase_ == CommandOneofCase.InitiateGame) {
        output.WriteRawTag(114);
        output.WriteMessage(InitiateGame);
      }
      if (commandCase_ == CommandOneofCase.UpdateCanPlayCard) {
        output.WriteRawTag(122);
        output.WriteMessage(UpdateCanPlayCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commandCase_ == CommandOneofCase.Wait) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wait);
      }
      if (commandCase_ == CommandOneofCase.UpdateInterface) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateInterface);
      }
      if (commandCase_ == CommandOneofCase.DrawOrUpdateCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawOrUpdateCard);
      }
      if (commandCase_ == CommandOneofCase.RevealCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RevealCard);
      }
      if (commandCase_ == CommandOneofCase.UpdatePlayer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatePlayer);
      }
      if (commandCase_ == CommandOneofCase.CreateOrUpdateCreature) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateOrUpdateCreature);
      }
      if (commandCase_ == CommandOneofCase.RemoveCreature) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveCreature);
      }
      if (commandCase_ == CommandOneofCase.UpdateCreature) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateCreature);
      }
      if (commandCase_ == CommandOneofCase.UseCreatureSkill) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UseCreatureSkill);
      }
      if (commandCase_ == CommandOneofCase.DisplayError) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayError);
      }
      if (commandCase_ == CommandOneofCase.DestroyCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DestroyCard);
      }
      if (commandCase_ == CommandOneofCase.InitiateGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitiateGame);
      }
      if (commandCase_ == CommandOneofCase.UpdateCanPlayCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateCanPlayCard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Command other) {
      if (other == null) {
        return;
      }
      switch (other.CommandCase) {
        case CommandOneofCase.Wait:
          if (Wait == null) {
            Wait = new global::Magewatch.API.WaitCommand();
          }
          Wait.MergeFrom(other.Wait);
          break;
        case CommandOneofCase.UpdateInterface:
          if (UpdateInterface == null) {
            UpdateInterface = new global::Magewatch.API.MUpdateInterfaceCommand();
          }
          UpdateInterface.MergeFrom(other.UpdateInterface);
          break;
        case CommandOneofCase.DrawOrUpdateCard:
          if (DrawOrUpdateCard == null) {
            DrawOrUpdateCard = new global::Magewatch.API.MDrawOrUpdateCardCommand();
          }
          DrawOrUpdateCard.MergeFrom(other.DrawOrUpdateCard);
          break;
        case CommandOneofCase.RevealCard:
          if (RevealCard == null) {
            RevealCard = new global::Magewatch.API.RevealCardCommand();
          }
          RevealCard.MergeFrom(other.RevealCard);
          break;
        case CommandOneofCase.UpdatePlayer:
          if (UpdatePlayer == null) {
            UpdatePlayer = new global::Magewatch.API.UpdatePlayerCommand();
          }
          UpdatePlayer.MergeFrom(other.UpdatePlayer);
          break;
        case CommandOneofCase.CreateOrUpdateCreature:
          if (CreateOrUpdateCreature == null) {
            CreateOrUpdateCreature = new global::Magewatch.API.CreateOrUpdateCreatureCommand();
          }
          CreateOrUpdateCreature.MergeFrom(other.CreateOrUpdateCreature);
          break;
        case CommandOneofCase.RemoveCreature:
          if (RemoveCreature == null) {
            RemoveCreature = new global::Magewatch.API.RemoveCreatureCommand();
          }
          RemoveCreature.MergeFrom(other.RemoveCreature);
          break;
        case CommandOneofCase.UpdateCreature:
          if (UpdateCreature == null) {
            UpdateCreature = new global::Magewatch.API.MUpdateCreatureCommand();
          }
          UpdateCreature.MergeFrom(other.UpdateCreature);
          break;
        case CommandOneofCase.UseCreatureSkill:
          if (UseCreatureSkill == null) {
            UseCreatureSkill = new global::Magewatch.API.MUseCreatureSkillCommand();
          }
          UseCreatureSkill.MergeFrom(other.UseCreatureSkill);
          break;
        case CommandOneofCase.DisplayError:
          if (DisplayError == null) {
            DisplayError = new global::Magewatch.API.DisplayErrorCommand();
          }
          DisplayError.MergeFrom(other.DisplayError);
          break;
        case CommandOneofCase.DestroyCard:
          if (DestroyCard == null) {
            DestroyCard = new global::Magewatch.API.MDestroyCardCommand();
          }
          DestroyCard.MergeFrom(other.DestroyCard);
          break;
        case CommandOneofCase.InitiateGame:
          if (InitiateGame == null) {
            InitiateGame = new global::Magewatch.API.MInitiateGameCommand();
          }
          InitiateGame.MergeFrom(other.InitiateGame);
          break;
        case CommandOneofCase.UpdateCanPlayCard:
          if (UpdateCanPlayCard == null) {
            UpdateCanPlayCard = new global::Magewatch.API.MUpdateCanPlayCardCommand();
          }
          UpdateCanPlayCard.MergeFrom(other.UpdateCanPlayCard);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Magewatch.API.WaitCommand subBuilder = new global::Magewatch.API.WaitCommand();
            if (commandCase_ == CommandOneofCase.Wait) {
              subBuilder.MergeFrom(Wait);
            }
            input.ReadMessage(subBuilder);
            Wait = subBuilder;
            break;
          }
          case 18: {
            global::Magewatch.API.MUpdateInterfaceCommand subBuilder = new global::Magewatch.API.MUpdateInterfaceCommand();
            if (commandCase_ == CommandOneofCase.UpdateInterface) {
              subBuilder.MergeFrom(UpdateInterface);
            }
            input.ReadMessage(subBuilder);
            UpdateInterface = subBuilder;
            break;
          }
          case 26: {
            global::Magewatch.API.MDrawOrUpdateCardCommand subBuilder = new global::Magewatch.API.MDrawOrUpdateCardCommand();
            if (commandCase_ == CommandOneofCase.DrawOrUpdateCard) {
              subBuilder.MergeFrom(DrawOrUpdateCard);
            }
            input.ReadMessage(subBuilder);
            DrawOrUpdateCard = subBuilder;
            break;
          }
          case 34: {
            global::Magewatch.API.RevealCardCommand subBuilder = new global::Magewatch.API.RevealCardCommand();
            if (commandCase_ == CommandOneofCase.RevealCard) {
              subBuilder.MergeFrom(RevealCard);
            }
            input.ReadMessage(subBuilder);
            RevealCard = subBuilder;
            break;
          }
          case 42: {
            global::Magewatch.API.UpdatePlayerCommand subBuilder = new global::Magewatch.API.UpdatePlayerCommand();
            if (commandCase_ == CommandOneofCase.UpdatePlayer) {
              subBuilder.MergeFrom(UpdatePlayer);
            }
            input.ReadMessage(subBuilder);
            UpdatePlayer = subBuilder;
            break;
          }
          case 50: {
            global::Magewatch.API.CreateOrUpdateCreatureCommand subBuilder = new global::Magewatch.API.CreateOrUpdateCreatureCommand();
            if (commandCase_ == CommandOneofCase.CreateOrUpdateCreature) {
              subBuilder.MergeFrom(CreateOrUpdateCreature);
            }
            input.ReadMessage(subBuilder);
            CreateOrUpdateCreature = subBuilder;
            break;
          }
          case 58: {
            global::Magewatch.API.RemoveCreatureCommand subBuilder = new global::Magewatch.API.RemoveCreatureCommand();
            if (commandCase_ == CommandOneofCase.RemoveCreature) {
              subBuilder.MergeFrom(RemoveCreature);
            }
            input.ReadMessage(subBuilder);
            RemoveCreature = subBuilder;
            break;
          }
          case 82: {
            global::Magewatch.API.MUpdateCreatureCommand subBuilder = new global::Magewatch.API.MUpdateCreatureCommand();
            if (commandCase_ == CommandOneofCase.UpdateCreature) {
              subBuilder.MergeFrom(UpdateCreature);
            }
            input.ReadMessage(subBuilder);
            UpdateCreature = subBuilder;
            break;
          }
          case 90: {
            global::Magewatch.API.MUseCreatureSkillCommand subBuilder = new global::Magewatch.API.MUseCreatureSkillCommand();
            if (commandCase_ == CommandOneofCase.UseCreatureSkill) {
              subBuilder.MergeFrom(UseCreatureSkill);
            }
            input.ReadMessage(subBuilder);
            UseCreatureSkill = subBuilder;
            break;
          }
          case 98: {
            global::Magewatch.API.DisplayErrorCommand subBuilder = new global::Magewatch.API.DisplayErrorCommand();
            if (commandCase_ == CommandOneofCase.DisplayError) {
              subBuilder.MergeFrom(DisplayError);
            }
            input.ReadMessage(subBuilder);
            DisplayError = subBuilder;
            break;
          }
          case 106: {
            global::Magewatch.API.MDestroyCardCommand subBuilder = new global::Magewatch.API.MDestroyCardCommand();
            if (commandCase_ == CommandOneofCase.DestroyCard) {
              subBuilder.MergeFrom(DestroyCard);
            }
            input.ReadMessage(subBuilder);
            DestroyCard = subBuilder;
            break;
          }
          case 114: {
            global::Magewatch.API.MInitiateGameCommand subBuilder = new global::Magewatch.API.MInitiateGameCommand();
            if (commandCase_ == CommandOneofCase.InitiateGame) {
              subBuilder.MergeFrom(InitiateGame);
            }
            input.ReadMessage(subBuilder);
            InitiateGame = subBuilder;
            break;
          }
          case 122: {
            global::Magewatch.API.MUpdateCanPlayCardCommand subBuilder = new global::Magewatch.API.MUpdateCanPlayCardCommand();
            if (commandCase_ == CommandOneofCase.UpdateCanPlayCard) {
              subBuilder.MergeFrom(UpdateCanPlayCard);
            }
            input.ReadMessage(subBuilder);
            UpdateCanPlayCard = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a set of commands which should be executed in parallel,
  /// operating simultaneously. Position in the command list indicates visually
  /// which commands happen first
  /// </summary>
  public sealed partial class CommandGroup : pb::IMessage<CommandGroup> {
    private static readonly pb::MessageParser<CommandGroup> _parser = new pb::MessageParser<CommandGroup>(() => new CommandGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGroup(CommandGroup other) : this() {
      commands_ = other.commands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGroup Clone() {
      return new CommandGroup(this);
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Magewatch.API.Command> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(10, global::Magewatch.API.Command.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.Command> commands_ = new pbc::RepeatedField<global::Magewatch.API.Command>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.Command> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commands_.Equals(other.commands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commands_.WriteTo(output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandGroup other) {
      if (other == null) {
        return;
      }
      commands_.Add(other.commands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a sequence of groups of commands which should be executed in
  /// serial, one after another. Each group is completely executed before the
  /// next group begins.
  /// </summary>
  public sealed partial class CommandList : pb::IMessage<CommandList> {
    private static readonly pb::MessageParser<CommandList> _parser = new pb::MessageParser<CommandList>(() => new CommandList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandList(CommandList other) : this() {
      commandGroups_ = other.commandGroups_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandList Clone() {
      return new CommandList(this);
    }

    /// <summary>Field number for the "command_groups" field.</summary>
    public const int CommandGroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Magewatch.API.CommandGroup> _repeated_commandGroups_codec
        = pb::FieldCodec.ForMessage(10, global::Magewatch.API.CommandGroup.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.CommandGroup> commandGroups_ = new pbc::RepeatedField<global::Magewatch.API.CommandGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.CommandGroup> CommandGroups {
      get { return commandGroups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commandGroups_.Equals(other.commandGroups_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commandGroups_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commandGroups_.WriteTo(output, _repeated_commandGroups_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commandGroups_.CalculateSize(_repeated_commandGroups_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandList other) {
      if (other == null) {
        return;
      }
      commandGroups_.Add(other.commandGroups_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commandGroups_.AddEntriesFrom(input, _repeated_commandGroups_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
