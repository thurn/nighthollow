// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: api.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Magewatch.API {

  /// <summary>Holder for reflection information generated from api.proto</summary>
  public static partial class ApiReflection {

    #region Descriptor
    /// <summary>File descriptor for api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglhcGkucHJvdG8SA2FwaSIXCgZVc2VySWQSDQoFdmFsdWUYASABKAUiFwoG",
            "R2FtZUlkEg0KBXZhbHVlGAEgASgFIhsKCkNyZWF0dXJlSWQSDQoFdmFsdWUY",
            "ASABKAUiFwoGQ2FyZElkEg0KBXZhbHVlGAEgASgFIhIKEFN0YXJ0R2FtZVJl",
            "cXVlc3QiNAoUQ29ubmVjdFRvR2FtZVJlcXVlc3QSHAoHZ2FtZV9pZBgBIAEo",
            "CzILLmFwaS5HYW1lSWQiMwoTQWR2YW5jZVBoYXNlUmVxdWVzdBIcCgdnYW1l",
            "X2lkGAEgASgLMgsuYXBpLkdhbWVJZCJgChBQbGF5Q3JlYXR1cmVDYXJkEiUK",
            "DXJhbmtfcG9zaXRpb24YASABKA4yDi5hcGkuUmFua1ZhbHVlEiUKDWZpbGVf",
            "cG9zaXRpb24YAiABKA4yDi5hcGkuRmlsZVZhbHVlIjoKElBsYXlBdHRhY2ht",
            "ZW50Q2FyZBIkCgtjcmVhdHVyZV9pZBgBIAEoCzIPLmFwaS5DcmVhdHVyZUlk",
            "IhQKElBsYXlVbnRhcmdldGVkQ2FyZCLyAQoPUGxheUNhcmRSZXF1ZXN0EhwK",
            "B2dhbWVfaWQYASABKAsyCy5hcGkuR2FtZUlkEhwKB2NhcmRfaWQYAiABKAsy",
            "Cy5hcGkuQ2FyZElkEi4KDXBsYXlfY3JlYXR1cmUYAyABKAsyFS5hcGkuUGxh",
            "eUNyZWF0dXJlQ2FyZEgAEjIKD3BsYXlfYXR0YWNobWVudBgEIAEoCzIXLmFw",
            "aS5QbGF5QXR0YWNobWVudENhcmRIABIyCg9wbGF5X3VudGFyZ2V0ZWQYBSAB",
            "KAsyFy5hcGkuUGxheVVudGFyZ2V0ZWRDYXJkSABCCwoJcGxheV9jYXJkIqoB",
            "ChZDcmVhdHVyZVBvc2l0aW9uVXBkYXRlEhwKB2dhbWVfaWQYASABKAsyCy5h",
            "cGkuR2FtZUlkEiQKC2NyZWF0dXJlX2lkGAIgASgLMg8uYXBpLkNyZWF0dXJl",
            "SWQSJQoNcmFua19wb3NpdGlvbhgDIAEoDjIOLmFwaS5SYW5rVmFsdWUSJQoN",
            "ZmlsZV9wb3NpdGlvbhgEIAEoDjIOLmFwaS5GaWxlVmFsdWUicQoaUmVwb3Np",
            "dGlvbkNyZWF0dXJlc1JlcXVlc3QSHAoHZ2FtZV9pZBgBIAEoCzILLmFwaS5H",
            "YW1lSWQSNQoQcG9zaXRpb25fdXBkYXRlcxgCIAMoCzIbLmFwaS5DcmVhdHVy",
            "ZVBvc2l0aW9uVXBkYXRlIq4BChhSdW5Db25zb2xlQ29tbWFuZFJlcXVlc3QS",
            "DwoHY29tbWFuZBgBIAEoCRIcCgdnYW1lX2lkGAIgASgLMgsuYXBpLkdhbWVJ",
            "ZBIfCgZwbGF5ZXIYAyABKA4yDy5hcGkuUGxheWVyTmFtZRIkCgtjcmVhdHVy",
            "ZV9pZBgEIAEoCzIPLmFwaS5DcmVhdHVyZUlkEhwKB2NhcmRfaWQYBSABKAsy",
            "Cy5hcGkuQ2FyZElkIvICCgdSZXF1ZXN0EhwKB3VzZXJfaWQYASABKAsyCy5h",
            "cGkuVXNlcklkEisKCnN0YXJ0X2dhbWUYAiABKAsyFS5hcGkuU3RhcnRHYW1l",
            "UmVxdWVzdEgAEjQKD2Nvbm5lY3RfdG9fZ2FtZRgDIAEoCzIZLmFwaS5Db25u",
            "ZWN0VG9HYW1lUmVxdWVzdEgAEjEKDWFkdmFuY2VfcGhhc2UYBCABKAsyGC5h",
            "cGkuQWR2YW5jZVBoYXNlUmVxdWVzdEgAEikKCXBsYXlfY2FyZBgFIAEoCzIU",
            "LmFwaS5QbGF5Q2FyZFJlcXVlc3RIABI/ChRyZXBvc2l0aW9uX2NyZWF0dXJl",
            "cxgGIAEoCzIfLmFwaS5SZXBvc2l0aW9uQ3JlYXR1cmVzUmVxdWVzdEgAEjwK",
            "E3J1bl9jb25zb2xlX2NvbW1hbmQYByABKAsyHS5hcGkuUnVuQ29uc29sZUNv",
            "bW1hbmRSZXF1ZXN0SABCCQoHcmVxdWVzdCJGCglJbmZsdWVuY2USKgoOaW5m",
            "bHVlbmNlX3R5cGUYASABKA4yEi5hcGkuSW5mbHVlbmNlVHlwZRINCgV2YWx1",
            "ZRgCIAEoBSI8CgVBc3NldBIPCgdhZGRyZXNzGAEgASgJEiIKCmFzc2V0X3R5",
            "cGUYAiABKA4yDi5hcGkuQXNzZXRUeXBlIuABCgpQbGF5ZXJEYXRhEiQKC3Bs",
            "YXllcl9uYW1lGAEgASgOMg8uYXBpLlBsYXllck5hbWUSFAoMY3VycmVudF9s",
            "aWZlGAIgASgFEhQKDG1heGltdW1fbGlmZRgDIAEoBRIUCgxjdXJyZW50X21h",
            "bmEYBCABKAUSFAoMbWF4aW11bV9tYW5hGAUgASgFEikKEWN1cnJlbnRfaW5m",
            "bHVlbmNlGAYgAygLMg4uYXBpLkluZmx1ZW5jZRIpChFtYXhpbXVtX2luZmx1",
            "ZW5jZRgHIAMoCzIOLmFwaS5JbmZsdWVuY2UiCAoGTm9Db3N0IkkKDFN0YW5k",
            "YXJkQ29zdBIRCgltYW5hX2Nvc3QYASABKAUSJgoOaW5mbHVlbmNlX2Nvc3QY",
            "AiADKAsyDi5hcGkuSW5mbHVlbmNlIhgKCFJpY2hUZXh0EgwKBHRleHQYASAB",
            "KAkiKwoOQXR0YWNobWVudERhdGESGQoFaW1hZ2UYASABKAsyCi5hcGkuQXNz",
            "ZXQiEAoOVW50YXJnZXRlZERhdGEiwwMKCENhcmREYXRhEhwKB2NhcmRfaWQY",
            "ASABKAsyCy5hcGkuQ2FyZElkEhoKBnByZWZhYhgCIAEoCzIKLmFwaS5Bc3Nl",
            "dBIMCgRuYW1lGAMgASgJEh4KB25vX2Nvc3QYBCABKAsyCy5hcGkuTm9Db3N0",
            "SAASKgoNc3RhbmRhcmRfY29zdBgFIAEoCzIRLmFwaS5TdGFuZGFyZENvc3RI",
            "ABIeCgVvd25lchgGIAEoDjIPLmFwaS5QbGF5ZXJOYW1lEhkKBWltYWdlGAcg",
            "ASgLMgouYXBpLkFzc2V0EhsKBHRleHQYCCABKAsyDS5hcGkuUmljaFRleHQS",
            "EwoLaXNfcmV2ZWFsZWQYCSABKAgSFQoNY2FuX2JlX3BsYXllZBgKIAEoCBIq",
            "Cg1jcmVhdHVyZV9jYXJkGAsgASgLMhEuYXBpLkNyZWF0dXJlRGF0YUgBEi4K",
            "D2F0dGFjaG1lbnRfY2FyZBgMIAEoCzITLmFwaS5BdHRhY2htZW50RGF0YUgB",
            "Ei4KD3VudGFyZ2V0ZWRfY2FyZBgNIAEoCzITLmFwaS5VbnRhcmdldGVkRGF0",
            "YUgBQgYKBGNvc3RCCwoJY2FyZF90eXBlIoUCCgxDcmVhdHVyZURhdGESJAoL",
            "Y3JlYXR1cmVfaWQYASABKAsyDy5hcGkuQ3JlYXR1cmVJZBIaCgZwcmVmYWIY",
            "AiABKAsyCi5hcGkuQXNzZXQSHgoFb3duZXIYAyABKA4yDy5hcGkuUGxheWVy",
            "TmFtZRIlCg1yYW5rX3Bvc2l0aW9uGAQgASgOMg4uYXBpLlJhbmtWYWx1ZRIl",
            "Cg1maWxlX3Bvc2l0aW9uGAUgASgOMg4uYXBpLkZpbGVWYWx1ZRIbChNjYW5f",
            "YmVfcmVwb3NpdGlvbmVkGAYgASgIEigKC2F0dGFjaG1lbnRzGAcgAygLMhMu",
            "YXBpLkF0dGFjaG1lbnREYXRhIiQKE0Rpc3BsYXlFcnJvckNvbW1hbmQSDQoF",
            "ZXJyb3IYASABKAkiLQoLV2FpdENvbW1hbmQSHgoWd2FpdF90aW1lX21pbGxp",
            "c2Vjb25kcxgBIAEoBSJPChZVcGRhdGVJbnRlcmZhY2VDb21tYW5kEhsKE21h",
            "aW5fYnV0dG9uX2VuYWJsZWQYASABKAgSGAoQbWFpbl9idXR0b25fdGV4dBgC",
            "IAEoCSI2ChNVcGRhdGVQbGF5ZXJDb21tYW5kEh8KBnBsYXllchgBIAEoCzIP",
            "LmFwaS5QbGF5ZXJEYXRhIi4KD0RyYXdDYXJkQ29tbWFuZBIbCgRjYXJkGAEg",
            "ASgLMg0uYXBpLkNhcmREYXRhIp8BCg9QbGF5Q2FyZENvbW1hbmQSGwoEY2Fy",
            "ZBgBIAEoCzINLmFwaS5DYXJkRGF0YRIhChlyZXZlYWxfZGVsYXlfbWlsbGlz",
            "ZWNvbmRzGAIgASgFEiUKDXJhbmtfcG9zaXRpb24YAyABKA4yDi5hcGkuUmFu",
            "a1ZhbHVlEiUKDWZpbGVfcG9zaXRpb24YBCABKA4yDi5hcGkuRmlsZVZhbHVl",
            "IkQKHUNyZWF0ZU9yVXBkYXRlQ3JlYXR1cmVDb21tYW5kEiMKCGNyZWF0dXJl",
            "GAEgASgLMhEuYXBpLkNyZWF0dXJlRGF0YSI9ChVSZW1vdmVDcmVhdHVyZUNv",
            "bW1hbmQSJAoLY3JlYXR1cmVfaWQYASABKAsyDy5hcGkuQ3JlYXR1cmVJZCJn",
            "ChJNZWxlZUVuZ2FnZUNvbW1hbmQSJAoLY3JlYXR1cmVfaWQYASABKAsyDy5h",
            "cGkuQ3JlYXR1cmVJZBIrChJ0YXJnZXRfY3JlYXR1cmVfaWQYAiABKAsyDy5h",
            "cGkuQ3JlYXR1cmVJZCI5ChFBcHBseURhbWFnZUVmZmVjdBIOCgZkYW1hZ2UY",
            "ASABKAUSFAoMa2lsbHNfdGFyZ2V0GAIgASgIInUKFEZpcmVQcm9qZWN0aWxl",
            "RWZmZWN0EhoKBnByZWZhYhgBIAEoCzIKLmFwaS5Bc3NldBIsCgxhcHBseV9k",
            "YW1hZ2UYAiABKAsyFi5hcGkuQXBwbHlEYW1hZ2VFZmZlY3QSEwoLYXRfb3Bw",
            "b25lbnQYAyABKAgilgIKDUF0dGFja0NvbW1hbmQSJAoLY3JlYXR1cmVfaWQY",
            "ASABKAsyDy5hcGkuQ3JlYXR1cmVJZBIrChJ0YXJnZXRfY3JlYXR1cmVfaWQY",
            "AiABKAsyDy5hcGkuQ3JlYXR1cmVJZBIoCgVza2lsbBgDIAEoDjIZLmFwaS5T",
            "a2lsbEFuaW1hdGlvbk51bWJlchIRCgloaXRfY291bnQYBCABKAUSLgoMYXBw",
            "bHlfZGFtYWdlGAUgASgLMhYuYXBpLkFwcGx5RGFtYWdlRWZmZWN0SAASNAoP",
            "ZmlyZV9wcm9qZWN0aWxlGAYgASgLMhkuYXBpLkZpcmVQcm9qZWN0aWxlRWZm",
            "ZWN0SABCDwoNYXR0YWNrX2VmZmVjdCJRCg9NU2tpbGxBbmltYXRpb24SKAoF",
            "c2tpbGwYASABKA4yGS5hcGkuU2tpbGxBbmltYXRpb25OdW1iZXISFAoMaW1w",
            "YWN0X2NvdW50GAIgASgFIkgKD01PbkltcGFjdE51bWJlchIVCg1pbXBhY3Rf",
            "bnVtYmVyGAEgASgNEh4KBmVmZmVjdBgCIAEoCzIOLmFwaS5NT25JbXBhY3Qi",
            "cQoJTU9uSW1wYWN0EiYKBnVwZGF0ZRgBIAEoCzIULmFwaS5NQ3JlYXR1cmVV",
            "cGRhdGVIABIvCg9maXJlX3Byb2plY3RpbGUYAiABKAsyFC5hcGkuTUZpcmVQ",
            "cm9qZWN0aWxlSABCCwoJb25faW1wYWN0IocBCg9NRmlyZVByb2plY3RpbGUS",
            "HgoKcHJvamVjdGlsZRgBIAEoCzIKLmFwaS5Bc3NldBIeCgZvbl9oaXQYAiAD",
            "KAsyDi5hcGkuTU9uSW1wYWN0EioKD3RhcmdldF9jcmVhdHVyZRgDIAEoCzIP",
            "LmFwaS5DcmVhdHVyZUlkSABCCAoGdGFyZ2V0IrwBCg9NQ3JlYXR1cmVVcGRh",
            "dGUSJAoLY3JlYXR1cmVfaWQYASABKAsyDy5hcGkuQ3JlYXR1cmVJZBIdChVz",
            "ZXRfaGVhbHRoX3BlcmNlbnRhZ2UYAiABKAISHAoUcGxheV9kZWF0aF9hbmlt",
            "YXRpb24YAyABKAgSGwoTc2V0X21hbmFfcGVyY2VudGFnZRgEIAEoAhIpChVw",
            "bGF5X3BhcnRpY2xlX2VmZmVjdHMYBSADKAsyCi5hcGkuQXNzZXQiPQoVVXBk",
            "YXRlQ3JlYXR1cmVDb21tYW5kEiQKBnVwZGF0ZRgBIAEoCzIULmFwaS5NQ3Jl",
            "YXR1cmVVcGRhdGUivAEKF1VzZUNyZWF0dXJlU2tpbGxDb21tYW5kEigKD3Nv",
            "dXJjZV9jcmVhdHVyZRgBIAEoCzIPLmFwaS5DcmVhdHVyZUlkEicKCWFuaW1h",
            "dGlvbhgCIAEoCzIULmFwaS5NU2tpbGxBbmltYXRpb24SJwoJb25faW1wYWN0",
            "GAMgAygLMhQuYXBpLk1PbkltcGFjdE51bWJlchIlCgxtZWxlZV90YXJnZXQY",
            "BCABKAsyDy5hcGkuQ3JlYXR1cmVJZCL1BAoHQ29tbWFuZBIgCgR3YWl0GAEg",
            "ASgLMhAuYXBpLldhaXRDb21tYW5kSAASNwoQdXBkYXRlX2ludGVyZmFjZRgC",
            "IAEoCzIbLmFwaS5VcGRhdGVJbnRlcmZhY2VDb21tYW5kSAASKQoJZHJhd19j",
            "YXJkGAMgASgLMhQuYXBpLkRyYXdDYXJkQ29tbWFuZEgAEikKCXBsYXlfY2Fy",
            "ZBgEIAEoCzIULmFwaS5QbGF5Q2FyZENvbW1hbmRIABIxCg11cGRhdGVfcGxh",
            "eWVyGAUgASgLMhguYXBpLlVwZGF0ZVBsYXllckNvbW1hbmRIABJHChljcmVh",
            "dGVfb3JfdXBkYXRlX2NyZWF0dXJlGAYgASgLMiIuYXBpLkNyZWF0ZU9yVXBk",
            "YXRlQ3JlYXR1cmVDb21tYW5kSAASNQoPcmVtb3ZlX2NyZWF0dXJlGAcgASgL",
            "MhouYXBpLlJlbW92ZUNyZWF0dXJlQ29tbWFuZEgAEi8KDG1lbGVlX2VuZ2Fn",
            "ZRgIIAEoCzIXLmFwaS5NZWxlZUVuZ2FnZUNvbW1hbmRIABIkCgZhdHRhY2sY",
            "CSABKAsyEi5hcGkuQXR0YWNrQ29tbWFuZEgAEjUKD3VwZGF0ZV9jcmVhdHVy",
            "ZRgKIAEoCzIaLmFwaS5VcGRhdGVDcmVhdHVyZUNvbW1hbmRIABI6ChJ1c2Vf",
            "Y3JlYXR1cmVfc2tpbGwYCyABKAsyHC5hcGkuVXNlQ3JlYXR1cmVTa2lsbENv",
            "bW1hbmRIABIxCg1kaXNwbGF5X2Vycm9yGAwgASgLMhguYXBpLkRpc3BsYXlF",
            "cnJvckNvbW1hbmRIAEIJCgdjb21tYW5kIi4KDENvbW1hbmRHcm91cBIeCghj",
            "b21tYW5kcxgBIAMoCzIMLmFwaS5Db21tYW5kIjgKC0NvbW1hbmRMaXN0EikK",
            "DmNvbW1hbmRfZ3JvdXBzGAEgAygLMhEuYXBpLkNvbW1hbmRHcm91cCo5CgpQ",
            "bGF5ZXJOYW1lEhYKElBMQVlFUl9VTlNQRUNJRklFRBAAEggKBFVTRVIQARIJ",
            "CgVFTkVNWRACKmkKCVJhbmtWYWx1ZRIUChBSQU5LX1VOU1BFQ0lGSUVEEAAS",
            "CgoGUkFOS18wEAESCgoGUkFOS18xEAISCgoGUkFOS18yEAMSCgoGUkFOS18z",
            "EAQSCgoGUkFOS180EAUSCgoGUkFOS181EAYqaQoJRmlsZVZhbHVlEhQKEEZJ",
            "TEVfVU5TUEVDSUZJRUQQABIKCgZGSUxFXzAQARIKCgZGSUxFXzEQAhIKCgZG",
            "SUxFXzIQAxIKCgZGSUxFXzMQBBIKCgZGSUxFXzQQBRIKCgZGSUxFXzUQBipp",
            "Cg1JbmZsdWVuY2VUeXBlEhkKFUlORkxVRU5DRV9VTlNQRUNJRklFRBAAEgkK",
            "BUxJR0hUEAESBwoDU0tZEAISCQoFRkxBTUUQAxIHCgNJQ0UQBBIJCgVFQVJU",
            "SBAFEgoKBlNIQURPVxAGKjkKCUFzc2V0VHlwZRIUChBUWVBFX1VOU1BFQ0lG",
            "SUVEEAASCgoGUFJFRkFCEAESCgoGU1BSSVRFEAIqbgoUU2tpbGxBbmltYXRp",
            "b25OdW1iZXISFQoRU0tJTExfVU5TUEVDSUZJRUQQABILCgdTS0lMTF8xEAES",
            "CwoHU0tJTExfMhACEgsKB1NLSUxMXzMQAxILCgdTS0lMTF80EAQSCwoHU0tJ",
            "TExfNRAFQhCqAg1NYWdld2F0Y2guQVBJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Magewatch.API.PlayerName), typeof(global::Magewatch.API.RankValue), typeof(global::Magewatch.API.FileValue), typeof(global::Magewatch.API.InfluenceType), typeof(global::Magewatch.API.AssetType), typeof(global::Magewatch.API.SkillAnimationNumber), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.UserId), global::Magewatch.API.UserId.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.GameId), global::Magewatch.API.GameId.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CreatureId), global::Magewatch.API.CreatureId.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CardId), global::Magewatch.API.CardId.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.StartGameRequest), global::Magewatch.API.StartGameRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.ConnectToGameRequest), global::Magewatch.API.ConnectToGameRequest.Parser, new[]{ "GameId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.AdvancePhaseRequest), global::Magewatch.API.AdvancePhaseRequest.Parser, new[]{ "GameId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.PlayCreatureCard), global::Magewatch.API.PlayCreatureCard.Parser, new[]{ "RankPosition", "FilePosition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.PlayAttachmentCard), global::Magewatch.API.PlayAttachmentCard.Parser, new[]{ "CreatureId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.PlayUntargetedCard), global::Magewatch.API.PlayUntargetedCard.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.PlayCardRequest), global::Magewatch.API.PlayCardRequest.Parser, new[]{ "GameId", "CardId", "PlayCreature", "PlayAttachment", "PlayUntargeted" }, new[]{ "PlayCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CreaturePositionUpdate), global::Magewatch.API.CreaturePositionUpdate.Parser, new[]{ "GameId", "CreatureId", "RankPosition", "FilePosition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.RepositionCreaturesRequest), global::Magewatch.API.RepositionCreaturesRequest.Parser, new[]{ "GameId", "PositionUpdates" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.RunConsoleCommandRequest), global::Magewatch.API.RunConsoleCommandRequest.Parser, new[]{ "Command", "GameId", "Player", "CreatureId", "CardId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.Request), global::Magewatch.API.Request.Parser, new[]{ "UserId", "StartGame", "ConnectToGame", "AdvancePhase", "PlayCard", "RepositionCreatures", "RunConsoleCommand" }, new[]{ "Request" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.Influence), global::Magewatch.API.Influence.Parser, new[]{ "InfluenceType", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.Asset), global::Magewatch.API.Asset.Parser, new[]{ "Address", "AssetType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.PlayerData), global::Magewatch.API.PlayerData.Parser, new[]{ "PlayerName", "CurrentLife", "MaximumLife", "CurrentMana", "MaximumMana", "CurrentInfluence", "MaximumInfluence" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.NoCost), global::Magewatch.API.NoCost.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.StandardCost), global::Magewatch.API.StandardCost.Parser, new[]{ "ManaCost", "InfluenceCost" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.RichText), global::Magewatch.API.RichText.Parser, new[]{ "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.AttachmentData), global::Magewatch.API.AttachmentData.Parser, new[]{ "Image" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.UntargetedData), global::Magewatch.API.UntargetedData.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CardData), global::Magewatch.API.CardData.Parser, new[]{ "CardId", "Prefab", "Name", "NoCost", "StandardCost", "Owner", "Image", "Text", "IsRevealed", "CanBePlayed", "CreatureCard", "AttachmentCard", "UntargetedCard" }, new[]{ "Cost", "CardType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CreatureData), global::Magewatch.API.CreatureData.Parser, new[]{ "CreatureId", "Prefab", "Owner", "RankPosition", "FilePosition", "CanBeRepositioned", "Attachments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.DisplayErrorCommand), global::Magewatch.API.DisplayErrorCommand.Parser, new[]{ "Error" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.WaitCommand), global::Magewatch.API.WaitCommand.Parser, new[]{ "WaitTimeMilliseconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.UpdateInterfaceCommand), global::Magewatch.API.UpdateInterfaceCommand.Parser, new[]{ "MainButtonEnabled", "MainButtonText" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.UpdatePlayerCommand), global::Magewatch.API.UpdatePlayerCommand.Parser, new[]{ "Player" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.DrawCardCommand), global::Magewatch.API.DrawCardCommand.Parser, new[]{ "Card" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.PlayCardCommand), global::Magewatch.API.PlayCardCommand.Parser, new[]{ "Card", "RevealDelayMilliseconds", "RankPosition", "FilePosition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CreateOrUpdateCreatureCommand), global::Magewatch.API.CreateOrUpdateCreatureCommand.Parser, new[]{ "Creature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.RemoveCreatureCommand), global::Magewatch.API.RemoveCreatureCommand.Parser, new[]{ "CreatureId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MeleeEngageCommand), global::Magewatch.API.MeleeEngageCommand.Parser, new[]{ "CreatureId", "TargetCreatureId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.ApplyDamageEffect), global::Magewatch.API.ApplyDamageEffect.Parser, new[]{ "Damage", "KillsTarget" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.FireProjectileEffect), global::Magewatch.API.FireProjectileEffect.Parser, new[]{ "Prefab", "ApplyDamage", "AtOpponent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.AttackCommand), global::Magewatch.API.AttackCommand.Parser, new[]{ "CreatureId", "TargetCreatureId", "Skill", "HitCount", "ApplyDamage", "FireProjectile" }, new[]{ "AttackEffect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MSkillAnimation), global::Magewatch.API.MSkillAnimation.Parser, new[]{ "Skill", "ImpactCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MOnImpactNumber), global::Magewatch.API.MOnImpactNumber.Parser, new[]{ "ImpactNumber", "Effect" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MOnImpact), global::Magewatch.API.MOnImpact.Parser, new[]{ "Update", "FireProjectile" }, new[]{ "OnImpact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MFireProjectile), global::Magewatch.API.MFireProjectile.Parser, new[]{ "Projectile", "OnHit", "TargetCreature" }, new[]{ "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.MCreatureUpdate), global::Magewatch.API.MCreatureUpdate.Parser, new[]{ "CreatureId", "SetHealthPercentage", "PlayDeathAnimation", "SetManaPercentage", "PlayParticleEffects" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.UpdateCreatureCommand), global::Magewatch.API.UpdateCreatureCommand.Parser, new[]{ "Update" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.UseCreatureSkillCommand), global::Magewatch.API.UseCreatureSkillCommand.Parser, new[]{ "SourceCreature", "Animation", "OnImpact", "MeleeTarget" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.Command), global::Magewatch.API.Command.Parser, new[]{ "Wait", "UpdateInterface", "DrawCard", "PlayCard", "UpdatePlayer", "CreateOrUpdateCreature", "RemoveCreature", "MeleeEngage", "Attack", "UpdateCreature", "UseCreatureSkill", "DisplayError" }, new[]{ "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CommandGroup), global::Magewatch.API.CommandGroup.Parser, new[]{ "Commands" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Magewatch.API.CommandList), global::Magewatch.API.CommandList.Parser, new[]{ "CommandGroups" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PlayerName {
    [pbr::OriginalName("PLAYER_UNSPECIFIED")] PlayerUnspecified = 0,
    [pbr::OriginalName("USER")] User = 1,
    [pbr::OriginalName("ENEMY")] Enemy = 2,
  }

  public enum RankValue {
    [pbr::OriginalName("RANK_UNSPECIFIED")] RankUnspecified = 0,
    [pbr::OriginalName("RANK_0")] Rank0 = 1,
    [pbr::OriginalName("RANK_1")] Rank1 = 2,
    [pbr::OriginalName("RANK_2")] Rank2 = 3,
    [pbr::OriginalName("RANK_3")] Rank3 = 4,
    [pbr::OriginalName("RANK_4")] Rank4 = 5,
    [pbr::OriginalName("RANK_5")] Rank5 = 6,
  }

  public enum FileValue {
    [pbr::OriginalName("FILE_UNSPECIFIED")] FileUnspecified = 0,
    [pbr::OriginalName("FILE_0")] File0 = 1,
    [pbr::OriginalName("FILE_1")] File1 = 2,
    [pbr::OriginalName("FILE_2")] File2 = 3,
    [pbr::OriginalName("FILE_3")] File3 = 4,
    [pbr::OriginalName("FILE_4")] File4 = 5,
    [pbr::OriginalName("FILE_5")] File5 = 6,
  }

  public enum InfluenceType {
    [pbr::OriginalName("INFLUENCE_UNSPECIFIED")] InfluenceUnspecified = 0,
    [pbr::OriginalName("LIGHT")] Light = 1,
    [pbr::OriginalName("SKY")] Sky = 2,
    [pbr::OriginalName("FLAME")] Flame = 3,
    [pbr::OriginalName("ICE")] Ice = 4,
    [pbr::OriginalName("EARTH")] Earth = 5,
    [pbr::OriginalName("SHADOW")] Shadow = 6,
  }

  public enum AssetType {
    [pbr::OriginalName("TYPE_UNSPECIFIED")] TypeUnspecified = 0,
    [pbr::OriginalName("PREFAB")] Prefab = 1,
    [pbr::OriginalName("SPRITE")] Sprite = 2,
  }

  public enum SkillAnimationNumber {
    [pbr::OriginalName("SKILL_UNSPECIFIED")] SkillUnspecified = 0,
    [pbr::OriginalName("SKILL_1")] Skill1 = 1,
    [pbr::OriginalName("SKILL_2")] Skill2 = 2,
    [pbr::OriginalName("SKILL_3")] Skill3 = 3,
    [pbr::OriginalName("SKILL_4")] Skill4 = 4,
    [pbr::OriginalName("SKILL_5")] Skill5 = 5,
  }

  #endregion

  #region Messages
  public sealed partial class UserId : pb::IMessage<UserId> {
    private static readonly pb::MessageParser<UserId> _parser = new pb::MessageParser<UserId>(() => new UserId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserId(UserId other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserId Clone() {
      return new UserId(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserId other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameId : pb::IMessage<GameId> {
    private static readonly pb::MessageParser<GameId> _parser = new pb::MessageParser<GameId>(() => new GameId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameId(GameId other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameId Clone() {
      return new GameId(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameId other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreatureId : pb::IMessage<CreatureId> {
    private static readonly pb::MessageParser<CreatureId> _parser = new pb::MessageParser<CreatureId>(() => new CreatureId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatureId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureId(CreatureId other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureId Clone() {
      return new CreatureId(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatureId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatureId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatureId other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CardId : pb::IMessage<CardId> {
    private static readonly pb::MessageParser<CardId> _parser = new pb::MessageParser<CardId>(() => new CardId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardId(CardId other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardId Clone() {
      return new CardId(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardId other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Requests to start a new game with a new game ID. The client should discard
  /// all previous state when sending this request.
  /// </summary>
  public sealed partial class StartGameRequest : pb::IMessage<StartGameRequest> {
    private static readonly pb::MessageParser<StartGameRequest> _parser = new pb::MessageParser<StartGameRequest>(() => new StartGameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameRequest(StartGameRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartGameRequest Clone() {
      return new StartGameRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartGameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartGameRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Requests to load the current state of a game. The client should discard
  /// all previous state when sending this request.
  /// </summary>
  public sealed partial class ConnectToGameRequest : pb::IMessage<ConnectToGameRequest> {
    private static readonly pb::MessageParser<ConnectToGameRequest> _parser = new pb::MessageParser<ConnectToGameRequest>(() => new ConnectToGameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectToGameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToGameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToGameRequest(ConnectToGameRequest other) : this() {
      gameId_ = other.gameId_ != null ? other.gameId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToGameRequest Clone() {
      return new ConnectToGameRequest(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private global::Magewatch.API.GameId gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.GameId GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectToGameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectToGameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameId, other.GameId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameId_ != null) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectToGameRequest other) {
      if (other == null) {
        return;
      }
      if (other.gameId_ != null) {
        if (gameId_ == null) {
          GameId = new global::Magewatch.API.GameId();
        }
        GameId.MergeFrom(other.GameId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameId_ == null) {
              GameId = new global::Magewatch.API.GameId();
            }
            input.ReadMessage(GameId);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Advance the game to the next phase
  /// </summary>
  public sealed partial class AdvancePhaseRequest : pb::IMessage<AdvancePhaseRequest> {
    private static readonly pb::MessageParser<AdvancePhaseRequest> _parser = new pb::MessageParser<AdvancePhaseRequest>(() => new AdvancePhaseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdvancePhaseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvancePhaseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvancePhaseRequest(AdvancePhaseRequest other) : this() {
      gameId_ = other.gameId_ != null ? other.gameId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvancePhaseRequest Clone() {
      return new AdvancePhaseRequest(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private global::Magewatch.API.GameId gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.GameId GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdvancePhaseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdvancePhaseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameId, other.GameId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameId_ != null) hash ^= GameId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdvancePhaseRequest other) {
      if (other == null) {
        return;
      }
      if (other.gameId_ != null) {
        if (gameId_ == null) {
          GameId = new global::Magewatch.API.GameId();
        }
        GameId.MergeFrom(other.GameId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameId_ == null) {
              GameId = new global::Magewatch.API.GameId();
            }
            input.ReadMessage(GameId);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Play a creature card at a given position
  /// </summary>
  public sealed partial class PlayCreatureCard : pb::IMessage<PlayCreatureCard> {
    private static readonly pb::MessageParser<PlayCreatureCard> _parser = new pb::MessageParser<PlayCreatureCard>(() => new PlayCreatureCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayCreatureCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCreatureCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCreatureCard(PlayCreatureCard other) : this() {
      rankPosition_ = other.rankPosition_;
      filePosition_ = other.filePosition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCreatureCard Clone() {
      return new PlayCreatureCard(this);
    }

    /// <summary>Field number for the "rank_position" field.</summary>
    public const int RankPositionFieldNumber = 1;
    private global::Magewatch.API.RankValue rankPosition_ = global::Magewatch.API.RankValue.RankUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RankValue RankPosition {
      get { return rankPosition_; }
      set {
        rankPosition_ = value;
      }
    }

    /// <summary>Field number for the "file_position" field.</summary>
    public const int FilePositionFieldNumber = 2;
    private global::Magewatch.API.FileValue filePosition_ = global::Magewatch.API.FileValue.FileUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.FileValue FilePosition {
      get { return filePosition_; }
      set {
        filePosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayCreatureCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayCreatureCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RankPosition != other.RankPosition) return false;
      if (FilePosition != other.FilePosition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) hash ^= RankPosition.GetHashCode();
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) hash ^= FilePosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) FilePosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FilePosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayCreatureCard other) {
      if (other == null) {
        return;
      }
      if (other.RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        RankPosition = other.RankPosition;
      }
      if (other.FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        FilePosition = other.FilePosition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RankPosition = (global::Magewatch.API.RankValue) input.ReadEnum();
            break;
          }
          case 16: {
            FilePosition = (global::Magewatch.API.FileValue) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Play an attachment card on a given creature
  /// </summary>
  public sealed partial class PlayAttachmentCard : pb::IMessage<PlayAttachmentCard> {
    private static readonly pb::MessageParser<PlayAttachmentCard> _parser = new pb::MessageParser<PlayAttachmentCard>(() => new PlayAttachmentCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayAttachmentCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayAttachmentCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayAttachmentCard(PlayAttachmentCard other) : this() {
      creatureId_ = other.creatureId_ != null ? other.creatureId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayAttachmentCard Clone() {
      return new PlayAttachmentCard(this);
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 1;
    private global::Magewatch.API.CreatureId creatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayAttachmentCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayAttachmentCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreatureId, other.CreatureId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creatureId_ != null) hash ^= CreatureId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creatureId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreatureId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayAttachmentCard other) {
      if (other == null) {
        return;
      }
      if (other.creatureId_ != null) {
        if (creatureId_ == null) {
          CreatureId = new global::Magewatch.API.CreatureId();
        }
        CreatureId.MergeFrom(other.CreatureId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creatureId_ == null) {
              CreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(CreatureId);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Play a card which does not require targeting
  /// </summary>
  public sealed partial class PlayUntargetedCard : pb::IMessage<PlayUntargetedCard> {
    private static readonly pb::MessageParser<PlayUntargetedCard> _parser = new pb::MessageParser<PlayUntargetedCard>(() => new PlayUntargetedCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayUntargetedCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayUntargetedCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayUntargetedCard(PlayUntargetedCard other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayUntargetedCard Clone() {
      return new PlayUntargetedCard(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayUntargetedCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayUntargetedCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayUntargetedCard other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Play a card from the user's hand
  /// </summary>
  public sealed partial class PlayCardRequest : pb::IMessage<PlayCardRequest> {
    private static readonly pb::MessageParser<PlayCardRequest> _parser = new pb::MessageParser<PlayCardRequest>(() => new PlayCardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayCardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardRequest(PlayCardRequest other) : this() {
      gameId_ = other.gameId_ != null ? other.gameId_.Clone() : null;
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      switch (other.PlayCardCase) {
        case PlayCardOneofCase.PlayCreature:
          PlayCreature = other.PlayCreature.Clone();
          break;
        case PlayCardOneofCase.PlayAttachment:
          PlayAttachment = other.PlayAttachment.Clone();
          break;
        case PlayCardOneofCase.PlayUntargeted:
          PlayUntargeted = other.PlayUntargeted.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardRequest Clone() {
      return new PlayCardRequest(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private global::Magewatch.API.GameId gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.GameId GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 2;
    private global::Magewatch.API.CardId cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CardId CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "play_creature" field.</summary>
    public const int PlayCreatureFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayCreatureCard PlayCreature {
      get { return playCardCase_ == PlayCardOneofCase.PlayCreature ? (global::Magewatch.API.PlayCreatureCard) playCard_ : null; }
      set {
        playCard_ = value;
        playCardCase_ = value == null ? PlayCardOneofCase.None : PlayCardOneofCase.PlayCreature;
      }
    }

    /// <summary>Field number for the "play_attachment" field.</summary>
    public const int PlayAttachmentFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayAttachmentCard PlayAttachment {
      get { return playCardCase_ == PlayCardOneofCase.PlayAttachment ? (global::Magewatch.API.PlayAttachmentCard) playCard_ : null; }
      set {
        playCard_ = value;
        playCardCase_ = value == null ? PlayCardOneofCase.None : PlayCardOneofCase.PlayAttachment;
      }
    }

    /// <summary>Field number for the "play_untargeted" field.</summary>
    public const int PlayUntargetedFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayUntargetedCard PlayUntargeted {
      get { return playCardCase_ == PlayCardOneofCase.PlayUntargeted ? (global::Magewatch.API.PlayUntargetedCard) playCard_ : null; }
      set {
        playCard_ = value;
        playCardCase_ = value == null ? PlayCardOneofCase.None : PlayCardOneofCase.PlayUntargeted;
      }
    }

    private object playCard_;
    /// <summary>Enum of possible cases for the "play_card" oneof.</summary>
    public enum PlayCardOneofCase {
      None = 0,
      PlayCreature = 3,
      PlayAttachment = 4,
      PlayUntargeted = 5,
    }
    private PlayCardOneofCase playCardCase_ = PlayCardOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardOneofCase PlayCardCase {
      get { return playCardCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayCard() {
      playCardCase_ = PlayCardOneofCase.None;
      playCard_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayCardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayCardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameId, other.GameId)) return false;
      if (!object.Equals(CardId, other.CardId)) return false;
      if (!object.Equals(PlayCreature, other.PlayCreature)) return false;
      if (!object.Equals(PlayAttachment, other.PlayAttachment)) return false;
      if (!object.Equals(PlayUntargeted, other.PlayUntargeted)) return false;
      if (PlayCardCase != other.PlayCardCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameId_ != null) hash ^= GameId.GetHashCode();
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (playCardCase_ == PlayCardOneofCase.PlayCreature) hash ^= PlayCreature.GetHashCode();
      if (playCardCase_ == PlayCardOneofCase.PlayAttachment) hash ^= PlayAttachment.GetHashCode();
      if (playCardCase_ == PlayCardOneofCase.PlayUntargeted) hash ^= PlayUntargeted.GetHashCode();
      hash ^= (int) playCardCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameId);
      }
      if (cardId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CardId);
      }
      if (playCardCase_ == PlayCardOneofCase.PlayCreature) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayCreature);
      }
      if (playCardCase_ == PlayCardOneofCase.PlayAttachment) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayAttachment);
      }
      if (playCardCase_ == PlayCardOneofCase.PlayUntargeted) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayUntargeted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameId);
      }
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (playCardCase_ == PlayCardOneofCase.PlayCreature) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayCreature);
      }
      if (playCardCase_ == PlayCardOneofCase.PlayAttachment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayAttachment);
      }
      if (playCardCase_ == PlayCardOneofCase.PlayUntargeted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayUntargeted);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayCardRequest other) {
      if (other == null) {
        return;
      }
      if (other.gameId_ != null) {
        if (gameId_ == null) {
          GameId = new global::Magewatch.API.GameId();
        }
        GameId.MergeFrom(other.GameId);
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Magewatch.API.CardId();
        }
        CardId.MergeFrom(other.CardId);
      }
      switch (other.PlayCardCase) {
        case PlayCardOneofCase.PlayCreature:
          if (PlayCreature == null) {
            PlayCreature = new global::Magewatch.API.PlayCreatureCard();
          }
          PlayCreature.MergeFrom(other.PlayCreature);
          break;
        case PlayCardOneofCase.PlayAttachment:
          if (PlayAttachment == null) {
            PlayAttachment = new global::Magewatch.API.PlayAttachmentCard();
          }
          PlayAttachment.MergeFrom(other.PlayAttachment);
          break;
        case PlayCardOneofCase.PlayUntargeted:
          if (PlayUntargeted == null) {
            PlayUntargeted = new global::Magewatch.API.PlayUntargetedCard();
          }
          PlayUntargeted.MergeFrom(other.PlayUntargeted);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameId_ == null) {
              GameId = new global::Magewatch.API.GameId();
            }
            input.ReadMessage(GameId);
            break;
          }
          case 18: {
            if (cardId_ == null) {
              CardId = new global::Magewatch.API.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 26: {
            global::Magewatch.API.PlayCreatureCard subBuilder = new global::Magewatch.API.PlayCreatureCard();
            if (playCardCase_ == PlayCardOneofCase.PlayCreature) {
              subBuilder.MergeFrom(PlayCreature);
            }
            input.ReadMessage(subBuilder);
            PlayCreature = subBuilder;
            break;
          }
          case 34: {
            global::Magewatch.API.PlayAttachmentCard subBuilder = new global::Magewatch.API.PlayAttachmentCard();
            if (playCardCase_ == PlayCardOneofCase.PlayAttachment) {
              subBuilder.MergeFrom(PlayAttachment);
            }
            input.ReadMessage(subBuilder);
            PlayAttachment = subBuilder;
            break;
          }
          case 42: {
            global::Magewatch.API.PlayUntargetedCard subBuilder = new global::Magewatch.API.PlayUntargetedCard();
            if (playCardCase_ == PlayCardOneofCase.PlayUntargeted) {
              subBuilder.MergeFrom(PlayUntargeted);
            }
            input.ReadMessage(subBuilder);
            PlayUntargeted = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreaturePositionUpdate : pb::IMessage<CreaturePositionUpdate> {
    private static readonly pb::MessageParser<CreaturePositionUpdate> _parser = new pb::MessageParser<CreaturePositionUpdate>(() => new CreaturePositionUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreaturePositionUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreaturePositionUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreaturePositionUpdate(CreaturePositionUpdate other) : this() {
      gameId_ = other.gameId_ != null ? other.gameId_.Clone() : null;
      creatureId_ = other.creatureId_ != null ? other.creatureId_.Clone() : null;
      rankPosition_ = other.rankPosition_;
      filePosition_ = other.filePosition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreaturePositionUpdate Clone() {
      return new CreaturePositionUpdate(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private global::Magewatch.API.GameId gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.GameId GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 2;
    private global::Magewatch.API.CreatureId creatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    /// <summary>Field number for the "rank_position" field.</summary>
    public const int RankPositionFieldNumber = 3;
    private global::Magewatch.API.RankValue rankPosition_ = global::Magewatch.API.RankValue.RankUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RankValue RankPosition {
      get { return rankPosition_; }
      set {
        rankPosition_ = value;
      }
    }

    /// <summary>Field number for the "file_position" field.</summary>
    public const int FilePositionFieldNumber = 4;
    private global::Magewatch.API.FileValue filePosition_ = global::Magewatch.API.FileValue.FileUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.FileValue FilePosition {
      get { return filePosition_; }
      set {
        filePosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreaturePositionUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreaturePositionUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameId, other.GameId)) return false;
      if (!object.Equals(CreatureId, other.CreatureId)) return false;
      if (RankPosition != other.RankPosition) return false;
      if (FilePosition != other.FilePosition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameId_ != null) hash ^= GameId.GetHashCode();
      if (creatureId_ != null) hash ^= CreatureId.GetHashCode();
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) hash ^= RankPosition.GetHashCode();
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) hash ^= FilePosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameId);
      }
      if (creatureId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreatureId);
      }
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) FilePosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameId);
      }
      if (creatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureId);
      }
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FilePosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreaturePositionUpdate other) {
      if (other == null) {
        return;
      }
      if (other.gameId_ != null) {
        if (gameId_ == null) {
          GameId = new global::Magewatch.API.GameId();
        }
        GameId.MergeFrom(other.GameId);
      }
      if (other.creatureId_ != null) {
        if (creatureId_ == null) {
          CreatureId = new global::Magewatch.API.CreatureId();
        }
        CreatureId.MergeFrom(other.CreatureId);
      }
      if (other.RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        RankPosition = other.RankPosition;
      }
      if (other.FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        FilePosition = other.FilePosition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameId_ == null) {
              GameId = new global::Magewatch.API.GameId();
            }
            input.ReadMessage(GameId);
            break;
          }
          case 18: {
            if (creatureId_ == null) {
              CreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(CreatureId);
            break;
          }
          case 24: {
            RankPosition = (global::Magewatch.API.RankValue) input.ReadEnum();
            break;
          }
          case 32: {
            FilePosition = (global::Magewatch.API.FileValue) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RepositionCreaturesRequest : pb::IMessage<RepositionCreaturesRequest> {
    private static readonly pb::MessageParser<RepositionCreaturesRequest> _parser = new pb::MessageParser<RepositionCreaturesRequest>(() => new RepositionCreaturesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RepositionCreaturesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepositionCreaturesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepositionCreaturesRequest(RepositionCreaturesRequest other) : this() {
      gameId_ = other.gameId_ != null ? other.gameId_.Clone() : null;
      positionUpdates_ = other.positionUpdates_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RepositionCreaturesRequest Clone() {
      return new RepositionCreaturesRequest(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private global::Magewatch.API.GameId gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.GameId GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "position_updates" field.</summary>
    public const int PositionUpdatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Magewatch.API.CreaturePositionUpdate> _repeated_positionUpdates_codec
        = pb::FieldCodec.ForMessage(18, global::Magewatch.API.CreaturePositionUpdate.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.CreaturePositionUpdate> positionUpdates_ = new pbc::RepeatedField<global::Magewatch.API.CreaturePositionUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.CreaturePositionUpdate> PositionUpdates {
      get { return positionUpdates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RepositionCreaturesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RepositionCreaturesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameId, other.GameId)) return false;
      if(!positionUpdates_.Equals(other.positionUpdates_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameId_ != null) hash ^= GameId.GetHashCode();
      hash ^= positionUpdates_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gameId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameId);
      }
      positionUpdates_.WriteTo(output, _repeated_positionUpdates_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameId);
      }
      size += positionUpdates_.CalculateSize(_repeated_positionUpdates_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RepositionCreaturesRequest other) {
      if (other == null) {
        return;
      }
      if (other.gameId_ != null) {
        if (gameId_ == null) {
          GameId = new global::Magewatch.API.GameId();
        }
        GameId.MergeFrom(other.GameId);
      }
      positionUpdates_.Add(other.positionUpdates_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameId_ == null) {
              GameId = new global::Magewatch.API.GameId();
            }
            input.ReadMessage(GameId);
            break;
          }
          case 18: {
            positionUpdates_.AddEntriesFrom(input, _repeated_positionUpdates_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RunConsoleCommandRequest : pb::IMessage<RunConsoleCommandRequest> {
    private static readonly pb::MessageParser<RunConsoleCommandRequest> _parser = new pb::MessageParser<RunConsoleCommandRequest>(() => new RunConsoleCommandRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunConsoleCommandRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunConsoleCommandRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunConsoleCommandRequest(RunConsoleCommandRequest other) : this() {
      command_ = other.command_;
      gameId_ = other.gameId_ != null ? other.gameId_.Clone() : null;
      player_ = other.player_;
      creatureId_ = other.creatureId_ != null ? other.creatureId_.Clone() : null;
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunConsoleCommandRequest Clone() {
      return new RunConsoleCommandRequest(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private string command_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 2;
    private global::Magewatch.API.GameId gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.GameId GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 3;
    private global::Magewatch.API.PlayerName player_ = global::Magewatch.API.PlayerName.PlayerUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerName Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 4;
    private global::Magewatch.API.CreatureId creatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 5;
    private global::Magewatch.API.CardId cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CardId CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunConsoleCommandRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunConsoleCommandRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if (!object.Equals(GameId, other.GameId)) return false;
      if (Player != other.Player) return false;
      if (!object.Equals(CreatureId, other.CreatureId)) return false;
      if (!object.Equals(CardId, other.CardId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command.Length != 0) hash ^= Command.GetHashCode();
      if (gameId_ != null) hash ^= GameId.GetHashCode();
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) hash ^= Player.GetHashCode();
      if (creatureId_ != null) hash ^= CreatureId.GetHashCode();
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Command);
      }
      if (gameId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GameId);
      }
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Player);
      }
      if (creatureId_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CreatureId);
      }
      if (cardId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CardId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Command);
      }
      if (gameId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameId);
      }
      if (Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      if (creatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureId);
      }
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunConsoleCommandRequest other) {
      if (other == null) {
        return;
      }
      if (other.Command.Length != 0) {
        Command = other.Command;
      }
      if (other.gameId_ != null) {
        if (gameId_ == null) {
          GameId = new global::Magewatch.API.GameId();
        }
        GameId.MergeFrom(other.GameId);
      }
      if (other.Player != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        Player = other.Player;
      }
      if (other.creatureId_ != null) {
        if (creatureId_ == null) {
          CreatureId = new global::Magewatch.API.CreatureId();
        }
        CreatureId.MergeFrom(other.CreatureId);
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Magewatch.API.CardId();
        }
        CardId.MergeFrom(other.CardId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Command = input.ReadString();
            break;
          }
          case 18: {
            if (gameId_ == null) {
              GameId = new global::Magewatch.API.GameId();
            }
            input.ReadMessage(GameId);
            break;
          }
          case 24: {
            Player = (global::Magewatch.API.PlayerName) input.ReadEnum();
            break;
          }
          case 34: {
            if (creatureId_ == null) {
              CreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(CreatureId);
            break;
          }
          case 42: {
            if (cardId_ == null) {
              CardId = new global::Magewatch.API.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Data sent to the server whenever the user does something in the game's user
  /// interface
  /// </summary>
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      userId_ = other.userId_ != null ? other.userId_.Clone() : null;
      switch (other.RequestCase) {
        case RequestOneofCase.StartGame:
          StartGame = other.StartGame.Clone();
          break;
        case RequestOneofCase.ConnectToGame:
          ConnectToGame = other.ConnectToGame.Clone();
          break;
        case RequestOneofCase.AdvancePhase:
          AdvancePhase = other.AdvancePhase.Clone();
          break;
        case RequestOneofCase.PlayCard:
          PlayCard = other.PlayCard.Clone();
          break;
        case RequestOneofCase.RepositionCreatures:
          RepositionCreatures = other.RepositionCreatures.Clone();
          break;
        case RequestOneofCase.RunConsoleCommand:
          RunConsoleCommand = other.RunConsoleCommand.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private global::Magewatch.API.UserId userId_;
    /// <summary>
    /// Identifies the user making this request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.UserId UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "start_game" field.</summary>
    public const int StartGameFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.StartGameRequest StartGame {
      get { return requestCase_ == RequestOneofCase.StartGame ? (global::Magewatch.API.StartGameRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.StartGame;
      }
    }

    /// <summary>Field number for the "connect_to_game" field.</summary>
    public const int ConnectToGameFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.ConnectToGameRequest ConnectToGame {
      get { return requestCase_ == RequestOneofCase.ConnectToGame ? (global::Magewatch.API.ConnectToGameRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.ConnectToGame;
      }
    }

    /// <summary>Field number for the "advance_phase" field.</summary>
    public const int AdvancePhaseFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.AdvancePhaseRequest AdvancePhase {
      get { return requestCase_ == RequestOneofCase.AdvancePhase ? (global::Magewatch.API.AdvancePhaseRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.AdvancePhase;
      }
    }

    /// <summary>Field number for the "play_card" field.</summary>
    public const int PlayCardFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayCardRequest PlayCard {
      get { return requestCase_ == RequestOneofCase.PlayCard ? (global::Magewatch.API.PlayCardRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.PlayCard;
      }
    }

    /// <summary>Field number for the "reposition_creatures" field.</summary>
    public const int RepositionCreaturesFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RepositionCreaturesRequest RepositionCreatures {
      get { return requestCase_ == RequestOneofCase.RepositionCreatures ? (global::Magewatch.API.RepositionCreaturesRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.RepositionCreatures;
      }
    }

    /// <summary>Field number for the "run_console_command" field.</summary>
    public const int RunConsoleCommandFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RunConsoleCommandRequest RunConsoleCommand {
      get { return requestCase_ == RequestOneofCase.RunConsoleCommand ? (global::Magewatch.API.RunConsoleCommandRequest) request_ : null; }
      set {
        request_ = value;
        requestCase_ = value == null ? RequestOneofCase.None : RequestOneofCase.RunConsoleCommand;
      }
    }

    private object request_;
    /// <summary>Enum of possible cases for the "request" oneof.</summary>
    public enum RequestOneofCase {
      None = 0,
      StartGame = 2,
      ConnectToGame = 3,
      AdvancePhase = 4,
      PlayCard = 5,
      RepositionCreatures = 6,
      RunConsoleCommand = 7,
    }
    private RequestOneofCase requestCase_ = RequestOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestOneofCase RequestCase {
      get { return requestCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRequest() {
      requestCase_ = RequestOneofCase.None;
      request_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserId, other.UserId)) return false;
      if (!object.Equals(StartGame, other.StartGame)) return false;
      if (!object.Equals(ConnectToGame, other.ConnectToGame)) return false;
      if (!object.Equals(AdvancePhase, other.AdvancePhase)) return false;
      if (!object.Equals(PlayCard, other.PlayCard)) return false;
      if (!object.Equals(RepositionCreatures, other.RepositionCreatures)) return false;
      if (!object.Equals(RunConsoleCommand, other.RunConsoleCommand)) return false;
      if (RequestCase != other.RequestCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userId_ != null) hash ^= UserId.GetHashCode();
      if (requestCase_ == RequestOneofCase.StartGame) hash ^= StartGame.GetHashCode();
      if (requestCase_ == RequestOneofCase.ConnectToGame) hash ^= ConnectToGame.GetHashCode();
      if (requestCase_ == RequestOneofCase.AdvancePhase) hash ^= AdvancePhase.GetHashCode();
      if (requestCase_ == RequestOneofCase.PlayCard) hash ^= PlayCard.GetHashCode();
      if (requestCase_ == RequestOneofCase.RepositionCreatures) hash ^= RepositionCreatures.GetHashCode();
      if (requestCase_ == RequestOneofCase.RunConsoleCommand) hash ^= RunConsoleCommand.GetHashCode();
      hash ^= (int) requestCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserId);
      }
      if (requestCase_ == RequestOneofCase.StartGame) {
        output.WriteRawTag(18);
        output.WriteMessage(StartGame);
      }
      if (requestCase_ == RequestOneofCase.ConnectToGame) {
        output.WriteRawTag(26);
        output.WriteMessage(ConnectToGame);
      }
      if (requestCase_ == RequestOneofCase.AdvancePhase) {
        output.WriteRawTag(34);
        output.WriteMessage(AdvancePhase);
      }
      if (requestCase_ == RequestOneofCase.PlayCard) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayCard);
      }
      if (requestCase_ == RequestOneofCase.RepositionCreatures) {
        output.WriteRawTag(50);
        output.WriteMessage(RepositionCreatures);
      }
      if (requestCase_ == RequestOneofCase.RunConsoleCommand) {
        output.WriteRawTag(58);
        output.WriteMessage(RunConsoleCommand);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserId);
      }
      if (requestCase_ == RequestOneofCase.StartGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartGame);
      }
      if (requestCase_ == RequestOneofCase.ConnectToGame) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectToGame);
      }
      if (requestCase_ == RequestOneofCase.AdvancePhase) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdvancePhase);
      }
      if (requestCase_ == RequestOneofCase.PlayCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayCard);
      }
      if (requestCase_ == RequestOneofCase.RepositionCreatures) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RepositionCreatures);
      }
      if (requestCase_ == RequestOneofCase.RunConsoleCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RunConsoleCommand);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.userId_ != null) {
        if (userId_ == null) {
          UserId = new global::Magewatch.API.UserId();
        }
        UserId.MergeFrom(other.UserId);
      }
      switch (other.RequestCase) {
        case RequestOneofCase.StartGame:
          if (StartGame == null) {
            StartGame = new global::Magewatch.API.StartGameRequest();
          }
          StartGame.MergeFrom(other.StartGame);
          break;
        case RequestOneofCase.ConnectToGame:
          if (ConnectToGame == null) {
            ConnectToGame = new global::Magewatch.API.ConnectToGameRequest();
          }
          ConnectToGame.MergeFrom(other.ConnectToGame);
          break;
        case RequestOneofCase.AdvancePhase:
          if (AdvancePhase == null) {
            AdvancePhase = new global::Magewatch.API.AdvancePhaseRequest();
          }
          AdvancePhase.MergeFrom(other.AdvancePhase);
          break;
        case RequestOneofCase.PlayCard:
          if (PlayCard == null) {
            PlayCard = new global::Magewatch.API.PlayCardRequest();
          }
          PlayCard.MergeFrom(other.PlayCard);
          break;
        case RequestOneofCase.RepositionCreatures:
          if (RepositionCreatures == null) {
            RepositionCreatures = new global::Magewatch.API.RepositionCreaturesRequest();
          }
          RepositionCreatures.MergeFrom(other.RepositionCreatures);
          break;
        case RequestOneofCase.RunConsoleCommand:
          if (RunConsoleCommand == null) {
            RunConsoleCommand = new global::Magewatch.API.RunConsoleCommandRequest();
          }
          RunConsoleCommand.MergeFrom(other.RunConsoleCommand);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userId_ == null) {
              UserId = new global::Magewatch.API.UserId();
            }
            input.ReadMessage(UserId);
            break;
          }
          case 18: {
            global::Magewatch.API.StartGameRequest subBuilder = new global::Magewatch.API.StartGameRequest();
            if (requestCase_ == RequestOneofCase.StartGame) {
              subBuilder.MergeFrom(StartGame);
            }
            input.ReadMessage(subBuilder);
            StartGame = subBuilder;
            break;
          }
          case 26: {
            global::Magewatch.API.ConnectToGameRequest subBuilder = new global::Magewatch.API.ConnectToGameRequest();
            if (requestCase_ == RequestOneofCase.ConnectToGame) {
              subBuilder.MergeFrom(ConnectToGame);
            }
            input.ReadMessage(subBuilder);
            ConnectToGame = subBuilder;
            break;
          }
          case 34: {
            global::Magewatch.API.AdvancePhaseRequest subBuilder = new global::Magewatch.API.AdvancePhaseRequest();
            if (requestCase_ == RequestOneofCase.AdvancePhase) {
              subBuilder.MergeFrom(AdvancePhase);
            }
            input.ReadMessage(subBuilder);
            AdvancePhase = subBuilder;
            break;
          }
          case 42: {
            global::Magewatch.API.PlayCardRequest subBuilder = new global::Magewatch.API.PlayCardRequest();
            if (requestCase_ == RequestOneofCase.PlayCard) {
              subBuilder.MergeFrom(PlayCard);
            }
            input.ReadMessage(subBuilder);
            PlayCard = subBuilder;
            break;
          }
          case 50: {
            global::Magewatch.API.RepositionCreaturesRequest subBuilder = new global::Magewatch.API.RepositionCreaturesRequest();
            if (requestCase_ == RequestOneofCase.RepositionCreatures) {
              subBuilder.MergeFrom(RepositionCreatures);
            }
            input.ReadMessage(subBuilder);
            RepositionCreatures = subBuilder;
            break;
          }
          case 58: {
            global::Magewatch.API.RunConsoleCommandRequest subBuilder = new global::Magewatch.API.RunConsoleCommandRequest();
            if (requestCase_ == RequestOneofCase.RunConsoleCommand) {
              subBuilder.MergeFrom(RunConsoleCommand);
            }
            input.ReadMessage(subBuilder);
            RunConsoleCommand = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Influence : pb::IMessage<Influence> {
    private static readonly pb::MessageParser<Influence> _parser = new pb::MessageParser<Influence>(() => new Influence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Influence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Influence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Influence(Influence other) : this() {
      influenceType_ = other.influenceType_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Influence Clone() {
      return new Influence(this);
    }

    /// <summary>Field number for the "influence_type" field.</summary>
    public const int InfluenceTypeFieldNumber = 1;
    private global::Magewatch.API.InfluenceType influenceType_ = global::Magewatch.API.InfluenceType.InfluenceUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.InfluenceType InfluenceType {
      get { return influenceType_; }
      set {
        influenceType_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Influence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Influence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InfluenceType != other.InfluenceType) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InfluenceType != global::Magewatch.API.InfluenceType.InfluenceUnspecified) hash ^= InfluenceType.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InfluenceType != global::Magewatch.API.InfluenceType.InfluenceUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) InfluenceType);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InfluenceType != global::Magewatch.API.InfluenceType.InfluenceUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InfluenceType);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Influence other) {
      if (other == null) {
        return;
      }
      if (other.InfluenceType != global::Magewatch.API.InfluenceType.InfluenceUnspecified) {
        InfluenceType = other.InfluenceType;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            InfluenceType = (global::Magewatch.API.InfluenceType) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Asset : pb::IMessage<Asset> {
    private static readonly pb::MessageParser<Asset> _parser = new pb::MessageParser<Asset>(() => new Asset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Asset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset(Asset other) : this() {
      address_ = other.address_;
      assetType_ = other.assetType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Asset Clone() {
      return new Asset(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "asset_type" field.</summary>
    public const int AssetTypeFieldNumber = 2;
    private global::Magewatch.API.AssetType assetType_ = global::Magewatch.API.AssetType.TypeUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.AssetType AssetType {
      get { return assetType_; }
      set {
        assetType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Asset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Asset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (AssetType != other.AssetType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (AssetType != global::Magewatch.API.AssetType.TypeUnspecified) hash ^= AssetType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (AssetType != global::Magewatch.API.AssetType.TypeUnspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AssetType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (AssetType != global::Magewatch.API.AssetType.TypeUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AssetType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Asset other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.AssetType != global::Magewatch.API.AssetType.TypeUnspecified) {
        AssetType = other.AssetType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            AssetType = (global::Magewatch.API.AssetType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// There are two players in a game named "user" and "enemy". The term
  /// "opponent" can be used to contextually refer to either player
  /// </summary>
  public sealed partial class PlayerData : pb::IMessage<PlayerData> {
    private static readonly pb::MessageParser<PlayerData> _parser = new pb::MessageParser<PlayerData>(() => new PlayerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData(PlayerData other) : this() {
      playerName_ = other.playerName_;
      currentLife_ = other.currentLife_;
      maximumLife_ = other.maximumLife_;
      currentMana_ = other.currentMana_;
      maximumMana_ = other.maximumMana_;
      currentInfluence_ = other.currentInfluence_.Clone();
      maximumInfluence_ = other.maximumInfluence_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData Clone() {
      return new PlayerData(this);
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 1;
    private global::Magewatch.API.PlayerName playerName_ = global::Magewatch.API.PlayerName.PlayerUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerName PlayerName {
      get { return playerName_; }
      set {
        playerName_ = value;
      }
    }

    /// <summary>Field number for the "current_life" field.</summary>
    public const int CurrentLifeFieldNumber = 2;
    private int currentLife_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentLife {
      get { return currentLife_; }
      set {
        currentLife_ = value;
      }
    }

    /// <summary>Field number for the "maximum_life" field.</summary>
    public const int MaximumLifeFieldNumber = 3;
    private int maximumLife_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaximumLife {
      get { return maximumLife_; }
      set {
        maximumLife_ = value;
      }
    }

    /// <summary>Field number for the "current_mana" field.</summary>
    public const int CurrentManaFieldNumber = 4;
    private int currentMana_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentMana {
      get { return currentMana_; }
      set {
        currentMana_ = value;
      }
    }

    /// <summary>Field number for the "maximum_mana" field.</summary>
    public const int MaximumManaFieldNumber = 5;
    private int maximumMana_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaximumMana {
      get { return maximumMana_; }
      set {
        maximumMana_ = value;
      }
    }

    /// <summary>Field number for the "current_influence" field.</summary>
    public const int CurrentInfluenceFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Magewatch.API.Influence> _repeated_currentInfluence_codec
        = pb::FieldCodec.ForMessage(50, global::Magewatch.API.Influence.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.Influence> currentInfluence_ = new pbc::RepeatedField<global::Magewatch.API.Influence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.Influence> CurrentInfluence {
      get { return currentInfluence_; }
    }

    /// <summary>Field number for the "maximum_influence" field.</summary>
    public const int MaximumInfluenceFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Magewatch.API.Influence> _repeated_maximumInfluence_codec
        = pb::FieldCodec.ForMessage(58, global::Magewatch.API.Influence.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.Influence> maximumInfluence_ = new pbc::RepeatedField<global::Magewatch.API.Influence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.Influence> MaximumInfluence {
      get { return maximumInfluence_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerName != other.PlayerName) return false;
      if (CurrentLife != other.CurrentLife) return false;
      if (MaximumLife != other.MaximumLife) return false;
      if (CurrentMana != other.CurrentMana) return false;
      if (MaximumMana != other.MaximumMana) return false;
      if(!currentInfluence_.Equals(other.currentInfluence_)) return false;
      if(!maximumInfluence_.Equals(other.maximumInfluence_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerName != global::Magewatch.API.PlayerName.PlayerUnspecified) hash ^= PlayerName.GetHashCode();
      if (CurrentLife != 0) hash ^= CurrentLife.GetHashCode();
      if (MaximumLife != 0) hash ^= MaximumLife.GetHashCode();
      if (CurrentMana != 0) hash ^= CurrentMana.GetHashCode();
      if (MaximumMana != 0) hash ^= MaximumMana.GetHashCode();
      hash ^= currentInfluence_.GetHashCode();
      hash ^= maximumInfluence_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerName != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PlayerName);
      }
      if (CurrentLife != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentLife);
      }
      if (MaximumLife != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaximumLife);
      }
      if (CurrentMana != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentMana);
      }
      if (MaximumMana != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaximumMana);
      }
      currentInfluence_.WriteTo(output, _repeated_currentInfluence_codec);
      maximumInfluence_.WriteTo(output, _repeated_maximumInfluence_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerName != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlayerName);
      }
      if (CurrentLife != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentLife);
      }
      if (MaximumLife != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumLife);
      }
      if (CurrentMana != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentMana);
      }
      if (MaximumMana != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumMana);
      }
      size += currentInfluence_.CalculateSize(_repeated_currentInfluence_codec);
      size += maximumInfluence_.CalculateSize(_repeated_maximumInfluence_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerData other) {
      if (other == null) {
        return;
      }
      if (other.PlayerName != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        PlayerName = other.PlayerName;
      }
      if (other.CurrentLife != 0) {
        CurrentLife = other.CurrentLife;
      }
      if (other.MaximumLife != 0) {
        MaximumLife = other.MaximumLife;
      }
      if (other.CurrentMana != 0) {
        CurrentMana = other.CurrentMana;
      }
      if (other.MaximumMana != 0) {
        MaximumMana = other.MaximumMana;
      }
      currentInfluence_.Add(other.currentInfluence_);
      maximumInfluence_.Add(other.maximumInfluence_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerName = (global::Magewatch.API.PlayerName) input.ReadEnum();
            break;
          }
          case 16: {
            CurrentLife = input.ReadInt32();
            break;
          }
          case 24: {
            MaximumLife = input.ReadInt32();
            break;
          }
          case 32: {
            CurrentMana = input.ReadInt32();
            break;
          }
          case 40: {
            MaximumMana = input.ReadInt32();
            break;
          }
          case 50: {
            currentInfluence_.AddEntriesFrom(input, _repeated_currentInfluence_codec);
            break;
          }
          case 58: {
            maximumInfluence_.AddEntriesFrom(input, _repeated_maximumInfluence_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoCost : pb::IMessage<NoCost> {
    private static readonly pb::MessageParser<NoCost> _parser = new pb::MessageParser<NoCost>(() => new NoCost());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoCost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoCost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoCost(NoCost other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoCost Clone() {
      return new NoCost(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoCost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoCost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoCost other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class StandardCost : pb::IMessage<StandardCost> {
    private static readonly pb::MessageParser<StandardCost> _parser = new pb::MessageParser<StandardCost>(() => new StandardCost());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StandardCost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardCost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardCost(StandardCost other) : this() {
      manaCost_ = other.manaCost_;
      influenceCost_ = other.influenceCost_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardCost Clone() {
      return new StandardCost(this);
    }

    /// <summary>Field number for the "mana_cost" field.</summary>
    public const int ManaCostFieldNumber = 1;
    private int manaCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ManaCost {
      get { return manaCost_; }
      set {
        manaCost_ = value;
      }
    }

    /// <summary>Field number for the "influence_cost" field.</summary>
    public const int InfluenceCostFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Magewatch.API.Influence> _repeated_influenceCost_codec
        = pb::FieldCodec.ForMessage(18, global::Magewatch.API.Influence.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.Influence> influenceCost_ = new pbc::RepeatedField<global::Magewatch.API.Influence>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.Influence> InfluenceCost {
      get { return influenceCost_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StandardCost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StandardCost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ManaCost != other.ManaCost) return false;
      if(!influenceCost_.Equals(other.influenceCost_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ManaCost != 0) hash ^= ManaCost.GetHashCode();
      hash ^= influenceCost_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ManaCost != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ManaCost);
      }
      influenceCost_.WriteTo(output, _repeated_influenceCost_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ManaCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ManaCost);
      }
      size += influenceCost_.CalculateSize(_repeated_influenceCost_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StandardCost other) {
      if (other == null) {
        return;
      }
      if (other.ManaCost != 0) {
        ManaCost = other.ManaCost;
      }
      influenceCost_.Add(other.influenceCost_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ManaCost = input.ReadInt32();
            break;
          }
          case 18: {
            influenceCost_.AddEntriesFrom(input, _repeated_influenceCost_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RichText : pb::IMessage<RichText> {
    private static readonly pb::MessageParser<RichText> _parser = new pb::MessageParser<RichText>(() => new RichText());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RichText> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RichText() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RichText(RichText other) : this() {
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RichText Clone() {
      return new RichText(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RichText);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RichText other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RichText other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttachmentData : pb::IMessage<AttachmentData> {
    private static readonly pb::MessageParser<AttachmentData> _parser = new pb::MessageParser<AttachmentData>(() => new AttachmentData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachmentData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentData(AttachmentData other) : this() {
      image_ = other.image_ != null ? other.image_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentData Clone() {
      return new AttachmentData(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private global::Magewatch.API.Asset image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.Asset Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachmentData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachmentData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Image, other.Image)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (image_ != null) hash ^= Image.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (image_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Image);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachmentData other) {
      if (other == null) {
        return;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Magewatch.API.Asset();
        }
        Image.MergeFrom(other.Image);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (image_ == null) {
              Image = new global::Magewatch.API.Asset();
            }
            input.ReadMessage(Image);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UntargetedData : pb::IMessage<UntargetedData> {
    private static readonly pb::MessageParser<UntargetedData> _parser = new pb::MessageParser<UntargetedData>(() => new UntargetedData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UntargetedData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UntargetedData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UntargetedData(UntargetedData other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UntargetedData Clone() {
      return new UntargetedData(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UntargetedData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UntargetedData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UntargetedData other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CardData : pb::IMessage<CardData> {
    private static readonly pb::MessageParser<CardData> _parser = new pb::MessageParser<CardData>(() => new CardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardData(CardData other) : this() {
      cardId_ = other.cardId_ != null ? other.cardId_.Clone() : null;
      prefab_ = other.prefab_ != null ? other.prefab_.Clone() : null;
      name_ = other.name_;
      owner_ = other.owner_;
      image_ = other.image_ != null ? other.image_.Clone() : null;
      text_ = other.text_ != null ? other.text_.Clone() : null;
      isRevealed_ = other.isRevealed_;
      canBePlayed_ = other.canBePlayed_;
      switch (other.CostCase) {
        case CostOneofCase.NoCost:
          NoCost = other.NoCost.Clone();
          break;
        case CostOneofCase.StandardCost:
          StandardCost = other.StandardCost.Clone();
          break;
      }

      switch (other.CardTypeCase) {
        case CardTypeOneofCase.CreatureCard:
          CreatureCard = other.CreatureCard.Clone();
          break;
        case CardTypeOneofCase.AttachmentCard:
          AttachmentCard = other.AttachmentCard.Clone();
          break;
        case CardTypeOneofCase.UntargetedCard:
          UntargetedCard = other.UntargetedCard.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardData Clone() {
      return new CardData(this);
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private global::Magewatch.API.CardId cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CardId CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "prefab" field.</summary>
    public const int PrefabFieldNumber = 2;
    private global::Magewatch.API.Asset prefab_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.Asset Prefab {
      get { return prefab_; }
      set {
        prefab_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "no_cost" field.</summary>
    public const int NoCostFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.NoCost NoCost {
      get { return costCase_ == CostOneofCase.NoCost ? (global::Magewatch.API.NoCost) cost_ : null; }
      set {
        cost_ = value;
        costCase_ = value == null ? CostOneofCase.None : CostOneofCase.NoCost;
      }
    }

    /// <summary>Field number for the "standard_cost" field.</summary>
    public const int StandardCostFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.StandardCost StandardCost {
      get { return costCase_ == CostOneofCase.StandardCost ? (global::Magewatch.API.StandardCost) cost_ : null; }
      set {
        cost_ = value;
        costCase_ = value == null ? CostOneofCase.None : CostOneofCase.StandardCost;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 6;
    private global::Magewatch.API.PlayerName owner_ = global::Magewatch.API.PlayerName.PlayerUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 7;
    private global::Magewatch.API.Asset image_;
    /// <summary>
    /// Sprite to display as the card image
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.Asset Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 8;
    private global::Magewatch.API.RichText text_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RichText Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "is_revealed" field.</summary>
    public const int IsRevealedFieldNumber = 9;
    private bool isRevealed_;
    /// <summary>
    /// Should this card be shown face-up?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRevealed {
      get { return isRevealed_; }
      set {
        isRevealed_ = value;
      }
    }

    /// <summary>Field number for the "can_be_played" field.</summary>
    public const int CanBePlayedFieldNumber = 10;
    private bool canBePlayed_;
    /// <summary>
    /// Can the user play this card? i.e. does it have a valid target and can the
    /// user pay its costs?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanBePlayed {
      get { return canBePlayed_; }
      set {
        canBePlayed_ = value;
      }
    }

    /// <summary>Field number for the "creature_card" field.</summary>
    public const int CreatureCardFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureData CreatureCard {
      get { return cardTypeCase_ == CardTypeOneofCase.CreatureCard ? (global::Magewatch.API.CreatureData) cardType_ : null; }
      set {
        cardType_ = value;
        cardTypeCase_ = value == null ? CardTypeOneofCase.None : CardTypeOneofCase.CreatureCard;
      }
    }

    /// <summary>Field number for the "attachment_card" field.</summary>
    public const int AttachmentCardFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.AttachmentData AttachmentCard {
      get { return cardTypeCase_ == CardTypeOneofCase.AttachmentCard ? (global::Magewatch.API.AttachmentData) cardType_ : null; }
      set {
        cardType_ = value;
        cardTypeCase_ = value == null ? CardTypeOneofCase.None : CardTypeOneofCase.AttachmentCard;
      }
    }

    /// <summary>Field number for the "untargeted_card" field.</summary>
    public const int UntargetedCardFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.UntargetedData UntargetedCard {
      get { return cardTypeCase_ == CardTypeOneofCase.UntargetedCard ? (global::Magewatch.API.UntargetedData) cardType_ : null; }
      set {
        cardType_ = value;
        cardTypeCase_ = value == null ? CardTypeOneofCase.None : CardTypeOneofCase.UntargetedCard;
      }
    }

    private object cost_;
    /// <summary>Enum of possible cases for the "cost" oneof.</summary>
    public enum CostOneofCase {
      None = 0,
      NoCost = 4,
      StandardCost = 5,
    }
    private CostOneofCase costCase_ = CostOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CostOneofCase CostCase {
      get { return costCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCost() {
      costCase_ = CostOneofCase.None;
      cost_ = null;
    }

    private object cardType_;
    /// <summary>Enum of possible cases for the "card_type" oneof.</summary>
    public enum CardTypeOneofCase {
      None = 0,
      CreatureCard = 11,
      AttachmentCard = 12,
      UntargetedCard = 13,
    }
    private CardTypeOneofCase cardTypeCase_ = CardTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardTypeOneofCase CardTypeCase {
      get { return cardTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCardType() {
      cardTypeCase_ = CardTypeOneofCase.None;
      cardType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CardId, other.CardId)) return false;
      if (!object.Equals(Prefab, other.Prefab)) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(NoCost, other.NoCost)) return false;
      if (!object.Equals(StandardCost, other.StandardCost)) return false;
      if (Owner != other.Owner) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(Text, other.Text)) return false;
      if (IsRevealed != other.IsRevealed) return false;
      if (CanBePlayed != other.CanBePlayed) return false;
      if (!object.Equals(CreatureCard, other.CreatureCard)) return false;
      if (!object.Equals(AttachmentCard, other.AttachmentCard)) return false;
      if (!object.Equals(UntargetedCard, other.UntargetedCard)) return false;
      if (CostCase != other.CostCase) return false;
      if (CardTypeCase != other.CardTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (cardId_ != null) hash ^= CardId.GetHashCode();
      if (prefab_ != null) hash ^= Prefab.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (costCase_ == CostOneofCase.NoCost) hash ^= NoCost.GetHashCode();
      if (costCase_ == CostOneofCase.StandardCost) hash ^= StandardCost.GetHashCode();
      if (Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) hash ^= Owner.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      if (text_ != null) hash ^= Text.GetHashCode();
      if (IsRevealed != false) hash ^= IsRevealed.GetHashCode();
      if (CanBePlayed != false) hash ^= CanBePlayed.GetHashCode();
      if (cardTypeCase_ == CardTypeOneofCase.CreatureCard) hash ^= CreatureCard.GetHashCode();
      if (cardTypeCase_ == CardTypeOneofCase.AttachmentCard) hash ^= AttachmentCard.GetHashCode();
      if (cardTypeCase_ == CardTypeOneofCase.UntargetedCard) hash ^= UntargetedCard.GetHashCode();
      hash ^= (int) costCase_;
      hash ^= (int) cardTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cardId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CardId);
      }
      if (prefab_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Prefab);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (costCase_ == CostOneofCase.NoCost) {
        output.WriteRawTag(34);
        output.WriteMessage(NoCost);
      }
      if (costCase_ == CostOneofCase.StandardCost) {
        output.WriteRawTag(42);
        output.WriteMessage(StandardCost);
      }
      if (Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Owner);
      }
      if (image_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Image);
      }
      if (text_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Text);
      }
      if (IsRevealed != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsRevealed);
      }
      if (CanBePlayed != false) {
        output.WriteRawTag(80);
        output.WriteBool(CanBePlayed);
      }
      if (cardTypeCase_ == CardTypeOneofCase.CreatureCard) {
        output.WriteRawTag(90);
        output.WriteMessage(CreatureCard);
      }
      if (cardTypeCase_ == CardTypeOneofCase.AttachmentCard) {
        output.WriteRawTag(98);
        output.WriteMessage(AttachmentCard);
      }
      if (cardTypeCase_ == CardTypeOneofCase.UntargetedCard) {
        output.WriteRawTag(106);
        output.WriteMessage(UntargetedCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cardId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardId);
      }
      if (prefab_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prefab);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (costCase_ == CostOneofCase.NoCost) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NoCost);
      }
      if (costCase_ == CostOneofCase.StandardCost) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StandardCost);
      }
      if (Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (IsRevealed != false) {
        size += 1 + 1;
      }
      if (CanBePlayed != false) {
        size += 1 + 1;
      }
      if (cardTypeCase_ == CardTypeOneofCase.CreatureCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureCard);
      }
      if (cardTypeCase_ == CardTypeOneofCase.AttachmentCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttachmentCard);
      }
      if (cardTypeCase_ == CardTypeOneofCase.UntargetedCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UntargetedCard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardData other) {
      if (other == null) {
        return;
      }
      if (other.cardId_ != null) {
        if (cardId_ == null) {
          CardId = new global::Magewatch.API.CardId();
        }
        CardId.MergeFrom(other.CardId);
      }
      if (other.prefab_ != null) {
        if (prefab_ == null) {
          Prefab = new global::Magewatch.API.Asset();
        }
        Prefab.MergeFrom(other.Prefab);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        Owner = other.Owner;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          Image = new global::Magewatch.API.Asset();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.text_ != null) {
        if (text_ == null) {
          Text = new global::Magewatch.API.RichText();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.IsRevealed != false) {
        IsRevealed = other.IsRevealed;
      }
      if (other.CanBePlayed != false) {
        CanBePlayed = other.CanBePlayed;
      }
      switch (other.CostCase) {
        case CostOneofCase.NoCost:
          if (NoCost == null) {
            NoCost = new global::Magewatch.API.NoCost();
          }
          NoCost.MergeFrom(other.NoCost);
          break;
        case CostOneofCase.StandardCost:
          if (StandardCost == null) {
            StandardCost = new global::Magewatch.API.StandardCost();
          }
          StandardCost.MergeFrom(other.StandardCost);
          break;
      }

      switch (other.CardTypeCase) {
        case CardTypeOneofCase.CreatureCard:
          if (CreatureCard == null) {
            CreatureCard = new global::Magewatch.API.CreatureData();
          }
          CreatureCard.MergeFrom(other.CreatureCard);
          break;
        case CardTypeOneofCase.AttachmentCard:
          if (AttachmentCard == null) {
            AttachmentCard = new global::Magewatch.API.AttachmentData();
          }
          AttachmentCard.MergeFrom(other.AttachmentCard);
          break;
        case CardTypeOneofCase.UntargetedCard:
          if (UntargetedCard == null) {
            UntargetedCard = new global::Magewatch.API.UntargetedData();
          }
          UntargetedCard.MergeFrom(other.UntargetedCard);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (cardId_ == null) {
              CardId = new global::Magewatch.API.CardId();
            }
            input.ReadMessage(CardId);
            break;
          }
          case 18: {
            if (prefab_ == null) {
              Prefab = new global::Magewatch.API.Asset();
            }
            input.ReadMessage(Prefab);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            global::Magewatch.API.NoCost subBuilder = new global::Magewatch.API.NoCost();
            if (costCase_ == CostOneofCase.NoCost) {
              subBuilder.MergeFrom(NoCost);
            }
            input.ReadMessage(subBuilder);
            NoCost = subBuilder;
            break;
          }
          case 42: {
            global::Magewatch.API.StandardCost subBuilder = new global::Magewatch.API.StandardCost();
            if (costCase_ == CostOneofCase.StandardCost) {
              subBuilder.MergeFrom(StandardCost);
            }
            input.ReadMessage(subBuilder);
            StandardCost = subBuilder;
            break;
          }
          case 48: {
            Owner = (global::Magewatch.API.PlayerName) input.ReadEnum();
            break;
          }
          case 58: {
            if (image_ == null) {
              Image = new global::Magewatch.API.Asset();
            }
            input.ReadMessage(Image);
            break;
          }
          case 66: {
            if (text_ == null) {
              Text = new global::Magewatch.API.RichText();
            }
            input.ReadMessage(Text);
            break;
          }
          case 72: {
            IsRevealed = input.ReadBool();
            break;
          }
          case 80: {
            CanBePlayed = input.ReadBool();
            break;
          }
          case 90: {
            global::Magewatch.API.CreatureData subBuilder = new global::Magewatch.API.CreatureData();
            if (cardTypeCase_ == CardTypeOneofCase.CreatureCard) {
              subBuilder.MergeFrom(CreatureCard);
            }
            input.ReadMessage(subBuilder);
            CreatureCard = subBuilder;
            break;
          }
          case 98: {
            global::Magewatch.API.AttachmentData subBuilder = new global::Magewatch.API.AttachmentData();
            if (cardTypeCase_ == CardTypeOneofCase.AttachmentCard) {
              subBuilder.MergeFrom(AttachmentCard);
            }
            input.ReadMessage(subBuilder);
            AttachmentCard = subBuilder;
            break;
          }
          case 106: {
            global::Magewatch.API.UntargetedData subBuilder = new global::Magewatch.API.UntargetedData();
            if (cardTypeCase_ == CardTypeOneofCase.UntargetedCard) {
              subBuilder.MergeFrom(UntargetedCard);
            }
            input.ReadMessage(subBuilder);
            UntargetedCard = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreatureData : pb::IMessage<CreatureData> {
    private static readonly pb::MessageParser<CreatureData> _parser = new pb::MessageParser<CreatureData>(() => new CreatureData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatureData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureData(CreatureData other) : this() {
      creatureId_ = other.creatureId_ != null ? other.creatureId_.Clone() : null;
      prefab_ = other.prefab_ != null ? other.prefab_.Clone() : null;
      owner_ = other.owner_;
      rankPosition_ = other.rankPosition_;
      filePosition_ = other.filePosition_;
      canBeRepositioned_ = other.canBeRepositioned_;
      attachments_ = other.attachments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatureData Clone() {
      return new CreatureData(this);
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 1;
    private global::Magewatch.API.CreatureId creatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    /// <summary>Field number for the "prefab" field.</summary>
    public const int PrefabFieldNumber = 2;
    private global::Magewatch.API.Asset prefab_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.Asset Prefab {
      get { return prefab_; }
      set {
        prefab_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 3;
    private global::Magewatch.API.PlayerName owner_ = global::Magewatch.API.PlayerName.PlayerUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerName Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "rank_position" field.</summary>
    public const int RankPositionFieldNumber = 4;
    private global::Magewatch.API.RankValue rankPosition_ = global::Magewatch.API.RankValue.RankUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RankValue RankPosition {
      get { return rankPosition_; }
      set {
        rankPosition_ = value;
      }
    }

    /// <summary>Field number for the "file_position" field.</summary>
    public const int FilePositionFieldNumber = 5;
    private global::Magewatch.API.FileValue filePosition_ = global::Magewatch.API.FileValue.FileUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.FileValue FilePosition {
      get { return filePosition_; }
      set {
        filePosition_ = value;
      }
    }

    /// <summary>Field number for the "can_be_repositioned" field.</summary>
    public const int CanBeRepositionedFieldNumber = 6;
    private bool canBeRepositioned_;
    /// <summary>
    /// Can the user change this creature's position?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanBeRepositioned {
      get { return canBeRepositioned_; }
      set {
        canBeRepositioned_ = value;
      }
    }

    /// <summary>Field number for the "attachments" field.</summary>
    public const int AttachmentsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Magewatch.API.AttachmentData> _repeated_attachments_codec
        = pb::FieldCodec.ForMessage(58, global::Magewatch.API.AttachmentData.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.AttachmentData> attachments_ = new pbc::RepeatedField<global::Magewatch.API.AttachmentData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.AttachmentData> Attachments {
      get { return attachments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatureData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatureData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreatureId, other.CreatureId)) return false;
      if (!object.Equals(Prefab, other.Prefab)) return false;
      if (Owner != other.Owner) return false;
      if (RankPosition != other.RankPosition) return false;
      if (FilePosition != other.FilePosition) return false;
      if (CanBeRepositioned != other.CanBeRepositioned) return false;
      if(!attachments_.Equals(other.attachments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creatureId_ != null) hash ^= CreatureId.GetHashCode();
      if (prefab_ != null) hash ^= Prefab.GetHashCode();
      if (Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) hash ^= Owner.GetHashCode();
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) hash ^= RankPosition.GetHashCode();
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) hash ^= FilePosition.GetHashCode();
      if (CanBeRepositioned != false) hash ^= CanBeRepositioned.GetHashCode();
      hash ^= attachments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creatureId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreatureId);
      }
      if (prefab_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Prefab);
      }
      if (Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Owner);
      }
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) FilePosition);
      }
      if (CanBeRepositioned != false) {
        output.WriteRawTag(48);
        output.WriteBool(CanBeRepositioned);
      }
      attachments_.WriteTo(output, _repeated_attachments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureId);
      }
      if (prefab_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prefab);
      }
      if (Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Owner);
      }
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FilePosition);
      }
      if (CanBeRepositioned != false) {
        size += 1 + 1;
      }
      size += attachments_.CalculateSize(_repeated_attachments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatureData other) {
      if (other == null) {
        return;
      }
      if (other.creatureId_ != null) {
        if (creatureId_ == null) {
          CreatureId = new global::Magewatch.API.CreatureId();
        }
        CreatureId.MergeFrom(other.CreatureId);
      }
      if (other.prefab_ != null) {
        if (prefab_ == null) {
          Prefab = new global::Magewatch.API.Asset();
        }
        Prefab.MergeFrom(other.Prefab);
      }
      if (other.Owner != global::Magewatch.API.PlayerName.PlayerUnspecified) {
        Owner = other.Owner;
      }
      if (other.RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        RankPosition = other.RankPosition;
      }
      if (other.FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        FilePosition = other.FilePosition;
      }
      if (other.CanBeRepositioned != false) {
        CanBeRepositioned = other.CanBeRepositioned;
      }
      attachments_.Add(other.attachments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creatureId_ == null) {
              CreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(CreatureId);
            break;
          }
          case 18: {
            if (prefab_ == null) {
              Prefab = new global::Magewatch.API.Asset();
            }
            input.ReadMessage(Prefab);
            break;
          }
          case 24: {
            Owner = (global::Magewatch.API.PlayerName) input.ReadEnum();
            break;
          }
          case 32: {
            RankPosition = (global::Magewatch.API.RankValue) input.ReadEnum();
            break;
          }
          case 40: {
            FilePosition = (global::Magewatch.API.FileValue) input.ReadEnum();
            break;
          }
          case 48: {
            CanBeRepositioned = input.ReadBool();
            break;
          }
          case 58: {
            attachments_.AddEntriesFrom(input, _repeated_attachments_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DisplayErrorCommand : pb::IMessage<DisplayErrorCommand> {
    private static readonly pb::MessageParser<DisplayErrorCommand> _parser = new pb::MessageParser<DisplayErrorCommand>(() => new DisplayErrorCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisplayErrorCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayErrorCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayErrorCommand(DisplayErrorCommand other) : this() {
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayErrorCommand Clone() {
      return new DisplayErrorCommand(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisplayErrorCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisplayErrorCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisplayErrorCommand other) {
      if (other == null) {
        return;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WaitCommand : pb::IMessage<WaitCommand> {
    private static readonly pb::MessageParser<WaitCommand> _parser = new pb::MessageParser<WaitCommand>(() => new WaitCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WaitCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitCommand(WaitCommand other) : this() {
      waitTimeMilliseconds_ = other.waitTimeMilliseconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WaitCommand Clone() {
      return new WaitCommand(this);
    }

    /// <summary>Field number for the "wait_time_milliseconds" field.</summary>
    public const int WaitTimeMillisecondsFieldNumber = 1;
    private int waitTimeMilliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaitTimeMilliseconds {
      get { return waitTimeMilliseconds_; }
      set {
        waitTimeMilliseconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WaitCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WaitCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WaitTimeMilliseconds != other.WaitTimeMilliseconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WaitTimeMilliseconds != 0) hash ^= WaitTimeMilliseconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WaitTimeMilliseconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WaitTimeMilliseconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WaitTimeMilliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaitTimeMilliseconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WaitCommand other) {
      if (other == null) {
        return;
      }
      if (other.WaitTimeMilliseconds != 0) {
        WaitTimeMilliseconds = other.WaitTimeMilliseconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            WaitTimeMilliseconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateInterfaceCommand : pb::IMessage<UpdateInterfaceCommand> {
    private static readonly pb::MessageParser<UpdateInterfaceCommand> _parser = new pb::MessageParser<UpdateInterfaceCommand>(() => new UpdateInterfaceCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateInterfaceCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInterfaceCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInterfaceCommand(UpdateInterfaceCommand other) : this() {
      mainButtonEnabled_ = other.mainButtonEnabled_;
      mainButtonText_ = other.mainButtonText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInterfaceCommand Clone() {
      return new UpdateInterfaceCommand(this);
    }

    /// <summary>Field number for the "main_button_enabled" field.</summary>
    public const int MainButtonEnabledFieldNumber = 1;
    private bool mainButtonEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MainButtonEnabled {
      get { return mainButtonEnabled_; }
      set {
        mainButtonEnabled_ = value;
      }
    }

    /// <summary>Field number for the "main_button_text" field.</summary>
    public const int MainButtonTextFieldNumber = 2;
    private string mainButtonText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MainButtonText {
      get { return mainButtonText_; }
      set {
        mainButtonText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateInterfaceCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateInterfaceCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MainButtonEnabled != other.MainButtonEnabled) return false;
      if (MainButtonText != other.MainButtonText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MainButtonEnabled != false) hash ^= MainButtonEnabled.GetHashCode();
      if (MainButtonText.Length != 0) hash ^= MainButtonText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MainButtonEnabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(MainButtonEnabled);
      }
      if (MainButtonText.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MainButtonText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MainButtonEnabled != false) {
        size += 1 + 1;
      }
      if (MainButtonText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MainButtonText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateInterfaceCommand other) {
      if (other == null) {
        return;
      }
      if (other.MainButtonEnabled != false) {
        MainButtonEnabled = other.MainButtonEnabled;
      }
      if (other.MainButtonText.Length != 0) {
        MainButtonText = other.MainButtonText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MainButtonEnabled = input.ReadBool();
            break;
          }
          case 18: {
            MainButtonText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdatePlayerCommand : pb::IMessage<UpdatePlayerCommand> {
    private static readonly pb::MessageParser<UpdatePlayerCommand> _parser = new pb::MessageParser<UpdatePlayerCommand>(() => new UpdatePlayerCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePlayerCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerCommand(UpdatePlayerCommand other) : this() {
      player_ = other.player_ != null ? other.player_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePlayerCommand Clone() {
      return new UpdatePlayerCommand(this);
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 1;
    private global::Magewatch.API.PlayerData player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayerData Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePlayerCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePlayerCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Player, other.Player)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (player_ != null) hash ^= Player.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (player_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Player);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePlayerCommand other) {
      if (other == null) {
        return;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          Player = new global::Magewatch.API.PlayerData();
        }
        Player.MergeFrom(other.Player);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (player_ == null) {
              Player = new global::Magewatch.API.PlayerData();
            }
            input.ReadMessage(Player);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DrawCardCommand : pb::IMessage<DrawCardCommand> {
    private static readonly pb::MessageParser<DrawCardCommand> _parser = new pb::MessageParser<DrawCardCommand>(() => new DrawCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrawCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawCardCommand(DrawCardCommand other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrawCardCommand Clone() {
      return new DrawCardCommand(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Magewatch.API.CardData card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CardData Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrawCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrawCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrawCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          Card = new global::Magewatch.API.CardData();
        }
        Card.MergeFrom(other.Card);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::Magewatch.API.CardData();
            }
            input.ReadMessage(Card);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Reveal an *existing* card and (optionally) animate it to a specific
  /// rank/file position
  /// </summary>
  public sealed partial class PlayCardCommand : pb::IMessage<PlayCardCommand> {
    private static readonly pb::MessageParser<PlayCardCommand> _parser = new pb::MessageParser<PlayCardCommand>(() => new PlayCardCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayCardCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardCommand(PlayCardCommand other) : this() {
      card_ = other.card_ != null ? other.card_.Clone() : null;
      revealDelayMilliseconds_ = other.revealDelayMilliseconds_;
      rankPosition_ = other.rankPosition_;
      filePosition_ = other.filePosition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayCardCommand Clone() {
      return new PlayCardCommand(this);
    }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Magewatch.API.CardData card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CardData Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    /// <summary>Field number for the "reveal_delay_milliseconds" field.</summary>
    public const int RevealDelayMillisecondsFieldNumber = 2;
    private int revealDelayMilliseconds_;
    /// <summary>
    /// How long to show the card for before animating it away. 0 should be
    /// interpreted as allowing the client to pick its own default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RevealDelayMilliseconds {
      get { return revealDelayMilliseconds_; }
      set {
        revealDelayMilliseconds_ = value;
      }
    }

    /// <summary>Field number for the "rank_position" field.</summary>
    public const int RankPositionFieldNumber = 3;
    private global::Magewatch.API.RankValue rankPosition_ = global::Magewatch.API.RankValue.RankUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RankValue RankPosition {
      get { return rankPosition_; }
      set {
        rankPosition_ = value;
      }
    }

    /// <summary>Field number for the "file_position" field.</summary>
    public const int FilePositionFieldNumber = 4;
    private global::Magewatch.API.FileValue filePosition_ = global::Magewatch.API.FileValue.FileUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.FileValue FilePosition {
      get { return filePosition_; }
      set {
        filePosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayCardCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayCardCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Card, other.Card)) return false;
      if (RevealDelayMilliseconds != other.RevealDelayMilliseconds) return false;
      if (RankPosition != other.RankPosition) return false;
      if (FilePosition != other.FilePosition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (card_ != null) hash ^= Card.GetHashCode();
      if (RevealDelayMilliseconds != 0) hash ^= RevealDelayMilliseconds.GetHashCode();
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) hash ^= RankPosition.GetHashCode();
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) hash ^= FilePosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
      if (RevealDelayMilliseconds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RevealDelayMilliseconds);
      }
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) FilePosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      if (RevealDelayMilliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RevealDelayMilliseconds);
      }
      if (RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RankPosition);
      }
      if (FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FilePosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayCardCommand other) {
      if (other == null) {
        return;
      }
      if (other.card_ != null) {
        if (card_ == null) {
          Card = new global::Magewatch.API.CardData();
        }
        Card.MergeFrom(other.Card);
      }
      if (other.RevealDelayMilliseconds != 0) {
        RevealDelayMilliseconds = other.RevealDelayMilliseconds;
      }
      if (other.RankPosition != global::Magewatch.API.RankValue.RankUnspecified) {
        RankPosition = other.RankPosition;
      }
      if (other.FilePosition != global::Magewatch.API.FileValue.FileUnspecified) {
        FilePosition = other.FilePosition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (card_ == null) {
              Card = new global::Magewatch.API.CardData();
            }
            input.ReadMessage(Card);
            break;
          }
          case 16: {
            RevealDelayMilliseconds = input.ReadInt32();
            break;
          }
          case 24: {
            RankPosition = (global::Magewatch.API.RankValue) input.ReadEnum();
            break;
          }
          case 32: {
            FilePosition = (global::Magewatch.API.FileValue) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateOrUpdateCreatureCommand : pb::IMessage<CreateOrUpdateCreatureCommand> {
    private static readonly pb::MessageParser<CreateOrUpdateCreatureCommand> _parser = new pb::MessageParser<CreateOrUpdateCreatureCommand>(() => new CreateOrUpdateCreatureCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateOrUpdateCreatureCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOrUpdateCreatureCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOrUpdateCreatureCommand(CreateOrUpdateCreatureCommand other) : this() {
      creature_ = other.creature_ != null ? other.creature_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOrUpdateCreatureCommand Clone() {
      return new CreateOrUpdateCreatureCommand(this);
    }

    /// <summary>Field number for the "creature" field.</summary>
    public const int CreatureFieldNumber = 1;
    private global::Magewatch.API.CreatureData creature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureData Creature {
      get { return creature_; }
      set {
        creature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateOrUpdateCreatureCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateOrUpdateCreatureCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Creature, other.Creature)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creature_ != null) hash ^= Creature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creature_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Creature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateOrUpdateCreatureCommand other) {
      if (other == null) {
        return;
      }
      if (other.creature_ != null) {
        if (creature_ == null) {
          Creature = new global::Magewatch.API.CreatureData();
        }
        Creature.MergeFrom(other.Creature);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creature_ == null) {
              Creature = new global::Magewatch.API.CreatureData();
            }
            input.ReadMessage(Creature);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveCreatureCommand : pb::IMessage<RemoveCreatureCommand> {
    private static readonly pb::MessageParser<RemoveCreatureCommand> _parser = new pb::MessageParser<RemoveCreatureCommand>(() => new RemoveCreatureCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveCreatureCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveCreatureCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveCreatureCommand(RemoveCreatureCommand other) : this() {
      creatureId_ = other.creatureId_ != null ? other.creatureId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveCreatureCommand Clone() {
      return new RemoveCreatureCommand(this);
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 1;
    private global::Magewatch.API.CreatureId creatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveCreatureCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveCreatureCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreatureId, other.CreatureId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creatureId_ != null) hash ^= CreatureId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creatureId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreatureId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveCreatureCommand other) {
      if (other == null) {
        return;
      }
      if (other.creatureId_ != null) {
        if (creatureId_ == null) {
          CreatureId = new global::Magewatch.API.CreatureId();
        }
        CreatureId.MergeFrom(other.CreatureId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creatureId_ == null) {
              CreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(CreatureId);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MeleeEngageCommand : pb::IMessage<MeleeEngageCommand> {
    private static readonly pb::MessageParser<MeleeEngageCommand> _parser = new pb::MessageParser<MeleeEngageCommand>(() => new MeleeEngageCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MeleeEngageCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeleeEngageCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeleeEngageCommand(MeleeEngageCommand other) : this() {
      creatureId_ = other.creatureId_ != null ? other.creatureId_.Clone() : null;
      targetCreatureId_ = other.targetCreatureId_ != null ? other.targetCreatureId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeleeEngageCommand Clone() {
      return new MeleeEngageCommand(this);
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 1;
    private global::Magewatch.API.CreatureId creatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    /// <summary>Field number for the "target_creature_id" field.</summary>
    public const int TargetCreatureIdFieldNumber = 2;
    private global::Magewatch.API.CreatureId targetCreatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId TargetCreatureId {
      get { return targetCreatureId_; }
      set {
        targetCreatureId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MeleeEngageCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MeleeEngageCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreatureId, other.CreatureId)) return false;
      if (!object.Equals(TargetCreatureId, other.TargetCreatureId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creatureId_ != null) hash ^= CreatureId.GetHashCode();
      if (targetCreatureId_ != null) hash ^= TargetCreatureId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creatureId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreatureId);
      }
      if (targetCreatureId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetCreatureId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureId);
      }
      if (targetCreatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetCreatureId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MeleeEngageCommand other) {
      if (other == null) {
        return;
      }
      if (other.creatureId_ != null) {
        if (creatureId_ == null) {
          CreatureId = new global::Magewatch.API.CreatureId();
        }
        CreatureId.MergeFrom(other.CreatureId);
      }
      if (other.targetCreatureId_ != null) {
        if (targetCreatureId_ == null) {
          TargetCreatureId = new global::Magewatch.API.CreatureId();
        }
        TargetCreatureId.MergeFrom(other.TargetCreatureId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creatureId_ == null) {
              CreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(CreatureId);
            break;
          }
          case 18: {
            if (targetCreatureId_ == null) {
              TargetCreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(TargetCreatureId);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApplyDamageEffect : pb::IMessage<ApplyDamageEffect> {
    private static readonly pb::MessageParser<ApplyDamageEffect> _parser = new pb::MessageParser<ApplyDamageEffect>(() => new ApplyDamageEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApplyDamageEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyDamageEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyDamageEffect(ApplyDamageEffect other) : this() {
      damage_ = other.damage_;
      killsTarget_ = other.killsTarget_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApplyDamageEffect Clone() {
      return new ApplyDamageEffect(this);
    }

    /// <summary>Field number for the "damage" field.</summary>
    public const int DamageFieldNumber = 1;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "kills_target" field.</summary>
    public const int KillsTargetFieldNumber = 2;
    private bool killsTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KillsTarget {
      get { return killsTarget_; }
      set {
        killsTarget_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApplyDamageEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApplyDamageEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Damage != other.Damage) return false;
      if (KillsTarget != other.KillsTarget) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (KillsTarget != false) hash ^= KillsTarget.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Damage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Damage);
      }
      if (KillsTarget != false) {
        output.WriteRawTag(16);
        output.WriteBool(KillsTarget);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (KillsTarget != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApplyDamageEffect other) {
      if (other == null) {
        return;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.KillsTarget != false) {
        KillsTarget = other.KillsTarget;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Damage = input.ReadInt32();
            break;
          }
          case 16: {
            KillsTarget = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FireProjectileEffect : pb::IMessage<FireProjectileEffect> {
    private static readonly pb::MessageParser<FireProjectileEffect> _parser = new pb::MessageParser<FireProjectileEffect>(() => new FireProjectileEffect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FireProjectileEffect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FireProjectileEffect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FireProjectileEffect(FireProjectileEffect other) : this() {
      prefab_ = other.prefab_ != null ? other.prefab_.Clone() : null;
      applyDamage_ = other.applyDamage_ != null ? other.applyDamage_.Clone() : null;
      atOpponent_ = other.atOpponent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FireProjectileEffect Clone() {
      return new FireProjectileEffect(this);
    }

    /// <summary>Field number for the "prefab" field.</summary>
    public const int PrefabFieldNumber = 1;
    private global::Magewatch.API.Asset prefab_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.Asset Prefab {
      get { return prefab_; }
      set {
        prefab_ = value;
      }
    }

    /// <summary>Field number for the "apply_damage" field.</summary>
    public const int ApplyDamageFieldNumber = 2;
    private global::Magewatch.API.ApplyDamageEffect applyDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.ApplyDamageEffect ApplyDamage {
      get { return applyDamage_; }
      set {
        applyDamage_ = value;
      }
    }

    /// <summary>Field number for the "at_opponent" field.</summary>
    public const int AtOpponentFieldNumber = 3;
    private bool atOpponent_;
    /// <summary>
    /// If true, the projectil is fired at the opposing player instead of at
    /// a target creature.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AtOpponent {
      get { return atOpponent_; }
      set {
        atOpponent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FireProjectileEffect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FireProjectileEffect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Prefab, other.Prefab)) return false;
      if (!object.Equals(ApplyDamage, other.ApplyDamage)) return false;
      if (AtOpponent != other.AtOpponent) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (prefab_ != null) hash ^= Prefab.GetHashCode();
      if (applyDamage_ != null) hash ^= ApplyDamage.GetHashCode();
      if (AtOpponent != false) hash ^= AtOpponent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (prefab_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Prefab);
      }
      if (applyDamage_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ApplyDamage);
      }
      if (AtOpponent != false) {
        output.WriteRawTag(24);
        output.WriteBool(AtOpponent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (prefab_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Prefab);
      }
      if (applyDamage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplyDamage);
      }
      if (AtOpponent != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FireProjectileEffect other) {
      if (other == null) {
        return;
      }
      if (other.prefab_ != null) {
        if (prefab_ == null) {
          Prefab = new global::Magewatch.API.Asset();
        }
        Prefab.MergeFrom(other.Prefab);
      }
      if (other.applyDamage_ != null) {
        if (applyDamage_ == null) {
          ApplyDamage = new global::Magewatch.API.ApplyDamageEffect();
        }
        ApplyDamage.MergeFrom(other.ApplyDamage);
      }
      if (other.AtOpponent != false) {
        AtOpponent = other.AtOpponent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (prefab_ == null) {
              Prefab = new global::Magewatch.API.Asset();
            }
            input.ReadMessage(Prefab);
            break;
          }
          case 18: {
            if (applyDamage_ == null) {
              ApplyDamage = new global::Magewatch.API.ApplyDamageEffect();
            }
            input.ReadMessage(ApplyDamage);
            break;
          }
          case 24: {
            AtOpponent = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Causes a creature to play a skill animation and optionally target an effect
  /// at an opposing creature
  /// </summary>
  public sealed partial class AttackCommand : pb::IMessage<AttackCommand> {
    private static readonly pb::MessageParser<AttackCommand> _parser = new pb::MessageParser<AttackCommand>(() => new AttackCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackCommand(AttackCommand other) : this() {
      creatureId_ = other.creatureId_ != null ? other.creatureId_.Clone() : null;
      targetCreatureId_ = other.targetCreatureId_ != null ? other.targetCreatureId_.Clone() : null;
      skill_ = other.skill_;
      hitCount_ = other.hitCount_;
      switch (other.AttackEffectCase) {
        case AttackEffectOneofCase.ApplyDamage:
          ApplyDamage = other.ApplyDamage.Clone();
          break;
        case AttackEffectOneofCase.FireProjectile:
          FireProjectile = other.FireProjectile.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackCommand Clone() {
      return new AttackCommand(this);
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 1;
    private global::Magewatch.API.CreatureId creatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    /// <summary>Field number for the "target_creature_id" field.</summary>
    public const int TargetCreatureIdFieldNumber = 2;
    private global::Magewatch.API.CreatureId targetCreatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId TargetCreatureId {
      get { return targetCreatureId_; }
      set {
        targetCreatureId_ = value;
      }
    }

    /// <summary>Field number for the "skill" field.</summary>
    public const int SkillFieldNumber = 3;
    private global::Magewatch.API.SkillAnimationNumber skill_ = global::Magewatch.API.SkillAnimationNumber.SkillUnspecified;
    /// <summary>
    /// Which skill animation to play
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.SkillAnimationNumber Skill {
      get { return skill_; }
      set {
        skill_ = value;
      }
    }

    /// <summary>Field number for the "hit_count" field.</summary>
    public const int HitCountFieldNumber = 4;
    private int hitCount_;
    /// <summary>
    /// How many times this skill is expected to raise the "AttackStart" event
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitCount {
      get { return hitCount_; }
      set {
        hitCount_ = value;
      }
    }

    /// <summary>Field number for the "apply_damage" field.</summary>
    public const int ApplyDamageFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.ApplyDamageEffect ApplyDamage {
      get { return attackEffectCase_ == AttackEffectOneofCase.ApplyDamage ? (global::Magewatch.API.ApplyDamageEffect) attackEffect_ : null; }
      set {
        attackEffect_ = value;
        attackEffectCase_ = value == null ? AttackEffectOneofCase.None : AttackEffectOneofCase.ApplyDamage;
      }
    }

    /// <summary>Field number for the "fire_projectile" field.</summary>
    public const int FireProjectileFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.FireProjectileEffect FireProjectile {
      get { return attackEffectCase_ == AttackEffectOneofCase.FireProjectile ? (global::Magewatch.API.FireProjectileEffect) attackEffect_ : null; }
      set {
        attackEffect_ = value;
        attackEffectCase_ = value == null ? AttackEffectOneofCase.None : AttackEffectOneofCase.FireProjectile;
      }
    }

    private object attackEffect_;
    /// <summary>Enum of possible cases for the "attack_effect" oneof.</summary>
    public enum AttackEffectOneofCase {
      None = 0,
      ApplyDamage = 5,
      FireProjectile = 6,
    }
    private AttackEffectOneofCase attackEffectCase_ = AttackEffectOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackEffectOneofCase AttackEffectCase {
      get { return attackEffectCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAttackEffect() {
      attackEffectCase_ = AttackEffectOneofCase.None;
      attackEffect_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreatureId, other.CreatureId)) return false;
      if (!object.Equals(TargetCreatureId, other.TargetCreatureId)) return false;
      if (Skill != other.Skill) return false;
      if (HitCount != other.HitCount) return false;
      if (!object.Equals(ApplyDamage, other.ApplyDamage)) return false;
      if (!object.Equals(FireProjectile, other.FireProjectile)) return false;
      if (AttackEffectCase != other.AttackEffectCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creatureId_ != null) hash ^= CreatureId.GetHashCode();
      if (targetCreatureId_ != null) hash ^= TargetCreatureId.GetHashCode();
      if (Skill != global::Magewatch.API.SkillAnimationNumber.SkillUnspecified) hash ^= Skill.GetHashCode();
      if (HitCount != 0) hash ^= HitCount.GetHashCode();
      if (attackEffectCase_ == AttackEffectOneofCase.ApplyDamage) hash ^= ApplyDamage.GetHashCode();
      if (attackEffectCase_ == AttackEffectOneofCase.FireProjectile) hash ^= FireProjectile.GetHashCode();
      hash ^= (int) attackEffectCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creatureId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreatureId);
      }
      if (targetCreatureId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TargetCreatureId);
      }
      if (Skill != global::Magewatch.API.SkillAnimationNumber.SkillUnspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Skill);
      }
      if (HitCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HitCount);
      }
      if (attackEffectCase_ == AttackEffectOneofCase.ApplyDamage) {
        output.WriteRawTag(42);
        output.WriteMessage(ApplyDamage);
      }
      if (attackEffectCase_ == AttackEffectOneofCase.FireProjectile) {
        output.WriteRawTag(50);
        output.WriteMessage(FireProjectile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureId);
      }
      if (targetCreatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetCreatureId);
      }
      if (Skill != global::Magewatch.API.SkillAnimationNumber.SkillUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Skill);
      }
      if (HitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitCount);
      }
      if (attackEffectCase_ == AttackEffectOneofCase.ApplyDamage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplyDamage);
      }
      if (attackEffectCase_ == AttackEffectOneofCase.FireProjectile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FireProjectile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackCommand other) {
      if (other == null) {
        return;
      }
      if (other.creatureId_ != null) {
        if (creatureId_ == null) {
          CreatureId = new global::Magewatch.API.CreatureId();
        }
        CreatureId.MergeFrom(other.CreatureId);
      }
      if (other.targetCreatureId_ != null) {
        if (targetCreatureId_ == null) {
          TargetCreatureId = new global::Magewatch.API.CreatureId();
        }
        TargetCreatureId.MergeFrom(other.TargetCreatureId);
      }
      if (other.Skill != global::Magewatch.API.SkillAnimationNumber.SkillUnspecified) {
        Skill = other.Skill;
      }
      if (other.HitCount != 0) {
        HitCount = other.HitCount;
      }
      switch (other.AttackEffectCase) {
        case AttackEffectOneofCase.ApplyDamage:
          if (ApplyDamage == null) {
            ApplyDamage = new global::Magewatch.API.ApplyDamageEffect();
          }
          ApplyDamage.MergeFrom(other.ApplyDamage);
          break;
        case AttackEffectOneofCase.FireProjectile:
          if (FireProjectile == null) {
            FireProjectile = new global::Magewatch.API.FireProjectileEffect();
          }
          FireProjectile.MergeFrom(other.FireProjectile);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creatureId_ == null) {
              CreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(CreatureId);
            break;
          }
          case 18: {
            if (targetCreatureId_ == null) {
              TargetCreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(TargetCreatureId);
            break;
          }
          case 24: {
            Skill = (global::Magewatch.API.SkillAnimationNumber) input.ReadEnum();
            break;
          }
          case 32: {
            HitCount = input.ReadInt32();
            break;
          }
          case 42: {
            global::Magewatch.API.ApplyDamageEffect subBuilder = new global::Magewatch.API.ApplyDamageEffect();
            if (attackEffectCase_ == AttackEffectOneofCase.ApplyDamage) {
              subBuilder.MergeFrom(ApplyDamage);
            }
            input.ReadMessage(subBuilder);
            ApplyDamage = subBuilder;
            break;
          }
          case 50: {
            global::Magewatch.API.FireProjectileEffect subBuilder = new global::Magewatch.API.FireProjectileEffect();
            if (attackEffectCase_ == AttackEffectOneofCase.FireProjectile) {
              subBuilder.MergeFrom(FireProjectile);
            }
            input.ReadMessage(subBuilder);
            FireProjectile = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class MSkillAnimation : pb::IMessage<MSkillAnimation> {
    private static readonly pb::MessageParser<MSkillAnimation> _parser = new pb::MessageParser<MSkillAnimation>(() => new MSkillAnimation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MSkillAnimation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSkillAnimation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSkillAnimation(MSkillAnimation other) : this() {
      skill_ = other.skill_;
      impactCount_ = other.impactCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MSkillAnimation Clone() {
      return new MSkillAnimation(this);
    }

    /// <summary>Field number for the "skill" field.</summary>
    public const int SkillFieldNumber = 1;
    private global::Magewatch.API.SkillAnimationNumber skill_ = global::Magewatch.API.SkillAnimationNumber.SkillUnspecified;
    /// <summary>
    /// The animation to perform
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.SkillAnimationNumber Skill {
      get { return skill_; }
      set {
        skill_ = value;
      }
    }

    /// <summary>Field number for the "impact_count" field.</summary>
    public const int ImpactCountFieldNumber = 2;
    private int impactCount_;
    /// <summary>
    /// How many times this skill is expected to reach its impact frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ImpactCount {
      get { return impactCount_; }
      set {
        impactCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MSkillAnimation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MSkillAnimation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Skill != other.Skill) return false;
      if (ImpactCount != other.ImpactCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Skill != global::Magewatch.API.SkillAnimationNumber.SkillUnspecified) hash ^= Skill.GetHashCode();
      if (ImpactCount != 0) hash ^= ImpactCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Skill != global::Magewatch.API.SkillAnimationNumber.SkillUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Skill);
      }
      if (ImpactCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ImpactCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Skill != global::Magewatch.API.SkillAnimationNumber.SkillUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Skill);
      }
      if (ImpactCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImpactCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MSkillAnimation other) {
      if (other == null) {
        return;
      }
      if (other.Skill != global::Magewatch.API.SkillAnimationNumber.SkillUnspecified) {
        Skill = other.Skill;
      }
      if (other.ImpactCount != 0) {
        ImpactCount = other.ImpactCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Skill = (global::Magewatch.API.SkillAnimationNumber) input.ReadEnum();
            break;
          }
          case 16: {
            ImpactCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An effect to apply when a skill's impact event fires for the nth time
  /// </summary>
  public sealed partial class MOnImpactNumber : pb::IMessage<MOnImpactNumber> {
    private static readonly pb::MessageParser<MOnImpactNumber> _parser = new pb::MessageParser<MOnImpactNumber>(() => new MOnImpactNumber());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MOnImpactNumber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MOnImpactNumber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MOnImpactNumber(MOnImpactNumber other) : this() {
      impactNumber_ = other.impactNumber_;
      effect_ = other.effect_ != null ? other.effect_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MOnImpactNumber Clone() {
      return new MOnImpactNumber(this);
    }

    /// <summary>Field number for the "impact_number" field.</summary>
    public const int ImpactNumberFieldNumber = 1;
    private uint impactNumber_;
    /// <summary>
    /// Apply this effect when the skill has reached its impact frame
    /// 'on_impact_number' times. A value of 0 should be interpreted the same
    /// as 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImpactNumber {
      get { return impactNumber_; }
      set {
        impactNumber_ = value;
      }
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 2;
    private global::Magewatch.API.MOnImpact effect_;
    /// <summary>
    /// What to do on impact
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MOnImpact Effect {
      get { return effect_; }
      set {
        effect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MOnImpactNumber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MOnImpactNumber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImpactNumber != other.ImpactNumber) return false;
      if (!object.Equals(Effect, other.Effect)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImpactNumber != 0) hash ^= ImpactNumber.GetHashCode();
      if (effect_ != null) hash ^= Effect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImpactNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ImpactNumber);
      }
      if (effect_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Effect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImpactNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImpactNumber);
      }
      if (effect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Effect);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MOnImpactNumber other) {
      if (other == null) {
        return;
      }
      if (other.ImpactNumber != 0) {
        ImpactNumber = other.ImpactNumber;
      }
      if (other.effect_ != null) {
        if (effect_ == null) {
          Effect = new global::Magewatch.API.MOnImpact();
        }
        Effect.MergeFrom(other.Effect);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ImpactNumber = input.ReadUInt32();
            break;
          }
          case 18: {
            if (effect_ == null) {
              Effect = new global::Magewatch.API.MOnImpact();
            }
            input.ReadMessage(Effect);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// What to do when a skill or projectile reaches impact
  /// </summary>
  public sealed partial class MOnImpact : pb::IMessage<MOnImpact> {
    private static readonly pb::MessageParser<MOnImpact> _parser = new pb::MessageParser<MOnImpact>(() => new MOnImpact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MOnImpact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MOnImpact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MOnImpact(MOnImpact other) : this() {
      switch (other.OnImpactCase) {
        case OnImpactOneofCase.Update:
          Update = other.Update.Clone();
          break;
        case OnImpactOneofCase.FireProjectile:
          FireProjectile = other.FireProjectile.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MOnImpact Clone() {
      return new MOnImpact(this);
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 1;
    /// <summary>
    /// Apply an update
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MCreatureUpdate Update {
      get { return onImpactCase_ == OnImpactOneofCase.Update ? (global::Magewatch.API.MCreatureUpdate) onImpact_ : null; }
      set {
        onImpact_ = value;
        onImpactCase_ = value == null ? OnImpactOneofCase.None : OnImpactOneofCase.Update;
      }
    }

    /// <summary>Field number for the "fire_projectile" field.</summary>
    public const int FireProjectileFieldNumber = 2;
    /// <summary>
    /// Fire a projectile
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MFireProjectile FireProjectile {
      get { return onImpactCase_ == OnImpactOneofCase.FireProjectile ? (global::Magewatch.API.MFireProjectile) onImpact_ : null; }
      set {
        onImpact_ = value;
        onImpactCase_ = value == null ? OnImpactOneofCase.None : OnImpactOneofCase.FireProjectile;
      }
    }

    private object onImpact_;
    /// <summary>Enum of possible cases for the "on_impact" oneof.</summary>
    public enum OnImpactOneofCase {
      None = 0,
      Update = 1,
      FireProjectile = 2,
    }
    private OnImpactOneofCase onImpactCase_ = OnImpactOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnImpactOneofCase OnImpactCase {
      get { return onImpactCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOnImpact() {
      onImpactCase_ = OnImpactOneofCase.None;
      onImpact_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MOnImpact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MOnImpact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Update, other.Update)) return false;
      if (!object.Equals(FireProjectile, other.FireProjectile)) return false;
      if (OnImpactCase != other.OnImpactCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (onImpactCase_ == OnImpactOneofCase.Update) hash ^= Update.GetHashCode();
      if (onImpactCase_ == OnImpactOneofCase.FireProjectile) hash ^= FireProjectile.GetHashCode();
      hash ^= (int) onImpactCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (onImpactCase_ == OnImpactOneofCase.Update) {
        output.WriteRawTag(10);
        output.WriteMessage(Update);
      }
      if (onImpactCase_ == OnImpactOneofCase.FireProjectile) {
        output.WriteRawTag(18);
        output.WriteMessage(FireProjectile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (onImpactCase_ == OnImpactOneofCase.Update) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (onImpactCase_ == OnImpactOneofCase.FireProjectile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FireProjectile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MOnImpact other) {
      if (other == null) {
        return;
      }
      switch (other.OnImpactCase) {
        case OnImpactOneofCase.Update:
          if (Update == null) {
            Update = new global::Magewatch.API.MCreatureUpdate();
          }
          Update.MergeFrom(other.Update);
          break;
        case OnImpactOneofCase.FireProjectile:
          if (FireProjectile == null) {
            FireProjectile = new global::Magewatch.API.MFireProjectile();
          }
          FireProjectile.MergeFrom(other.FireProjectile);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Magewatch.API.MCreatureUpdate subBuilder = new global::Magewatch.API.MCreatureUpdate();
            if (onImpactCase_ == OnImpactOneofCase.Update) {
              subBuilder.MergeFrom(Update);
            }
            input.ReadMessage(subBuilder);
            Update = subBuilder;
            break;
          }
          case 18: {
            global::Magewatch.API.MFireProjectile subBuilder = new global::Magewatch.API.MFireProjectile();
            if (onImpactCase_ == OnImpactOneofCase.FireProjectile) {
              subBuilder.MergeFrom(FireProjectile);
            }
            input.ReadMessage(subBuilder);
            FireProjectile = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class MFireProjectile : pb::IMessage<MFireProjectile> {
    private static readonly pb::MessageParser<MFireProjectile> _parser = new pb::MessageParser<MFireProjectile>(() => new MFireProjectile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MFireProjectile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MFireProjectile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MFireProjectile(MFireProjectile other) : this() {
      projectile_ = other.projectile_ != null ? other.projectile_.Clone() : null;
      onHit_ = other.onHit_.Clone();
      switch (other.TargetCase) {
        case TargetOneofCase.TargetCreature:
          TargetCreature = other.TargetCreature.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MFireProjectile Clone() {
      return new MFireProjectile(this);
    }

    /// <summary>Field number for the "projectile" field.</summary>
    public const int ProjectileFieldNumber = 1;
    private global::Magewatch.API.Asset projectile_;
    /// <summary>
    /// Projectile Prefab to create
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.Asset Projectile {
      get { return projectile_; }
      set {
        projectile_ = value;
      }
    }

    /// <summary>Field number for the "on_hit" field.</summary>
    public const int OnHitFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Magewatch.API.MOnImpact> _repeated_onHit_codec
        = pb::FieldCodec.ForMessage(18, global::Magewatch.API.MOnImpact.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.MOnImpact> onHit_ = new pbc::RepeatedField<global::Magewatch.API.MOnImpact>();
    /// <summary>
    /// What to do when the projectile hits
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.MOnImpact> OnHit {
      get { return onHit_; }
    }

    /// <summary>Field number for the "target_creature" field.</summary>
    public const int TargetCreatureFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId TargetCreature {
      get { return targetCase_ == TargetOneofCase.TargetCreature ? (global::Magewatch.API.CreatureId) target_ : null; }
      set {
        target_ = value;
        targetCase_ = value == null ? TargetOneofCase.None : TargetOneofCase.TargetCreature;
      }
    }

    private object target_;
    /// <summary>Enum of possible cases for the "target" oneof.</summary>
    public enum TargetOneofCase {
      None = 0,
      TargetCreature = 3,
    }
    private TargetOneofCase targetCase_ = TargetOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetOneofCase TargetCase {
      get { return targetCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTarget() {
      targetCase_ = TargetOneofCase.None;
      target_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MFireProjectile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MFireProjectile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Projectile, other.Projectile)) return false;
      if(!onHit_.Equals(other.onHit_)) return false;
      if (!object.Equals(TargetCreature, other.TargetCreature)) return false;
      if (TargetCase != other.TargetCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (projectile_ != null) hash ^= Projectile.GetHashCode();
      hash ^= onHit_.GetHashCode();
      if (targetCase_ == TargetOneofCase.TargetCreature) hash ^= TargetCreature.GetHashCode();
      hash ^= (int) targetCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (projectile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Projectile);
      }
      onHit_.WriteTo(output, _repeated_onHit_codec);
      if (targetCase_ == TargetOneofCase.TargetCreature) {
        output.WriteRawTag(26);
        output.WriteMessage(TargetCreature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (projectile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Projectile);
      }
      size += onHit_.CalculateSize(_repeated_onHit_codec);
      if (targetCase_ == TargetOneofCase.TargetCreature) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetCreature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MFireProjectile other) {
      if (other == null) {
        return;
      }
      if (other.projectile_ != null) {
        if (projectile_ == null) {
          Projectile = new global::Magewatch.API.Asset();
        }
        Projectile.MergeFrom(other.Projectile);
      }
      onHit_.Add(other.onHit_);
      switch (other.TargetCase) {
        case TargetOneofCase.TargetCreature:
          if (TargetCreature == null) {
            TargetCreature = new global::Magewatch.API.CreatureId();
          }
          TargetCreature.MergeFrom(other.TargetCreature);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (projectile_ == null) {
              Projectile = new global::Magewatch.API.Asset();
            }
            input.ReadMessage(Projectile);
            break;
          }
          case 18: {
            onHit_.AddEntriesFrom(input, _repeated_onHit_codec);
            break;
          }
          case 26: {
            global::Magewatch.API.CreatureId subBuilder = new global::Magewatch.API.CreatureId();
            if (targetCase_ == TargetOneofCase.TargetCreature) {
              subBuilder.MergeFrom(TargetCreature);
            }
            input.ReadMessage(subBuilder);
            TargetCreature = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class MCreatureUpdate : pb::IMessage<MCreatureUpdate> {
    private static readonly pb::MessageParser<MCreatureUpdate> _parser = new pb::MessageParser<MCreatureUpdate>(() => new MCreatureUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MCreatureUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MCreatureUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MCreatureUpdate(MCreatureUpdate other) : this() {
      creatureId_ = other.creatureId_ != null ? other.creatureId_.Clone() : null;
      setHealthPercentage_ = other.setHealthPercentage_;
      playDeathAnimation_ = other.playDeathAnimation_;
      setManaPercentage_ = other.setManaPercentage_;
      playParticleEffects_ = other.playParticleEffects_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MCreatureUpdate Clone() {
      return new MCreatureUpdate(this);
    }

    /// <summary>Field number for the "creature_id" field.</summary>
    public const int CreatureIdFieldNumber = 1;
    private global::Magewatch.API.CreatureId creatureId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId CreatureId {
      get { return creatureId_; }
      set {
        creatureId_ = value;
      }
    }

    /// <summary>Field number for the "set_health_percentage" field.</summary>
    public const int SetHealthPercentageFieldNumber = 2;
    private float setHealthPercentage_;
    /// <summary>
    /// Set this creature's health percentage to a specific value, given as a
    /// number between 0 and 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SetHealthPercentage {
      get { return setHealthPercentage_; }
      set {
        setHealthPercentage_ = value;
      }
    }

    /// <summary>Field number for the "play_death_animation" field.</summary>
    public const int PlayDeathAnimationFieldNumber = 3;
    private bool playDeathAnimation_;
    /// <summary>
    /// Mark this creature as dead and play its death animation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PlayDeathAnimation {
      get { return playDeathAnimation_; }
      set {
        playDeathAnimation_ = value;
      }
    }

    /// <summary>Field number for the "set_mana_percentage" field.</summary>
    public const int SetManaPercentageFieldNumber = 4;
    private float setManaPercentage_;
    /// <summary>
    /// Set this creature's mana percentage to a specific value, given as a
    /// number between 0 and 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SetManaPercentage {
      get { return setManaPercentage_; }
      set {
        setManaPercentage_ = value;
      }
    }

    /// <summary>Field number for the "play_particle_effects" field.</summary>
    public const int PlayParticleEffectsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Magewatch.API.Asset> _repeated_playParticleEffects_codec
        = pb::FieldCodec.ForMessage(42, global::Magewatch.API.Asset.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.Asset> playParticleEffects_ = new pbc::RepeatedField<global::Magewatch.API.Asset>();
    /// <summary>
    /// Play particle effects on this creature
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.Asset> PlayParticleEffects {
      get { return playParticleEffects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MCreatureUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MCreatureUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreatureId, other.CreatureId)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SetHealthPercentage, other.SetHealthPercentage)) return false;
      if (PlayDeathAnimation != other.PlayDeathAnimation) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SetManaPercentage, other.SetManaPercentage)) return false;
      if(!playParticleEffects_.Equals(other.playParticleEffects_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creatureId_ != null) hash ^= CreatureId.GetHashCode();
      if (SetHealthPercentage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SetHealthPercentage);
      if (PlayDeathAnimation != false) hash ^= PlayDeathAnimation.GetHashCode();
      if (SetManaPercentage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SetManaPercentage);
      hash ^= playParticleEffects_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creatureId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreatureId);
      }
      if (SetHealthPercentage != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SetHealthPercentage);
      }
      if (PlayDeathAnimation != false) {
        output.WriteRawTag(24);
        output.WriteBool(PlayDeathAnimation);
      }
      if (SetManaPercentage != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SetManaPercentage);
      }
      playParticleEffects_.WriteTo(output, _repeated_playParticleEffects_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creatureId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatureId);
      }
      if (SetHealthPercentage != 0F) {
        size += 1 + 4;
      }
      if (PlayDeathAnimation != false) {
        size += 1 + 1;
      }
      if (SetManaPercentage != 0F) {
        size += 1 + 4;
      }
      size += playParticleEffects_.CalculateSize(_repeated_playParticleEffects_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MCreatureUpdate other) {
      if (other == null) {
        return;
      }
      if (other.creatureId_ != null) {
        if (creatureId_ == null) {
          CreatureId = new global::Magewatch.API.CreatureId();
        }
        CreatureId.MergeFrom(other.CreatureId);
      }
      if (other.SetHealthPercentage != 0F) {
        SetHealthPercentage = other.SetHealthPercentage;
      }
      if (other.PlayDeathAnimation != false) {
        PlayDeathAnimation = other.PlayDeathAnimation;
      }
      if (other.SetManaPercentage != 0F) {
        SetManaPercentage = other.SetManaPercentage;
      }
      playParticleEffects_.Add(other.playParticleEffects_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creatureId_ == null) {
              CreatureId = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(CreatureId);
            break;
          }
          case 21: {
            SetHealthPercentage = input.ReadFloat();
            break;
          }
          case 24: {
            PlayDeathAnimation = input.ReadBool();
            break;
          }
          case 37: {
            SetManaPercentage = input.ReadFloat();
            break;
          }
          case 42: {
            playParticleEffects_.AddEntriesFrom(input, _repeated_playParticleEffects_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Updates the state of a creature
  /// </summary>
  public sealed partial class UpdateCreatureCommand : pb::IMessage<UpdateCreatureCommand> {
    private static readonly pb::MessageParser<UpdateCreatureCommand> _parser = new pb::MessageParser<UpdateCreatureCommand>(() => new UpdateCreatureCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateCreatureCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCreatureCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCreatureCommand(UpdateCreatureCommand other) : this() {
      update_ = other.update_ != null ? other.update_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCreatureCommand Clone() {
      return new UpdateCreatureCommand(this);
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 1;
    private global::Magewatch.API.MCreatureUpdate update_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MCreatureUpdate Update {
      get { return update_; }
      set {
        update_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateCreatureCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateCreatureCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Update, other.Update)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (update_ != null) hash ^= Update.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (update_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Update);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (update_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateCreatureCommand other) {
      if (other == null) {
        return;
      }
      if (other.update_ != null) {
        if (update_ == null) {
          Update = new global::Magewatch.API.MCreatureUpdate();
        }
        Update.MergeFrom(other.Update);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (update_ == null) {
              Update = new global::Magewatch.API.MCreatureUpdate();
            }
            input.ReadMessage(Update);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Causes creatures to use skills
  /// </summary>
  public sealed partial class UseCreatureSkillCommand : pb::IMessage<UseCreatureSkillCommand> {
    private static readonly pb::MessageParser<UseCreatureSkillCommand> _parser = new pb::MessageParser<UseCreatureSkillCommand>(() => new UseCreatureSkillCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseCreatureSkillCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseCreatureSkillCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseCreatureSkillCommand(UseCreatureSkillCommand other) : this() {
      sourceCreature_ = other.sourceCreature_ != null ? other.sourceCreature_.Clone() : null;
      animation_ = other.animation_ != null ? other.animation_.Clone() : null;
      onImpact_ = other.onImpact_.Clone();
      meleeTarget_ = other.meleeTarget_ != null ? other.meleeTarget_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseCreatureSkillCommand Clone() {
      return new UseCreatureSkillCommand(this);
    }

    /// <summary>Field number for the "source_creature" field.</summary>
    public const int SourceCreatureFieldNumber = 1;
    private global::Magewatch.API.CreatureId sourceCreature_;
    /// <summary>
    /// Creature to apply these effects to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId SourceCreature {
      get { return sourceCreature_; }
      set {
        sourceCreature_ = value;
      }
    }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 2;
    private global::Magewatch.API.MSkillAnimation animation_;
    /// <summary>
    /// The skill animation to perform
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MSkillAnimation Animation {
      get { return animation_; }
      set {
        animation_ = value;
      }
    }

    /// <summary>Field number for the "on_impact" field.</summary>
    public const int OnImpactFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Magewatch.API.MOnImpactNumber> _repeated_onImpact_codec
        = pb::FieldCodec.ForMessage(26, global::Magewatch.API.MOnImpactNumber.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.MOnImpactNumber> onImpact_ = new pbc::RepeatedField<global::Magewatch.API.MOnImpactNumber>();
    /// <summary>
    /// What to do when the skill animation reaches its impact frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.MOnImpactNumber> OnImpact {
      get { return onImpact_; }
    }

    /// <summary>Field number for the "melee_target" field.</summary>
    public const int MeleeTargetFieldNumber = 4;
    private global::Magewatch.API.CreatureId meleeTarget_;
    /// <summary>
    /// Optionally a target for this skill. The creature will move into melee
    /// range with this target before performing the skill animation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreatureId MeleeTarget {
      get { return meleeTarget_; }
      set {
        meleeTarget_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseCreatureSkillCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseCreatureSkillCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SourceCreature, other.SourceCreature)) return false;
      if (!object.Equals(Animation, other.Animation)) return false;
      if(!onImpact_.Equals(other.onImpact_)) return false;
      if (!object.Equals(MeleeTarget, other.MeleeTarget)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sourceCreature_ != null) hash ^= SourceCreature.GetHashCode();
      if (animation_ != null) hash ^= Animation.GetHashCode();
      hash ^= onImpact_.GetHashCode();
      if (meleeTarget_ != null) hash ^= MeleeTarget.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sourceCreature_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SourceCreature);
      }
      if (animation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Animation);
      }
      onImpact_.WriteTo(output, _repeated_onImpact_codec);
      if (meleeTarget_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MeleeTarget);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sourceCreature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceCreature);
      }
      if (animation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Animation);
      }
      size += onImpact_.CalculateSize(_repeated_onImpact_codec);
      if (meleeTarget_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeleeTarget);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseCreatureSkillCommand other) {
      if (other == null) {
        return;
      }
      if (other.sourceCreature_ != null) {
        if (sourceCreature_ == null) {
          SourceCreature = new global::Magewatch.API.CreatureId();
        }
        SourceCreature.MergeFrom(other.SourceCreature);
      }
      if (other.animation_ != null) {
        if (animation_ == null) {
          Animation = new global::Magewatch.API.MSkillAnimation();
        }
        Animation.MergeFrom(other.Animation);
      }
      onImpact_.Add(other.onImpact_);
      if (other.meleeTarget_ != null) {
        if (meleeTarget_ == null) {
          MeleeTarget = new global::Magewatch.API.CreatureId();
        }
        MeleeTarget.MergeFrom(other.MeleeTarget);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (sourceCreature_ == null) {
              SourceCreature = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(SourceCreature);
            break;
          }
          case 18: {
            if (animation_ == null) {
              Animation = new global::Magewatch.API.MSkillAnimation();
            }
            input.ReadMessage(Animation);
            break;
          }
          case 26: {
            onImpact_.AddEntriesFrom(input, _repeated_onImpact_codec);
            break;
          }
          case 34: {
            if (meleeTarget_ == null) {
              MeleeTarget = new global::Magewatch.API.CreatureId();
            }
            input.ReadMessage(MeleeTarget);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A single instruction to the client UI to perform some action.
  /// </summary>
  public sealed partial class Command : pb::IMessage<Command> {
    private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Command> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command(Command other) : this() {
      switch (other.CommandCase) {
        case CommandOneofCase.Wait:
          Wait = other.Wait.Clone();
          break;
        case CommandOneofCase.UpdateInterface:
          UpdateInterface = other.UpdateInterface.Clone();
          break;
        case CommandOneofCase.DrawCard:
          DrawCard = other.DrawCard.Clone();
          break;
        case CommandOneofCase.PlayCard:
          PlayCard = other.PlayCard.Clone();
          break;
        case CommandOneofCase.UpdatePlayer:
          UpdatePlayer = other.UpdatePlayer.Clone();
          break;
        case CommandOneofCase.CreateOrUpdateCreature:
          CreateOrUpdateCreature = other.CreateOrUpdateCreature.Clone();
          break;
        case CommandOneofCase.RemoveCreature:
          RemoveCreature = other.RemoveCreature.Clone();
          break;
        case CommandOneofCase.MeleeEngage:
          MeleeEngage = other.MeleeEngage.Clone();
          break;
        case CommandOneofCase.Attack:
          Attack = other.Attack.Clone();
          break;
        case CommandOneofCase.UpdateCreature:
          UpdateCreature = other.UpdateCreature.Clone();
          break;
        case CommandOneofCase.UseCreatureSkill:
          UseCreatureSkill = other.UseCreatureSkill.Clone();
          break;
        case CommandOneofCase.DisplayError:
          DisplayError = other.DisplayError.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Command Clone() {
      return new Command(this);
    }

    /// <summary>Field number for the "wait" field.</summary>
    public const int WaitFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.WaitCommand Wait {
      get { return commandCase_ == CommandOneofCase.Wait ? (global::Magewatch.API.WaitCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Wait;
      }
    }

    /// <summary>Field number for the "update_interface" field.</summary>
    public const int UpdateInterfaceFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.UpdateInterfaceCommand UpdateInterface {
      get { return commandCase_ == CommandOneofCase.UpdateInterface ? (global::Magewatch.API.UpdateInterfaceCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UpdateInterface;
      }
    }

    /// <summary>Field number for the "draw_card" field.</summary>
    public const int DrawCardFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.DrawCardCommand DrawCard {
      get { return commandCase_ == CommandOneofCase.DrawCard ? (global::Magewatch.API.DrawCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DrawCard;
      }
    }

    /// <summary>Field number for the "play_card" field.</summary>
    public const int PlayCardFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.PlayCardCommand PlayCard {
      get { return commandCase_ == CommandOneofCase.PlayCard ? (global::Magewatch.API.PlayCardCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.PlayCard;
      }
    }

    /// <summary>Field number for the "update_player" field.</summary>
    public const int UpdatePlayerFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.UpdatePlayerCommand UpdatePlayer {
      get { return commandCase_ == CommandOneofCase.UpdatePlayer ? (global::Magewatch.API.UpdatePlayerCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UpdatePlayer;
      }
    }

    /// <summary>Field number for the "create_or_update_creature" field.</summary>
    public const int CreateOrUpdateCreatureFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.CreateOrUpdateCreatureCommand CreateOrUpdateCreature {
      get { return commandCase_ == CommandOneofCase.CreateOrUpdateCreature ? (global::Magewatch.API.CreateOrUpdateCreatureCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.CreateOrUpdateCreature;
      }
    }

    /// <summary>Field number for the "remove_creature" field.</summary>
    public const int RemoveCreatureFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.RemoveCreatureCommand RemoveCreature {
      get { return commandCase_ == CommandOneofCase.RemoveCreature ? (global::Magewatch.API.RemoveCreatureCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.RemoveCreature;
      }
    }

    /// <summary>Field number for the "melee_engage" field.</summary>
    public const int MeleeEngageFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.MeleeEngageCommand MeleeEngage {
      get { return commandCase_ == CommandOneofCase.MeleeEngage ? (global::Magewatch.API.MeleeEngageCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.MeleeEngage;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.AttackCommand Attack {
      get { return commandCase_ == CommandOneofCase.Attack ? (global::Magewatch.API.AttackCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.Attack;
      }
    }

    /// <summary>Field number for the "update_creature" field.</summary>
    public const int UpdateCreatureFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.UpdateCreatureCommand UpdateCreature {
      get { return commandCase_ == CommandOneofCase.UpdateCreature ? (global::Magewatch.API.UpdateCreatureCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UpdateCreature;
      }
    }

    /// <summary>Field number for the "use_creature_skill" field.</summary>
    public const int UseCreatureSkillFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.UseCreatureSkillCommand UseCreatureSkill {
      get { return commandCase_ == CommandOneofCase.UseCreatureSkill ? (global::Magewatch.API.UseCreatureSkillCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UseCreatureSkill;
      }
    }

    /// <summary>Field number for the "display_error" field.</summary>
    public const int DisplayErrorFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Magewatch.API.DisplayErrorCommand DisplayError {
      get { return commandCase_ == CommandOneofCase.DisplayError ? (global::Magewatch.API.DisplayErrorCommand) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.DisplayError;
      }
    }

    private object command_;
    /// <summary>Enum of possible cases for the "command" oneof.</summary>
    public enum CommandOneofCase {
      None = 0,
      Wait = 1,
      UpdateInterface = 2,
      DrawCard = 3,
      PlayCard = 4,
      UpdatePlayer = 5,
      CreateOrUpdateCreature = 6,
      RemoveCreature = 7,
      MeleeEngage = 8,
      Attack = 9,
      UpdateCreature = 10,
      UseCreatureSkill = 11,
      DisplayError = 12,
    }
    private CommandOneofCase commandCase_ = CommandOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandOneofCase CommandCase {
      get { return commandCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommand() {
      commandCase_ = CommandOneofCase.None;
      command_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Command);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Wait, other.Wait)) return false;
      if (!object.Equals(UpdateInterface, other.UpdateInterface)) return false;
      if (!object.Equals(DrawCard, other.DrawCard)) return false;
      if (!object.Equals(PlayCard, other.PlayCard)) return false;
      if (!object.Equals(UpdatePlayer, other.UpdatePlayer)) return false;
      if (!object.Equals(CreateOrUpdateCreature, other.CreateOrUpdateCreature)) return false;
      if (!object.Equals(RemoveCreature, other.RemoveCreature)) return false;
      if (!object.Equals(MeleeEngage, other.MeleeEngage)) return false;
      if (!object.Equals(Attack, other.Attack)) return false;
      if (!object.Equals(UpdateCreature, other.UpdateCreature)) return false;
      if (!object.Equals(UseCreatureSkill, other.UseCreatureSkill)) return false;
      if (!object.Equals(DisplayError, other.DisplayError)) return false;
      if (CommandCase != other.CommandCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commandCase_ == CommandOneofCase.Wait) hash ^= Wait.GetHashCode();
      if (commandCase_ == CommandOneofCase.UpdateInterface) hash ^= UpdateInterface.GetHashCode();
      if (commandCase_ == CommandOneofCase.DrawCard) hash ^= DrawCard.GetHashCode();
      if (commandCase_ == CommandOneofCase.PlayCard) hash ^= PlayCard.GetHashCode();
      if (commandCase_ == CommandOneofCase.UpdatePlayer) hash ^= UpdatePlayer.GetHashCode();
      if (commandCase_ == CommandOneofCase.CreateOrUpdateCreature) hash ^= CreateOrUpdateCreature.GetHashCode();
      if (commandCase_ == CommandOneofCase.RemoveCreature) hash ^= RemoveCreature.GetHashCode();
      if (commandCase_ == CommandOneofCase.MeleeEngage) hash ^= MeleeEngage.GetHashCode();
      if (commandCase_ == CommandOneofCase.Attack) hash ^= Attack.GetHashCode();
      if (commandCase_ == CommandOneofCase.UpdateCreature) hash ^= UpdateCreature.GetHashCode();
      if (commandCase_ == CommandOneofCase.UseCreatureSkill) hash ^= UseCreatureSkill.GetHashCode();
      if (commandCase_ == CommandOneofCase.DisplayError) hash ^= DisplayError.GetHashCode();
      hash ^= (int) commandCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commandCase_ == CommandOneofCase.Wait) {
        output.WriteRawTag(10);
        output.WriteMessage(Wait);
      }
      if (commandCase_ == CommandOneofCase.UpdateInterface) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateInterface);
      }
      if (commandCase_ == CommandOneofCase.DrawCard) {
        output.WriteRawTag(26);
        output.WriteMessage(DrawCard);
      }
      if (commandCase_ == CommandOneofCase.PlayCard) {
        output.WriteRawTag(34);
        output.WriteMessage(PlayCard);
      }
      if (commandCase_ == CommandOneofCase.UpdatePlayer) {
        output.WriteRawTag(42);
        output.WriteMessage(UpdatePlayer);
      }
      if (commandCase_ == CommandOneofCase.CreateOrUpdateCreature) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateOrUpdateCreature);
      }
      if (commandCase_ == CommandOneofCase.RemoveCreature) {
        output.WriteRawTag(58);
        output.WriteMessage(RemoveCreature);
      }
      if (commandCase_ == CommandOneofCase.MeleeEngage) {
        output.WriteRawTag(66);
        output.WriteMessage(MeleeEngage);
      }
      if (commandCase_ == CommandOneofCase.Attack) {
        output.WriteRawTag(74);
        output.WriteMessage(Attack);
      }
      if (commandCase_ == CommandOneofCase.UpdateCreature) {
        output.WriteRawTag(82);
        output.WriteMessage(UpdateCreature);
      }
      if (commandCase_ == CommandOneofCase.UseCreatureSkill) {
        output.WriteRawTag(90);
        output.WriteMessage(UseCreatureSkill);
      }
      if (commandCase_ == CommandOneofCase.DisplayError) {
        output.WriteRawTag(98);
        output.WriteMessage(DisplayError);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commandCase_ == CommandOneofCase.Wait) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wait);
      }
      if (commandCase_ == CommandOneofCase.UpdateInterface) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateInterface);
      }
      if (commandCase_ == CommandOneofCase.DrawCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrawCard);
      }
      if (commandCase_ == CommandOneofCase.PlayCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayCard);
      }
      if (commandCase_ == CommandOneofCase.UpdatePlayer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatePlayer);
      }
      if (commandCase_ == CommandOneofCase.CreateOrUpdateCreature) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateOrUpdateCreature);
      }
      if (commandCase_ == CommandOneofCase.RemoveCreature) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveCreature);
      }
      if (commandCase_ == CommandOneofCase.MeleeEngage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeleeEngage);
      }
      if (commandCase_ == CommandOneofCase.Attack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attack);
      }
      if (commandCase_ == CommandOneofCase.UpdateCreature) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateCreature);
      }
      if (commandCase_ == CommandOneofCase.UseCreatureSkill) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UseCreatureSkill);
      }
      if (commandCase_ == CommandOneofCase.DisplayError) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayError);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Command other) {
      if (other == null) {
        return;
      }
      switch (other.CommandCase) {
        case CommandOneofCase.Wait:
          if (Wait == null) {
            Wait = new global::Magewatch.API.WaitCommand();
          }
          Wait.MergeFrom(other.Wait);
          break;
        case CommandOneofCase.UpdateInterface:
          if (UpdateInterface == null) {
            UpdateInterface = new global::Magewatch.API.UpdateInterfaceCommand();
          }
          UpdateInterface.MergeFrom(other.UpdateInterface);
          break;
        case CommandOneofCase.DrawCard:
          if (DrawCard == null) {
            DrawCard = new global::Magewatch.API.DrawCardCommand();
          }
          DrawCard.MergeFrom(other.DrawCard);
          break;
        case CommandOneofCase.PlayCard:
          if (PlayCard == null) {
            PlayCard = new global::Magewatch.API.PlayCardCommand();
          }
          PlayCard.MergeFrom(other.PlayCard);
          break;
        case CommandOneofCase.UpdatePlayer:
          if (UpdatePlayer == null) {
            UpdatePlayer = new global::Magewatch.API.UpdatePlayerCommand();
          }
          UpdatePlayer.MergeFrom(other.UpdatePlayer);
          break;
        case CommandOneofCase.CreateOrUpdateCreature:
          if (CreateOrUpdateCreature == null) {
            CreateOrUpdateCreature = new global::Magewatch.API.CreateOrUpdateCreatureCommand();
          }
          CreateOrUpdateCreature.MergeFrom(other.CreateOrUpdateCreature);
          break;
        case CommandOneofCase.RemoveCreature:
          if (RemoveCreature == null) {
            RemoveCreature = new global::Magewatch.API.RemoveCreatureCommand();
          }
          RemoveCreature.MergeFrom(other.RemoveCreature);
          break;
        case CommandOneofCase.MeleeEngage:
          if (MeleeEngage == null) {
            MeleeEngage = new global::Magewatch.API.MeleeEngageCommand();
          }
          MeleeEngage.MergeFrom(other.MeleeEngage);
          break;
        case CommandOneofCase.Attack:
          if (Attack == null) {
            Attack = new global::Magewatch.API.AttackCommand();
          }
          Attack.MergeFrom(other.Attack);
          break;
        case CommandOneofCase.UpdateCreature:
          if (UpdateCreature == null) {
            UpdateCreature = new global::Magewatch.API.UpdateCreatureCommand();
          }
          UpdateCreature.MergeFrom(other.UpdateCreature);
          break;
        case CommandOneofCase.UseCreatureSkill:
          if (UseCreatureSkill == null) {
            UseCreatureSkill = new global::Magewatch.API.UseCreatureSkillCommand();
          }
          UseCreatureSkill.MergeFrom(other.UseCreatureSkill);
          break;
        case CommandOneofCase.DisplayError:
          if (DisplayError == null) {
            DisplayError = new global::Magewatch.API.DisplayErrorCommand();
          }
          DisplayError.MergeFrom(other.DisplayError);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Magewatch.API.WaitCommand subBuilder = new global::Magewatch.API.WaitCommand();
            if (commandCase_ == CommandOneofCase.Wait) {
              subBuilder.MergeFrom(Wait);
            }
            input.ReadMessage(subBuilder);
            Wait = subBuilder;
            break;
          }
          case 18: {
            global::Magewatch.API.UpdateInterfaceCommand subBuilder = new global::Magewatch.API.UpdateInterfaceCommand();
            if (commandCase_ == CommandOneofCase.UpdateInterface) {
              subBuilder.MergeFrom(UpdateInterface);
            }
            input.ReadMessage(subBuilder);
            UpdateInterface = subBuilder;
            break;
          }
          case 26: {
            global::Magewatch.API.DrawCardCommand subBuilder = new global::Magewatch.API.DrawCardCommand();
            if (commandCase_ == CommandOneofCase.DrawCard) {
              subBuilder.MergeFrom(DrawCard);
            }
            input.ReadMessage(subBuilder);
            DrawCard = subBuilder;
            break;
          }
          case 34: {
            global::Magewatch.API.PlayCardCommand subBuilder = new global::Magewatch.API.PlayCardCommand();
            if (commandCase_ == CommandOneofCase.PlayCard) {
              subBuilder.MergeFrom(PlayCard);
            }
            input.ReadMessage(subBuilder);
            PlayCard = subBuilder;
            break;
          }
          case 42: {
            global::Magewatch.API.UpdatePlayerCommand subBuilder = new global::Magewatch.API.UpdatePlayerCommand();
            if (commandCase_ == CommandOneofCase.UpdatePlayer) {
              subBuilder.MergeFrom(UpdatePlayer);
            }
            input.ReadMessage(subBuilder);
            UpdatePlayer = subBuilder;
            break;
          }
          case 50: {
            global::Magewatch.API.CreateOrUpdateCreatureCommand subBuilder = new global::Magewatch.API.CreateOrUpdateCreatureCommand();
            if (commandCase_ == CommandOneofCase.CreateOrUpdateCreature) {
              subBuilder.MergeFrom(CreateOrUpdateCreature);
            }
            input.ReadMessage(subBuilder);
            CreateOrUpdateCreature = subBuilder;
            break;
          }
          case 58: {
            global::Magewatch.API.RemoveCreatureCommand subBuilder = new global::Magewatch.API.RemoveCreatureCommand();
            if (commandCase_ == CommandOneofCase.RemoveCreature) {
              subBuilder.MergeFrom(RemoveCreature);
            }
            input.ReadMessage(subBuilder);
            RemoveCreature = subBuilder;
            break;
          }
          case 66: {
            global::Magewatch.API.MeleeEngageCommand subBuilder = new global::Magewatch.API.MeleeEngageCommand();
            if (commandCase_ == CommandOneofCase.MeleeEngage) {
              subBuilder.MergeFrom(MeleeEngage);
            }
            input.ReadMessage(subBuilder);
            MeleeEngage = subBuilder;
            break;
          }
          case 74: {
            global::Magewatch.API.AttackCommand subBuilder = new global::Magewatch.API.AttackCommand();
            if (commandCase_ == CommandOneofCase.Attack) {
              subBuilder.MergeFrom(Attack);
            }
            input.ReadMessage(subBuilder);
            Attack = subBuilder;
            break;
          }
          case 82: {
            global::Magewatch.API.UpdateCreatureCommand subBuilder = new global::Magewatch.API.UpdateCreatureCommand();
            if (commandCase_ == CommandOneofCase.UpdateCreature) {
              subBuilder.MergeFrom(UpdateCreature);
            }
            input.ReadMessage(subBuilder);
            UpdateCreature = subBuilder;
            break;
          }
          case 90: {
            global::Magewatch.API.UseCreatureSkillCommand subBuilder = new global::Magewatch.API.UseCreatureSkillCommand();
            if (commandCase_ == CommandOneofCase.UseCreatureSkill) {
              subBuilder.MergeFrom(UseCreatureSkill);
            }
            input.ReadMessage(subBuilder);
            UseCreatureSkill = subBuilder;
            break;
          }
          case 98: {
            global::Magewatch.API.DisplayErrorCommand subBuilder = new global::Magewatch.API.DisplayErrorCommand();
            if (commandCase_ == CommandOneofCase.DisplayError) {
              subBuilder.MergeFrom(DisplayError);
            }
            input.ReadMessage(subBuilder);
            DisplayError = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a set of commands which should be executed in parallel,
  /// operating simultaneously. Position in the command list indicates visually
  /// which commands happen first
  /// </summary>
  public sealed partial class CommandGroup : pb::IMessage<CommandGroup> {
    private static readonly pb::MessageParser<CommandGroup> _parser = new pb::MessageParser<CommandGroup>(() => new CommandGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGroup(CommandGroup other) : this() {
      commands_ = other.commands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandGroup Clone() {
      return new CommandGroup(this);
    }

    /// <summary>Field number for the "commands" field.</summary>
    public const int CommandsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Magewatch.API.Command> _repeated_commands_codec
        = pb::FieldCodec.ForMessage(10, global::Magewatch.API.Command.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.Command> commands_ = new pbc::RepeatedField<global::Magewatch.API.Command>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.Command> Commands {
      get { return commands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commands_.Equals(other.commands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commands_.WriteTo(output, _repeated_commands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commands_.CalculateSize(_repeated_commands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandGroup other) {
      if (other == null) {
        return;
      }
      commands_.Add(other.commands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commands_.AddEntriesFrom(input, _repeated_commands_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a sequence of groups of commands which should be executed in
  /// serial, one after another. Each group is completely executed before the
  /// next group begins.
  /// </summary>
  public sealed partial class CommandList : pb::IMessage<CommandList> {
    private static readonly pb::MessageParser<CommandList> _parser = new pb::MessageParser<CommandList>(() => new CommandList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Magewatch.API.ApiReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandList(CommandList other) : this() {
      commandGroups_ = other.commandGroups_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandList Clone() {
      return new CommandList(this);
    }

    /// <summary>Field number for the "command_groups" field.</summary>
    public const int CommandGroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Magewatch.API.CommandGroup> _repeated_commandGroups_codec
        = pb::FieldCodec.ForMessage(10, global::Magewatch.API.CommandGroup.Parser);
    private readonly pbc::RepeatedField<global::Magewatch.API.CommandGroup> commandGroups_ = new pbc::RepeatedField<global::Magewatch.API.CommandGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Magewatch.API.CommandGroup> CommandGroups {
      get { return commandGroups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!commandGroups_.Equals(other.commandGroups_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= commandGroups_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      commandGroups_.WriteTo(output, _repeated_commandGroups_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += commandGroups_.CalculateSize(_repeated_commandGroups_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandList other) {
      if (other == null) {
        return;
      }
      commandGroups_.Add(other.commandGroups_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            commandGroups_.AddEntriesFrom(input, _repeated_commandGroups_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
